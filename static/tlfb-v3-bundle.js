(()=>{"use strict";var e={748:(e,t,n)=>{n.r(t),n.d(t,{Children:()=>G,Component:()=>a.Component,Fragment:()=>a.Fragment,PureComponent:()=>L,StrictMode:()=>Te,Suspense:()=>X,SuspenseList:()=>K,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>ye,cloneElement:()=>Se,createContext:()=>a.createContext,createElement:()=>a.createElement,createFactory:()=>be,createPortal:()=>re,createRef:()=>a.createRef,default:()=>Ie,findDOMNode:()=>Ae,flushSync:()=>we,forwardRef:()=>V,hydrate:()=>ce,isValidElement:()=>Ee,lazy:()=>$,memo:()=>U,render:()=>le,startTransition:()=>Re,unmountComponentAtNode:()=>De,unstable_batchedUpdates:()=>Ce,useCallback:()=>A,useContext:()=>C,useDebugValue:()=>w,useDeferredValue:()=>Oe,useEffect:()=>_,useErrorBoundary:()=>T,useId:()=>R,useImperativeHandle:()=>S,useInsertionEffect:()=>ke,useLayoutEffect:()=>b,useMemo:()=>D,useReducer:()=>y,useRef:()=>E,useState:()=>v,useSyncExternalStore:()=>Me,useTransition:()=>xe,version:()=>_e});var r,i,s,o,a=n(400),l=0,c=[],d=[],u=a.options.__b,h=a.options.__r,f=a.options.diffed,p=a.options.__c,g=a.options.unmount;function m(e,t){a.options.__h&&a.options.__h(i,e,l||t),l=0;var n=i.__H||(i.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({__V:d}),n.__[e]}function v(e){return l=1,y(P,e)}function y(e,t,n){var s=m(r++,2);if(s.t=e,!s.__c&&(s.__=[n?n(t):P(void 0,t),function(e){var t=s.__N?s.__N[0]:s.__[0],n=s.t(t,e);t!==n&&(s.__N=[n,s.__[1]],s.__c.setState({}))}],s.__c=i,!i.u)){i.u=!0;var o=i.shouldComponentUpdate;i.shouldComponentUpdate=function(e,t,n){if(!s.__c.__H)return!0;var r=s.__c.__H.__.filter((function(e){return e.__c}));if(r.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var i=!1;return r.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(i=!0)}})),!(!i&&s.__c.props===e)&&(!o||o.call(this,e,t,n))}}return s.__N||s.__}function _(e,t){var n=m(r++,3);!a.options.__s&&N(n.__H,t)&&(n.__=e,n.i=t,i.__H.__h.push(n))}function b(e,t){var n=m(r++,4);!a.options.__s&&N(n.__H,t)&&(n.__=e,n.i=t,i.__h.push(n))}function E(e){return l=5,D((function(){return{current:e}}),[])}function S(e,t,n){l=6,b((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function D(e,t){var n=m(r++,7);return N(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function A(e,t){return l=8,D((function(){return e}),t)}function C(e){var t=i.context[e.__c],n=m(r++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(i)),t.props.value):e.__}function w(e,t){a.options.useDebugValue&&a.options.useDebugValue(t?t(e):e)}function T(e){var t=m(r++,10),n=v();return t.__=e,i.componentDidCatch||(i.componentDidCatch=function(e,r){t.__&&t.__(e,r),n[1](e)}),[n[0],function(){n[1](void 0)}]}function R(){var e=m(r++,11);if(!e.__){for(var t=i.__v;null!==t&&!t.__m&&null!==t.__;)t=t.__;var n=t.__m||(t.__m=[0,0]);e.__="P"+n[0]+"-"+n[1]++}return e.__}function O(){for(var e;e=c.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(M),e.__H.__h.forEach(I),e.__H.__h=[]}catch(t){e.__H.__h=[],a.options.__e(t,e.__v)}}a.options.__b=function(e){i=null,u&&u(e)},a.options.__r=function(e){h&&h(e),r=0;var t=(i=e.__c).__H;t&&(s===i?(t.__h=[],i.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=d,e.__N=e.i=void 0}))):(t.__h.forEach(M),t.__h.forEach(I),t.__h=[])),s=i},a.options.diffed=function(e){f&&f(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==c.push(t)&&o===a.options.requestAnimationFrame||((o=a.options.requestAnimationFrame)||k)(O)),t.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==d&&(e.__=e.__V),e.i=void 0,e.__V=d}))),s=i=null},a.options.__c=function(e,t){t.some((function(e){try{e.__h.forEach(M),e.__h=e.__h.filter((function(e){return!e.__||I(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],a.options.__e(n,e.__v)}})),p&&p(e,t)},a.options.unmount=function(e){g&&g(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{M(e)}catch(e){t=e}})),n.__H=void 0,t&&a.options.__e(t,n.__v))};var x="function"==typeof requestAnimationFrame;function k(e){var t,n=function(){clearTimeout(r),x&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);x&&(t=requestAnimationFrame(n))}function M(e){var t=i,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),i=t}function I(e){var t=i;e.__c=e.__(),i=t}function N(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function P(e,t){return"function"==typeof t?t(e):t}function H(e,t){for(var n in t)e[n]=t[n];return e}function j(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var r in t)if("__source"!==r&&e[r]!==t[r])return!0;return!1}function B(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}function L(e){this.props=e}function U(e,t){function n(e){var n=this.props.ref,r=n==e.ref;return!r&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!r:j(this.props,e)}function r(t){return this.shouldComponentUpdate=n,(0,a.createElement)(e,t)}return r.displayName="Memo("+(e.displayName||e.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(L.prototype=new a.Component).isPureReactComponent=!0,L.prototype.shouldComponentUpdate=function(e,t){return j(this.props,e)||j(this.state,t)};var F=a.options.__b;a.options.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),F&&F(e)};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function V(e){function t(t){var n=H({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=z,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var W=function(e,t){return null==e?null:(0,a.toChildArray)((0,a.toChildArray)(e).map(t))},G={map:W,forEach:W,count:function(e){return e?(0,a.toChildArray)(e).length:0},only:function(e){var t=(0,a.toChildArray)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:a.toChildArray},q=a.options.__e;a.options.__e=function(e,t,n,r){if(e.then)for(var i,s=t;s=s.__;)if((i=s.__c)&&i.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),i.__c(e,t);q(e,t,n,r)};var Y=a.options.unmount;function Q(e,t,n){return e&&(e.__c&&e.__c.__H&&(e.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),e.__c.__H=null),null!=(e=H({},e)).__c&&(e.__c.__P===n&&(e.__c.__P=t),e.__c=null),e.__k=e.__k&&e.__k.map((function(e){return Q(e,t,n)}))),e}function Z(e,t,n){return e&&(e.__v=null,e.__k=e.__k&&e.__k.map((function(e){return Z(e,t,n)})),e.__c&&e.__c.__P===t&&(e.__e&&n.insertBefore(e.__e,e.__d),e.__c.__e=!0,e.__c.__P=n)),e}function X(){this.__u=0,this.t=null,this.__b=null}function J(e){var t=e.__.__c;return t&&t.__a&&t.__a(e)}function $(e){var t,n,r;function i(i){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){r=e})),r)throw r;if(!n)throw t;return(0,a.createElement)(n,i)}return i.displayName="Lazy",i.__f=!0,i}function K(){this.u=null,this.o=null}a.options.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&!0===e.__h&&(e.type=null),Y&&Y(e)},(X.prototype=new a.Component).__c=function(e,t){var n=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(n);var i=J(r.__v),s=!1,o=function(){s||(s=!0,n.__R=null,i?i(a):a())};n.__R=o;var a=function(){if(!--r.__u){if(r.state.__a){var e=r.state.__a;r.__v.__k[0]=Z(e,e.__c.__P,e.__c.__O)}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate()}},l=!0===t.__h;r.__u++||l||r.setState({__a:r.__b=r.__v.__k[0]}),e.then(o,o)},X.prototype.componentWillUnmount=function(){this.t=[]},X.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=Q(this.__b,n,r.__O=r.__P)}this.__b=null}var i=t.__a&&(0,a.createElement)(a.Fragment,null,e.fallback);return i&&(i.__h=null),[(0,a.createElement)(a.Fragment,null,t.__a?null:e.children),i]};var ee=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function te(e){return this.getChildContext=function(){return e.context},e.children}function ne(e){var t=this,n=e.i;t.componentWillUnmount=function(){(0,a.render)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),e.__v?(t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,a.render)((0,a.createElement)(te,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function re(e,t){var n=(0,a.createElement)(ne,{__v:e,i:t});return n.containerInfo=t,n}(K.prototype=new a.Component).__a=function(e){var t=this,n=J(t.__v),r=t.o.get(e);return r[0]++,function(i){var s=function(){t.props.revealOrder?(r.push(i),ee(t,e,r)):i()};n?n(s):s()}},K.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,a.toChildArray)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},K.prototype.componentDidUpdate=K.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){ee(e,n,t)}))};var ie="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,se=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,oe="undefined"!=typeof document,ae=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function le(e,t,n){return null==t.__k&&(t.textContent=""),(0,a.render)(e,t),"function"==typeof n&&n(),e?e.__c:null}function ce(e,t,n){return(0,a.hydrate)(e,t),"function"==typeof n&&n(),e?e.__c:null}a.Component.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(a.Component.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var de=a.options.event;function ue(){}function he(){return this.cancelBubble}function fe(){return this.defaultPrevented}a.options.event=function(e){return de&&(e=de(e)),e.persist=ue,e.isPropagationStopped=he,e.isDefaultPrevented=fe,e.nativeEvent=e};var pe,ge={configurable:!0,get:function(){return this.class}},me=a.options.vnode;a.options.vnode=function(e){var t=e.type,n=e.props,r=n;if("string"==typeof t){var i=-1===t.indexOf("-");for(var s in r={},n){var o=n[s];oe&&"children"===s&&"noscript"===t||"value"===s&&"defaultValue"in n&&null==o||("defaultValue"===s&&"value"in n&&null==n.value?s="value":"download"===s&&!0===o?o="":/ondoubleclick/i.test(s)?s="ondblclick":/^onchange(textarea|input)/i.test(s+t)&&!ae(n.type)?s="oninput":/^onfocus$/i.test(s)?s="onfocusin":/^onblur$/i.test(s)?s="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(s)?s=s.toLowerCase():i&&se.test(s)?s=s.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===o&&(o=void 0),/^oninput$/i.test(s)&&(s=s.toLowerCase(),r[s]&&(s="oninputCapture")),r[s]=o)}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=-1!=r.value.indexOf(e.props.value)}))),"select"==t&&null!=r.defaultValue&&(r.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=r.multiple?-1!=r.defaultValue.indexOf(e.props.value):r.defaultValue==e.props.value}))),e.props=r,n.class!=n.className&&(ge.enumerable="className"in n,null!=n.className&&(r.class=n.className),Object.defineProperty(r,"className",ge))}e.$$typeof=ie,me&&me(e)};var ve=a.options.__r;a.options.__r=function(e){ve&&ve(e),pe=e.__c};var ye={ReactCurrentDispatcher:{current:{readContext:function(e){return pe.__n[e.__c].props.value}}}},_e="17.0.2";function be(e){return a.createElement.bind(null,e)}function Ee(e){return!!e&&e.$$typeof===ie}function Se(e){return Ee(e)?a.cloneElement.apply(null,arguments):e}function De(e){return!!e.__k&&((0,a.render)(null,e),!0)}function Ae(e){return e&&(e.base||1===e.nodeType&&e)||null}var Ce=function(e,t){return e(t)},we=function(e,t){return e(t)},Te=a.Fragment;function Re(e){e()}function Oe(e){return e}function xe(){return[!1,Re]}var ke=b;function Me(e,t){var n=t(),r=v({h:{__:n,v:t}}),i=r[0].h,s=r[1];return b((function(){i.__=n,i.v=t,B(i.__,t())||s({h:i})}),[e,n,t]),_((function(){return B(i.__,i.v())||s({h:i}),e((function(){B(i.__,i.v())||s({h:i})}))}),[e]),n}var Ie={useState:v,useId:R,useReducer:y,useEffect:_,useLayoutEffect:b,useInsertionEffect:ke,useTransition:xe,useDeferredValue:Oe,useSyncExternalStore:Me,startTransition:Re,useRef:E,useImperativeHandle:S,useMemo:D,useCallback:A,useContext:C,useDebugValue:w,version:"17.0.2",Children:G,render:le,hydrate:ce,unmountComponentAtNode:De,createPortal:re,createElement:a.createElement,createContext:a.createContext,createFactory:be,cloneElement:Se,createRef:a.createRef,Fragment:a.Fragment,isValidElement:Ee,findDOMNode:Ae,Component:a.Component,PureComponent:L,memo:U,forwardRef:V,flushSync:we,unstable_batchedUpdates:Ce,StrictMode:Te,Suspense:X,SuspenseList:K,lazy:$,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:ye}},400:(e,t,n)=>{n.r(t),n.d(t,{Component:()=>C,Fragment:()=>b,cloneElement:()=>W,createContext:()=>G,createElement:()=>v,createRef:()=>_,h:()=>v,hydrate:()=>V,isValidElement:()=>o,options:()=>i,render:()=>z,toChildArray:()=>I});var r,i,s,o,a,l,c,d,u,h={},f=[],p=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function g(e,t){for(var n in t)e[n]=t[n];return e}function m(e){var t=e.parentNode;t&&t.removeChild(e)}function v(e,t,n){var i,s,o,a={};for(o in t)"key"==o?i=t[o]:"ref"==o?s=t[o]:a[o]=t[o];if(arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(o in e.defaultProps)void 0===a[o]&&(a[o]=e.defaultProps[o]);return y(e,a,i,s,null)}function y(e,t,n,r,o){var a={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++s:o};return null==o&&null!=i.vnode&&i.vnode(a),a}function _(){return{current:null}}function b(e){return e.children}function E(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||p.test(t)?n:n+"px"}function S(e,t,n,r,i){var s;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||E(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||E(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])s=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+s]=n,n?r||e.addEventListener(t,s?A:D,s):e.removeEventListener(t,s?A:D,s);else if("dangerouslySetInnerHTML"!==t){if(i)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&-1==t.indexOf("-")?e.removeAttribute(t):e.setAttribute(t,n))}}function D(e){a=!0;try{return this.l[e.type+!1](i.event?i.event(e):e)}finally{a=!1}}function A(e){a=!0;try{return this.l[e.type+!0](i.event?i.event(e):e)}finally{a=!1}}function C(e,t){this.props=e,this.context=t}function w(e,t){if(null==t)return e.__?w(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?w(e):null}function T(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return T(e)}}function R(e){a?setTimeout(e):d(e)}function O(e){(!e.__d&&(e.__d=!0)&&l.push(e)&&!x.__r++||c!==i.debounceRendering)&&((c=i.debounceRendering)||R)(x)}function x(){var e,t,n,r,i,s,o,a;for(l.sort((function(e,t){return e.__v.__b-t.__v.__b}));e=l.shift();)e.__d&&(t=l.length,r=void 0,i=void 0,o=(s=(n=e).__v).__e,(a=n.__P)&&(r=[],(i=g({},s)).__v=s.__v+1,H(a,s,i,n.__n,void 0!==a.ownerSVGElement,null!=s.__h?[o]:null,r,null==o?w(s):o,s.__h),j(r,s),s.__e!=o&&T(s)),l.length>t&&l.sort((function(e,t){return e.__v.__b-t.__v.__b})));x.__r=0}function k(e,t,n,r,i,s,o,a,l,c){var d,u,p,g,m,v,_,E=r&&r.__k||f,S=E.length;for(n.__k=[],d=0;d<t.length;d++)if(null!=(g=n.__k[d]=null==(g=t[d])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?y(null,g,null,null,g):Array.isArray(g)?y(b,{children:g},null,null,null):g.__b>0?y(g.type,g.props,g.key,g.ref?g.ref:null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(p=E[d])||p&&g.key==p.key&&g.type===p.type)E[d]=void 0;else for(u=0;u<S;u++){if((p=E[u])&&g.key==p.key&&g.type===p.type){E[u]=void 0;break}p=null}H(e,g,p=p||h,i,s,o,a,l,c),m=g.__e,(u=g.ref)&&p.ref!=u&&(_||(_=[]),p.ref&&_.push(p.ref,null,g),_.push(u,g.__c||m,g)),null!=m?(null==v&&(v=m),"function"==typeof g.type&&g.__k===p.__k?g.__d=l=M(g,l,e):l=N(e,g,p,E,m,l),"function"==typeof n.type&&(n.__d=l)):l&&p.__e==l&&l.parentNode!=e&&(l=w(p))}for(n.__e=v,d=S;d--;)null!=E[d]&&("function"==typeof n.type&&null!=E[d].__e&&E[d].__e==n.__d&&(n.__d=P(r).nextSibling),U(E[d],E[d]));if(_)for(d=0;d<_.length;d++)L(_[d],_[++d],_[++d])}function M(e,t,n){for(var r,i=e.__k,s=0;i&&s<i.length;s++)(r=i[s])&&(r.__=e,t="function"==typeof r.type?M(r,t,n):N(n,r,r,i,r.__e,t));return t}function I(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){I(e,t)})):t.push(e)),t}function N(e,t,n,r,i,s){var o,a,l;if(void 0!==t.__d)o=t.__d,t.__d=void 0;else if(null==n||i!=s||null==i.parentNode)e:if(null==s||s.parentNode!==e)e.appendChild(i),o=null;else{for(a=s,l=0;(a=a.nextSibling)&&l<r.length;l+=1)if(a==i)break e;e.insertBefore(i,s),o=s}return void 0!==o?o:i.nextSibling}function P(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=P(n)))return r;return null}function H(e,t,n,r,s,o,a,l,c){var d,u,h,f,p,m,v,y,_,E,S,D,A,w,T,R=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(c=n.__h,l=t.__e=n.__e,t.__h=null,o=[l]),(d=i.__b)&&d(t);try{e:if("function"==typeof R){if(y=t.props,_=(d=R.contextType)&&r[d.__c],E=d?_?_.props.value:d.__:r,n.__c?v=(u=t.__c=n.__c).__=u.__E:("prototype"in R&&R.prototype.render?t.__c=u=new R(y,E):(t.__c=u=new C(y,E),u.constructor=R,u.render=F),_&&_.sub(u),u.props=y,u.state||(u.state={}),u.context=E,u.__n=r,h=u.__d=!0,u.__h=[],u._sb=[]),null==u.__s&&(u.__s=u.state),null!=R.getDerivedStateFromProps&&(u.__s==u.state&&(u.__s=g({},u.__s)),g(u.__s,R.getDerivedStateFromProps(y,u.__s))),f=u.props,p=u.state,u.__v=t,h)null==R.getDerivedStateFromProps&&null!=u.componentWillMount&&u.componentWillMount(),null!=u.componentDidMount&&u.__h.push(u.componentDidMount);else{if(null==R.getDerivedStateFromProps&&y!==f&&null!=u.componentWillReceiveProps&&u.componentWillReceiveProps(y,E),!u.__e&&null!=u.shouldComponentUpdate&&!1===u.shouldComponentUpdate(y,u.__s,E)||t.__v===n.__v){for(t.__v!==n.__v&&(u.props=y,u.state=u.__s,u.__d=!1),t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),S=0;S<u._sb.length;S++)u.__h.push(u._sb[S]);u._sb=[],u.__h.length&&a.push(u);break e}null!=u.componentWillUpdate&&u.componentWillUpdate(y,u.__s,E),null!=u.componentDidUpdate&&u.__h.push((function(){u.componentDidUpdate(f,p,m)}))}if(u.context=E,u.props=y,u.__P=e,D=i.__r,A=0,"prototype"in R&&R.prototype.render){for(u.state=u.__s,u.__d=!1,D&&D(t),d=u.render(u.props,u.state,u.context),w=0;w<u._sb.length;w++)u.__h.push(u._sb[w]);u._sb=[]}else do{u.__d=!1,D&&D(t),d=u.render(u.props,u.state,u.context),u.state=u.__s}while(u.__d&&++A<25);u.state=u.__s,null!=u.getChildContext&&(r=g(g({},r),u.getChildContext())),h||null==u.getSnapshotBeforeUpdate||(m=u.getSnapshotBeforeUpdate(f,p)),T=null!=d&&d.type===b&&null==d.key?d.props.children:d,k(e,Array.isArray(T)?T:[T],t,n,r,s,o,a,l,c),u.base=t.__e,t.__h=null,u.__h.length&&a.push(u),v&&(u.__E=u.__=null),u.__e=!1}else null==o&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=B(n.__e,t,n,r,s,o,a,c);(d=i.diffed)&&d(t)}catch(e){t.__v=null,(c||null!=o)&&(t.__e=l,t.__h=!!c,o[o.indexOf(l)]=null),i.__e(e,t,n)}}function j(e,t){i.__c&&i.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){i.__e(e,t.__v)}}))}function B(e,t,n,i,s,o,a,l){var c,d,u,f=n.props,p=t.props,g=t.type,v=0;if("svg"===g&&(s=!0),null!=o)for(;v<o.length;v++)if((c=o[v])&&"setAttribute"in c==!!g&&(g?c.localName===g:3===c.nodeType)){e=c,o[v]=null;break}if(null==e){if(null===g)return document.createTextNode(p);e=s?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,p.is&&p),o=null,l=!1}if(null===g)f===p||l&&e.data===p||(e.data=p);else{if(o=o&&r.call(e.childNodes),d=(f=n.props||h).dangerouslySetInnerHTML,u=p.dangerouslySetInnerHTML,!l){if(null!=o)for(f={},v=0;v<e.attributes.length;v++)f[e.attributes[v].name]=e.attributes[v].value;(u||d)&&(u&&(d&&u.__html==d.__html||u.__html===e.innerHTML)||(e.innerHTML=u&&u.__html||""))}if(function(e,t,n,r,i){var s;for(s in n)"children"===s||"key"===s||s in t||S(e,s,null,n[s],r);for(s in t)i&&"function"!=typeof t[s]||"children"===s||"key"===s||"value"===s||"checked"===s||n[s]===t[s]||S(e,s,t[s],n[s],r)}(e,p,f,s,l),u)t.__k=[];else if(v=t.props.children,k(e,Array.isArray(v)?v:[v],t,n,i,s&&"foreignObject"!==g,o,a,o?o[0]:n.__k&&w(n,0),l),null!=o)for(v=o.length;v--;)null!=o[v]&&m(o[v]);l||("value"in p&&void 0!==(v=p.value)&&(v!==e.value||"progress"===g&&!v||"option"===g&&v!==f.value)&&S(e,"value",v,f.value,!1),"checked"in p&&void 0!==(v=p.checked)&&v!==e.checked&&S(e,"checked",v,f.checked,!1))}return e}function L(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){i.__e(e,n)}}function U(e,t,n){var r,s;if(i.unmount&&i.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||L(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){i.__e(e,t)}r.base=r.__P=null,e.__c=void 0}if(r=e.__k)for(s=0;s<r.length;s++)r[s]&&U(r[s],t,n||"function"!=typeof e.type);n||null==e.__e||m(e.__e),e.__=e.__e=e.__d=void 0}function F(e,t,n){return this.constructor(e,n)}function z(e,t,n){var s,o,a;i.__&&i.__(e,t),o=(s="function"==typeof n)?null:n&&n.__k||t.__k,a=[],H(t,e=(!s&&n||t).__k=v(b,null,[e]),o||h,h,void 0!==t.ownerSVGElement,!s&&n?[n]:o?null:t.firstChild?r.call(t.childNodes):null,a,!s&&n?n:o?o.__e:t.firstChild,s),j(a,e)}function V(e,t){z(e,t,V)}function W(e,t,n){var i,s,o,a=g({},e.props);for(o in t)"key"==o?i=t[o]:"ref"==o?s=t[o]:a[o]=t[o];return arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),y(e.type,a,i||e.key,s||e.ref,null)}function G(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some((function(e){e.__e=!0,O(e)}))},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}r=f.slice,i={__e:function(e,t,n,r){for(var i,s,o;t=t.__;)if((i=t.__c)&&!i.__)try{if((s=i.constructor)&&null!=s.getDerivedStateFromError&&(i.setState(s.getDerivedStateFromError(e)),o=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(e,r||{}),o=i.__d),o)return i.__E=i}catch(t){e=t}throw e}},s=0,o=function(e){return null!=e&&void 0===e.constructor},a=!1,C.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=g({},this.state),"function"==typeof e&&(e=e(g({},n),this.props)),e&&g(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),O(this))},C.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),O(this))},C.prototype.render=b,l=[],d="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,x.__r=0,u=0},603:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.calc_days_since_last_use=t.calc_total_units=t.calc_total_occasions=t.calc_days_used_amount=t.calc_days_used=void 0;var r=n(601);function i(e,t,n){for(var r=new Set,i=new Set,s=0,o=e;s<o.length;s++){var a=o[s];a.properties.category===t&&(r.add(a.date.substring(0,10)),"unknown"!=a.properties.amount&&i.add(a.date.substring(0,10)))}return n?Array.from(r):Array.from(i)}t.calc_days_used=function(e,t){return i(e,t,!0).length},t.calc_days_used_amount=function(e,t){return i(e,t,!1).length},t.calc_total_occasions=function(e,t){for(var n=0,r=0,i=e;r<i.length;r++){var s=i[r];s.properties.category===t&&(n+=Number(s.properties.times))}return n},t.calc_total_units=function(e,t,n){for(var r=0,i=0,s=e;i<s.length;i++){var o=s[i];o.properties.substance==t&&o.properties.units==n&&"unknown"!=o.properties.amount&&(r+=Number(o.properties.amount))}return r},t.calc_days_since_last_use=function(e,t,n){var s=i(e,t,!0);if(s.length<1)return NaN;var o=s.reduce((function(e,t){var n=new Date(t);return n>e?n:e}),new Date(s[0]));return(new Date(n).valueOf()-o.valueOf())/r.CVT_MS_DAY}},601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RGX_DATE=t.RGX_WORD=t.RGX_INTEGER=t.COLOR_BROWN=t.COLOR_GREEN=t.COLOR_YELLOW=t.COLOR_ORANGE=t.COLOR_PURPLE=t.COLOR_TEXT=t.COLOR_WHITE=t.CAL_HEIGHT_DIFF=t.CVT_MS_DAY=t.CVT_HR_DAY=t.CVT_MIN_HR=t.CVT_S_MIN=t.CVT_MS_S=t.VERSION=void 0,t.VERSION="3.0.0",t.CVT_MS_S=1e3,t.CVT_S_MIN=60,t.CVT_MIN_HR=60,t.CVT_HR_DAY=24,t.CVT_MS_DAY=t.CVT_MS_S*t.CVT_S_MIN*t.CVT_MIN_HR*t.CVT_HR_DAY,t.CAL_HEIGHT_DIFF=205,t.COLOR_WHITE="#FFFFFF",t.COLOR_TEXT="#15141A",t.COLOR_PURPLE="#485FC7",t.COLOR_ORANGE="#E67975",t.COLOR_YELLOW="#F7DBA7",t.COLOR_GREEN="#041F1E",t.COLOR_BROWN="#5A352A",t.RGX_INTEGER=/^\d+$/,t.RGX_WORD=/^\w+$/,t.RGX_DATE=/^\d{4}-\d{2}-\d{2}$/},384:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Editor=void 0;var r=n(799),i=n(367),s=function(){function e(e){var t=this;this._copy_buffer=null,this._mode=null,this._calendar=e,this._substance_list=n(684),this._notification=document.getElementById("mode-notification"),this._substances_used={},document.querySelectorAll(".tlfb-edit-mode").forEach((function(e){return e.addEventListener("click",(function(e){return t.mode(e)}))})),this._calendar.on("dateClick",(function(e){return t.click_date(e)})),this._calendar.on("eventClick",(function(e){return t.click_event(e)})),this._calendar.on("select",(function(e){return t.select_range(e)})),this._modal_key_event=new r.Modal("modal-key-event"),this._modal_sub_event=new r.Modal("modal-substance-event"),this._modal_confirm=new r.Modal("modal-confirm");var s=new URLSearchParams(window.location.search),o=null==s.get("start")?s.get("start"):"2000-01-01",a=null==s.get("end")?s.get("end"):"2000-01-01";this._event_list=new i.CalendarEventList(o,a,this._calendar)}return e.prototype.clear=function(){this._mode=null,this._copy_buffer=null,this._notification.innerText="Click the edit menu to begin adding events."},e.prototype.mode=function(e){var t=e.target.id;switch(this.clear(),t){case"edit-mode-key-event":this._mode="add-key",this._notification.innerHTML="Click a date on the calendar to add a <b>key date</b>.";break;case"edit-mode-substance-event":0==Object.keys(this._substances_used).length?this._notification.innerHTML="Please update the <b>substance list</b> to include at least one substance.":(this._mode="add-su",this._notification.innerHTML="Click a date on the calendar to add a <b>substance use event</b>.");break;case"edit-mode-no-substance":this._mode="no-sub",this._notification.innerHTML="Click a date on the calendar on which there was no substances used.";break;case"edit-mode-copy":this._mode="copy",this._notification.innerHTML="Click an event on the calendar to <b>copy</b>.";break;case"edit-mode-delete":this._mode="delete",this._notification.innerHTML="Click an event on the calendar to <b>delete</b>.";break;default:throw Error("Edit.mode(): Invalid target received.")}console.log("Edit.mode(): ".concat(this._mode))},e.prototype.update_sub_options=function(e,t){t.innerHTML="",e.forEach((function(e){t.insertAdjacentHTML("beforeend",'<option value="'.concat(e.value,'">').concat(e.label,"</option>"))}))},e.prototype.update_amount=function(){var e=document.getElementById("substance-event-amount");document.getElementById("substance-event-amount-unknown").checked?(e.value="",e.disabled=!0,e.required=!1):(e.value="",e.disabled=!1,e.required=!0)},e.prototype.update_units=function(){var e=document.getElementById("substance-event-units"),t=document.getElementById("substance-event-units-other");document.getElementById("substance-event-units-unknown").checked?(t.value="",e.disabled=!0,e.required=!1,t.disabled=!0,t.required=!1):(t.value="",e.disabled=!1,e.required=!0,t.disabled=!0,t.required=!1,e.children.length||(e.disabled=!0,e.required=!1,t.disabled=!1,t.required=!0),"other_unit"===e.value&&(t.disabled=!1,t.required=!0))},e.prototype.update_type_options=function(e,t){var n=document.getElementById("substance-event-type"),r=this._substance_list.substance[e].find((function(e){return e.label===t}));if(null!=r)if(r.hasOwnProperty("type")){n.disabled=!1;var i=[];r.type.forEach((function(e){i.push({value:e,label:e})})),i.push({value:"unknown",label:"unknown"}),this.update_sub_options(i,n)}else n.innerHTML="",n.disabled=!0;else n.innerHTML="",n.disabled=!0},e.prototype.update_unit_options=function(e,t){var n=document.getElementById("substance-event-units"),r=document.getElementById("substance-event-units-other"),i=[],s=this._substance_list.substance[e].find((function(e){return e.label===t}));null!=s?(s.hasOwnProperty("units")?(n.disabled=!1,r.disabled=!0,r.required=!1,s.units.forEach((function(e){i.push({value:e,label:e})})),i.push({value:"other_unit",label:"other"}),this.update_sub_options(i,n)):(n.innerHTML="",r.value="",n.disabled=!0),n.addEventListener("input",(function(){"other_unit"==n.value?(r.disabled=!1,r.required=!0):(r.value="",r.disabled=!0,r.required=!1)}))):(n.innerHTML="",r.value="",n.disabled=!0,r.disabled=!0,r.required=!1),this.update_units()},e.prototype.update_method_options=function(e,t){var n=this,r=document.getElementById("substance-event-method"),i=document.getElementById("substance-event-method-other");if(t){var s=[];this._substances_used[e].forEach((function(e){s.push({value:e.label,label:e.label})})),this.update_sub_options(s,r)}this.update_unit_options(e,r.value),this.update_type_options(e,r.value),r.value.includes("Other")?(i.disabled=!1,i.required=!0,this._modal_sub_event.setElementClass({"#substance-method-other":["is-hidden",!1]})):(i.disabled=!0,i.required=!1,this._modal_sub_event.setElementClass({"#substance-method-other":["is-hidden",!0]})),r.addEventListener("input",(function(){n.update_method_options(e,!1)}))},e.prototype.substance_event_options=function(){var e=this,t=document.getElementById("substance-event-category"),n=[];Object.keys(this._substances_used).forEach((function(t){var r=e._substance_list.category.find((function(e){return e.id===t.toString()}));n.push({value:r.id,label:r.label})})),this.update_sub_options(n,t),this.update_method_options(t.value,!0),t.addEventListener("input",(function(){e.update_method_options(t.value,!0)})),document.getElementById("substance-event-amount-unknown").addEventListener("input",(function(){e.update_amount()})),document.getElementById("substance-event-units-unknown").addEventListener("input",(function(){e.update_units()}))},e.prototype.get_substance_event_properties=function(e){var t="unknown"===e.get("substance-event-amount-unknown")?"unknown":Number(e.get("substance-event-amount")),n="unknown"===e.get("substance-event-units-unknown")?"unknown":e.get("substance-event-units");return{category:e.get("substance-event-category"),substance:this._substance_list.category.find((function(t){return t.id===e.get("substance-event-category")})).label,methodType:e.get("substance-event-type"),method:e.get("substance-event-method"),methodOther:e.get("substance-event-method-other"),times:Number(e.get("substance-event-occasions")),amount:t,units:n,unitsOther:e.get("substance-event-units-other"),note:e.get("substance-event-notes")}},e.prototype.click_date=function(e){var t=this;switch(console.log("Edit.click_date(): ".concat(e.dateStr)),this._mode){case"add-key":document.getElementById("add-key-event").innerText="Add to Timeline",this._modal_key_event.populateText({".subtitle":e.date.toDateString()}).open((function(n){t._event_list.add(new i.KeyEvent(e.dateStr,n.get("key-text")))}));break;case"add-su":var n=this._event_list.get_events().filter((function(e){return i.NoUseEvent.prototype.isPrototypeOf(e)})).map((function(e){return e.date}));this._notification.innerHTML="Click a date on the calendar to add a <b>substance use event</b>.",n.includes(e.dateStr)?this._notification.innerHTML="Please select a valid date for the substance event.":(this._notification.innerHTML="Click a date on the calendar to add a <b>substance use event</b>.",document.getElementById("add-substance-event").innerText="Add to Timeline",this.substance_event_options(),this.update_amount(),this._modal_sub_event.populateText({".subtitle":e.date.toDateString()}).open((function(n){var r=t.get_substance_event_properties(n);t._event_list.add(new i.UseEvent(e.dateStr,r))})));break;case"no-sub":this._event_list.add(new i.NoUseEvent(e.dateStr));case"copy":if(this._copy_buffer){var r=this._copy_buffer.clone();r.set_date(e.dateStr).set_gid(this._copy_buffer.gid),this._event_list.add(r,!1)}}},e.prototype.select_range=function(e){var t=this;console.log("Edit.select_range(): ".concat(e.startStr," to ").concat(e.endStr));var n=new Date(e.endStr);n.setDate(e.end.getDate()-2);var r=n.toISOString().substring(0,10);switch(this._mode){case"add-key":this._modal_key_event.populateText({".subtitle":"".concat(e.start.toDateString()," to ").concat(n.toDateString())}).open((function(n){var s=new i.KeyEvent(e.startStr,n.get("key-text"));t._event_list.import_events(s.make_recurrence([1,2,3,4,5,6,7],r))}));break;case"no-sub":var s=new i.NoUseEvent(e.startStr);this._event_list.import_events(s.make_recurrence([1,2,3,4,5,6,7],r))}},e.prototype.click_event=function(e){var t=this;switch(console.log("Edit.click_event(): ".concat(e.event.title," (event ").concat(e.event.id," / group ").concat(e.event.groupId,")")),this._mode){case"copy":this._copy_buffer=this._event_list.get_event(Number(e.event.id)),this._notification.innerHTML="Click any date to paste the event called <b>".concat(this._copy_buffer.title,"</b>.");break;case"delete":this.delete_event(Number(e.event.id));break;default:var n=this._event_list.get_event(Number(e.event.id));if(i.KeyEvent.prototype.isPrototypeOf(n)){var r={"key-text":n.title};this._modal_key_event.populateForm(r),document.getElementById("add-key-event").innerText="Update",this._modal_key_event.populateText({".subtitle":n.date}).open((function(n){t._event_list.get_event_group(Number(e.event.groupId)).forEach((function(e){e.set_properties({title:n.get("key-text")})})),e.event.setProp("title",n.get("key-text")),sessionStorage.setItem("eventsList",JSON.stringify(t._event_list.get_events()))}))}else if(i.UseEvent.prototype.isPrototypeOf(n)){var s={"substance-event-units-other":n.properties.unitsOther,"substance-event-occasions":n.properties.times.toString(),"substance-event-notes":n.properties.note,"substance-event-type":n.properties.methodType};"unknown"===n.properties.amount?document.getElementById("substance-event-amount-unknown").checked=!0:s["substance-event-amount"]=n.properties.amount.toString(),"unknown"===n.properties.units?document.getElementById("substance-event-units-unknown").checked=!0:s["substance-event-units"]=n.properties.units,this.substance_event_options(),this._modal_sub_event.populateForm({"substance-event-category":n.properties.category}),this.update_method_options(n.properties.category,!0),this._modal_sub_event.populateForm({"substance-event-method-other":n.properties.methodOther,"substance-event-method":n.properties.method}),this.update_method_options(n.properties.category,!1),this.update_type_options(n.properties.category,n.properties.method),this.update_unit_options(n.properties.category,n.properties.method),this.update_amount(),this._modal_sub_event.populateForm(s);var o=document.getElementById("substance-event-units"),a=document.getElementById("substance-event-units-other");"other_unit"==o.value&&(a.disabled=!1,a.required=!0),document.getElementById("add-substance-event").innerText="Update",this._modal_sub_event.populateText({".subtitle":n.date}).open((function(n){var r=t.get_substance_event_properties(n);t._event_list.get_event_group(Number(e.event.groupId)).forEach((function(e){e.set_properties(r)})),e.event.setProp("title",t._event_list.get_event(Number(e.event.id)).title),sessionStorage.setItem("eventsList",JSON.stringify(t._event_list.get_events()))}))}}},e.prototype.delete_event=function(e){var t=this,n=this._event_list.get_event(e),r=this._event_list.get_event_siblings(e).length;r>0?this._modal_confirm.populateText({".modal-card-title":"Confirm Deletion of Multiple Events",".content":"<p>The event on <b>".concat(n.date,"</b> titled <i>").concat(n.title,"</i> is related to <b>").concat(r,"</b> other events.</p>")+"<p>Confirm whether you want to delete <u>just this event</u>, or <u>all</u> of the events in the group.</p>"}).setElementClass({"#delete-all-button":["is-hidden",!1]}).open((function(r){r.forEach((function(e,t){return console.log("".concat(e," ").concat(t))})),"single"==r.get("action")?t._event_list.delete_event(e):"multiple"==r.get("action")&&t._event_list.delete_group(n.gid)})):this._modal_confirm.populateText({".modal-card-title":"Confirm Event Deletion",".content":"<p>Confirm that you want to delete the event on <b>".concat(n.date,"</b> titled <i>").concat(n.title,"</i>.</p>")}).setElementClass({"#delete-all-button":["is-hidden",!0]}).open((function(){t._event_list.delete_event(e)}))},e.prototype.get_event_list=function(){return this._event_list},e.prototype.update_substances_used=function(e){this._substances_used=e},e}();t.Editor=s},364:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.File=void 0;var o=n(799),a=n(519),l=n(367),c=s(n(603)),d=n(601),u=function(){function e(e,t,r){var i=this;if(this._current_properties=e,this._calendar=t,this._modal_substances=new o.Modal("modal-select-substances"),this._modal_properties=new o.Modal("modal-update-properties"),this._modal_summary=new o.Modal("modal-get-summary"),this._modal_import_json=new o.Modal("modal-import-json"),this._modal_import_csv=new o.Modal("modal-import-csv"),this._modal_confirm_import=new o.Modal("modal-confirm-export"),this._substance_list=n(684),this._editor=r,null===sessionStorage.getItem("substancesUsed")?this._substances_used={}:(this._substances_used=JSON.parse(sessionStorage.getItem("substancesUsed")),this._editor.update_substances_used(this._substances_used)),null!=sessionStorage.getItem("eventsList")){var s=JSON.parse(sessionStorage.getItem("eventsList"));s.forEach((function(e){e._date=e._date._date})),this.deserialize_events_json(s)}document.querySelectorAll(".tlfb-file-mode").forEach((function(e){return e.addEventListener("click",(function(e){return i.mode(e)}))}))}return e.prototype.mode=function(e){var t=e.target.id;switch(t){case"mode-button-file-properties":document.getElementById("properties-warn").innerText="",this.change_properties();break;case"mode-button-edit-list":this.select_substance();break;case"mode-button-summarize":this.summarize();break;case"mode-button-import-json":this.import_json();break;case"mode-button-import-csv":this.import_csv();break;case"mode-button-export-json":this.export_json();break;case"mode-button-export-csv":this.export_csv()}console.log("Clicked: ".concat(t))},e.prototype.change_properties=function(){var e=this;this._modal_properties.populateForm({"project-name":this._current_properties.pid,"cam-id":this._current_properties.subject,"record-id":this._current_properties.record,"tlfb-event":this._current_properties.timepoint,"tlfb-start":this._current_properties.start,"tlfb-end":this._current_properties.end,"tlfb-keyfield":this._current_properties.keyfield,"tlfb-staff":this._current_properties.staff}),this._modal_properties.open((function(t){var n={subject:t.get("cam-identifier").toString(),record:t.get("record-identifier").toString(),pid:t.get("project-name").toString(),timepoint:t.get("tlfb-event").toString(),start:t.get("tlfb-start").toString(),end:t.get("tlfb-end").toString(),keyfield:t.get("tlfb-keyfield").toString(),staff:t.get("tlfb-staff").toString()};(0,a.update_properties)(e._current_properties,n),e._calendar.setOption("validRange",{start:e._current_properties.start,end:e._current_properties.end})}))},e.prototype.missing_properties_warn=function(e){var t="The following REDCap parameters were not recieved. Please manually fill them in: ";e.forEach((function(e){t=t+e+", "})),document.getElementById("properties-warn").innerText=t,this.change_properties()},e.prototype.get_deselected_substances=function(e,t){var n=[];return Object.keys(e).forEach((function(r){t.hasOwnProperty(r)?e[r].forEach((function(e){t[r].map((function(e){return e.label})).includes(e.label)||n.push(e.label)})):e[r].forEach((function(e){n.push(e.label)}))})),n},e.prototype.merge_selected_substances=function(e){var t=this;Object.keys(e).forEach((function(n){t._substances_used.hasOwnProperty(n)?e[n].forEach((function(e){var r=t._substance_list.substance[n].find((function(t){return t.label===e.label}));t._substances_used[n].map((function(e){return e.label})).includes(r.label)||t._substances_used[n].push(r)})):t._substances_used[n]=e[n]}))},e.prototype.select_substance=function(){var e=this;Object.keys(this._substances_used).forEach((function(t){e._substances_used[t].forEach((function(n){var r=e._substance_list.substance[t].findIndex((function(e){return e.label===n.label}));document.getElementById("".concat(r.toString()+t)).checked=!0}))})),this._modal_substances.populateText({".subtitle":this._current_properties.start+" to "+this._current_properties.end}).open((function(t){var n={};t.forEach((function(t){var r=t.toString().split(" "),i=e._substance_list.substance[r[1]][Number(r[0])];n.hasOwnProperty(r[1])?n[r[1]].push(i):n[r[1]]=[i]})),e.get_deselected_substances(e._substances_used,n).forEach((function(t){e._editor.get_event_list().delete_substance(t)})),e._substances_used=n,sessionStorage.setItem("substancesUsed",JSON.stringify(e._substances_used)),e._editor.update_substances_used(e._substances_used)}))},e.prototype.summarize=function(){var e=this,t=this._current_properties.days/7,n=(new Date).toISOString().split("T")[0],r=new l.CalendarDate(this._current_properties.start),i=new l.CalendarDate(this._current_properties.end),s=this._editor.get_event_list().get_events().filter((function(e){return(e.date_object.isAfter(r)||e.date_object.isSameDay(r))&&e.date_object.isBefore(i)&&l.UseEvent.prototype.isPrototypeOf(e)})),o=c.calc_days_used(s,"etoh"),a=c.calc_days_used(s,"cn"),d=c.calc_days_used(s,"nic"),u=c.calc_days_used_amount(s,"etoh");document.getElementById("tlfb_etoh_total_days").innerText=String(o),document.getElementById("tlfb_mj_total_days").innerText=String(a),document.getElementById("tlfb_nic_total_days").innerText=String(d);var h=c.calc_total_units(s,"Alcohol","standard drinks");document.getElementById("tlfb_etoh_total_units").innerHTML=o!=u?String(h)+"+":String(h);var f=c.calc_total_occasions(s,"cn"),p=c.calc_total_occasions(s,"nic");document.getElementById("tlfb_mj_total_units").innerHTML=String(f),document.getElementById("tlfb_nic_total_units").innerHTML=String(p),document.getElementById("tlfb_etoh_avg_unitsday").innerHTML=String((+h/+u).toFixed(3)),document.getElementById("tlfb_mj_avg_unitsday").innerHTML=String((+f/+a).toFixed(3)),document.getElementById("tlfb_nic_avg_unitsday").innerHTML=String((+p/+d).toFixed(3)),document.getElementById("tlfb_etoh_avg_units").innerHTML=String((+h/t).toFixed(3)),document.getElementById("tlfb_mj_avg_units").innerHTML=String((+f/t).toFixed(3)),document.getElementById("tlfb_nic_avg_units").innerHTML=String((+p/t).toFixed(3)),document.getElementById("tlfb_etoh_avg_days").innerHTML=String((+o/this._current_properties.days*7).toFixed(3)),document.getElementById("tlfb_mj_avg_days").innerHTML=String((+a/this._current_properties.days*7).toFixed(3)),document.getElementById("tlfb_nic_avg_days").innerHTML=String((+d/this._current_properties.days*7).toFixed(3)),document.getElementById("tlfb_etoh_last_use").innerHTML=String(c.calc_days_since_last_use(s,"etoh",n)),document.getElementById("tlfb_mj_last_use").innerHTML=String(c.calc_days_since_last_use(s,"cn",n)),document.getElementById("tlfb_nic_last_use").innerHTML=String(c.calc_days_since_last_use(s,"nic",n)),this._modal_summary.open((function(){e._modal_confirm_import.open((function(t){"json"===t.get("select-export-method")?e.export_json():"csv"===t.get("select-export-method")&&e.export_csv()}))}))},e.prototype.deserialize_events_json=function(e){var t=this,n=e.reduce((function(e,t){return e[String(t._gid)]?e[String(t._gid)].push(t):e[String(t._gid)]=[t],e}),{});Object.keys(n).forEach((function(e){var r=[];n[e].forEach((function(e){var t=e._date.split("T")[0];if("no-use"===e._type)r.push(new l.NoUseEvent(t));else if("key"===e._type)r.push(new l.KeyEvent(t,e._title));else if("use"===e._type){var n={category:e._category,substance:e._substance,methodType:e._methodType,method:e._method,methodOther:e._methodOther,times:Number(e._times),amount:"unknown"===e._amount?e._amount:Number(e._amount),units:e._units,unitsOther:e._unitsOther,note:e._note};r.push(new l.UseEvent(t,n))}})),t._editor.get_event_list().import_events(r,!0)}))},e.prototype.deserialize_events_csv=function(e){var t=this,n=e.reduce((function(e,t){return e[String(t[4])]?e[String(t[4])].push(t):e[String(t[4])]=[t],e}),{});Object.keys(n).forEach((function(e){var r=[];n[e].forEach((function(e){var t=e[1].split("T")[0];if("no-use"===e[2])r.push(new l.NoUseEvent(t));else if("key"===e[2])r.push(new l.KeyEvent(t,e[5]));else if("use"===e[2]){var n={category:e[6],substance:e[7],methodType:e[8],method:e[9],methodOther:e[10],times:Number(e[11]),amount:"unknown"===e[12]?e[12]:Number(e[12]),units:e[13],unitsOther:e[14],note:e[15]};r.push(new l.UseEvent(t,n))}})),t._editor.get_event_list().import_events(r,!0)}))},e.prototype.valid_JSON=function(e){try{if(["subject","event","pid","start","end","staff","record","keyfield","datetime"].forEach((function(t){if(!e.hasOwnProperty(t))throw new Error;if(null!=e[t]&&"string"!=typeof e[t])throw new Error})),0===e.events.length)return!0;e.events.forEach((function(e){if("object"!=typeof e)throw new Error}));var t=["category","substance","occasions","amount","units","notes"],n=["_category","_substance","_methodType","_method","_methodOther","_times","_amount","_units","_unitsOther","_note"];return e.events[0].hasOwnProperty("title")?(e.events.forEach((function(e){if("string"!=typeof e.title||"string"!=typeof e.type||"string"!=typeof e.start)throw new Error;if(e.hasOwnProperty("end")&&"string"!=typeof e.end)throw new Error;"substance-event"===e.type&&t.forEach((function(t){if("string"!=typeof e[t])throw new Error}))})),!0):(e.events.forEach((function(e){if("number"!=typeof e._eid||"number"!=typeof e._gid)throw new Error;if("string"!=typeof e._title||"string"!=typeof e._type||"string"!=typeof e._date)throw new Error;"use"===e._type&&n.forEach((function(t){if("_times"===t){if("number"!=typeof e[t])throw new Error}else if("_amount"===t){if("number"!=typeof e[t]&&"unknown"!=e[t])throw new Error}else if("_unitsOther"===t||"_methodOther"===t||"_methodType"===t||"_units"===t){if(null!=e[t]&&"string"!=typeof e[t])throw new Error}else if("string"!=typeof e[t])throw new Error}))})),!0)}catch(e){return!1}},e.prototype.valid_CSV=function(e){return JSON.stringify(e[0])==JSON.stringify(["Subject","Event","pID","Start","End","Staff","Record","Keyfield","Datetime","AppVersion","","","","","",""])&&JSON.stringify(e[2])==JSON.stringify(["","","","","","","","","","","","","","","",""])&&JSON.stringify(e[3])==JSON.stringify(["Event","Date","Type","eID","gID","Title","Category","Substance","MethodType","Method","MethodOther","Times","Amount","Units","UnitsOther","Note"])},e.prototype.import_json=function(){var e=this,t={},n=[],r={},i=this,s=document.getElementById("upload-out-subject"),o=document.getElementById("upload-out-event"),l=document.getElementById("upload-out-start"),c=document.getElementById("upload-out-end"),d=document.getElementById("upload-out-events"),u=document.getElementById("upload-out-earliest"),h=document.getElementById("upload-out-latest"),f=document.getElementById("upload-out-substances"),p=document.getElementById("filename-upload-json"),g=document.getElementById("json-warn"),m=[s,o,l,c,d,u,h,f,p,g];this.reset_modal_text(m),p.innerText="*.json",document.getElementById("upload-data-json").addEventListener("change",(function(a){e.reset_modal_text(m),p.innerText=a.target.files[0].name;var v=new FileReader;v.onload=function(e){var a=JSON.parse(e.target.result);if(!i.valid_JSON(a))return i._modal_import_json.reset(),void(g.innerText="The selected json file does not contain data in an accepted format.");if(t={subject:a.subject,record:a.record,pid:a.pid,timepoint:a.event,start:a.start,end:a.end,keyfield:a.keyfield,staff:a.staff},0!==(n=a.events).length&&a.events[0].hasOwnProperty("title")){var p=[],m=0,v=0;n.forEach((function(e){var t=[e.start];if(e.hasOwnProperty("end"))for(var n=new Date(e.start);n.toISOString().split("T")[0]!=e.end;)n.setDate(n.getDate()+1),t.push(n.toISOString().split("T")[0]);t.forEach((function(t){var n={_title:e.title,_date:t,_eid:m,_gid:v};if(m++,"key-event"===e.type)n._type="key",p.push(n);else if("substance-event"===e.type){var r="mj"===e.category?"cn":e.category,s=i._substance_list.substance[r].find((function(t){return t.label.toLowerCase()===e.substance.toLowerCase()}));if(n._type="use",n._category=r,n._substance=i._substance_list.category.find((function(e){return e.id===r})).label,n._times=e.occasions,n._amount=Number(e.occasions)*Number(e.amount),n._units=e.units,n._unitsOther=null,n._note=e.notes,null!=s)n._method=s.label,n._methodType=s.hasOwnProperty("type")?"unknown":null,n._methodOther=null;else{var o=i._substance_list.substance[r].slice(-1)[0];n._method=o.label,n._methodOther=e.substance,n._methodType=null,n._unitsOther=e.units}p.push(n)}})),v++})),n=p}if(s.classList.remove("has-text-danger"),s.innerText=a.subject,a.subject!=i._current_properties.subject&&s.classList.add("has-text-danger"),o.classList.remove("has-text-danger"),o.innerText=a.event,a.event!=i._current_properties.timepoint&&o.classList.add("has-text-danger"),l.classList.remove("has-text-danger"),l.innerText=a.start,a.start!=i._current_properties.start&&l.classList.add("has-text-danger"),c.classList.remove("has-text-danger"),c.innerText=a.end,a.end!=i._current_properties.end&&c.classList.add("has-text-danger"),d.innerText=String(a.events.length),a.events.length>0){var y=a.events.reduce((function(e,t){var n=new Date(t._date);return n<e?n:e}),new Date(n[0]._date));u.innerText=y.toISOString().split("T")[0];var _=a.events.reduce((function(e,t){var n=new Date(t._date);return n>e?n:e}),new Date(n[0]._date));h.innerText=_.toISOString().split("T")[0]}else u.innerText="-",h.innerText="-";var b="";n.forEach((function(e){if("use"===e._type){e._category="mj"===e._category?"cn":e._category;var t=i._substance_list.substance[e._category].find((function(t){return t.label===e._method}));r.hasOwnProperty(e._category)&&!r[e._category].includes(t)?r[e._category].push(t):r[e._category]=[t],b.includes(e._method)||(b=b+e._method+", ")}})),f.innerText=b},v.readAsText(a.target.files[0])})),this._modal_import_json.open((function(){(0,a.update_properties)(e._current_properties,t);var i=Object.keys(t).filter((function(e){return null===t[e]}));i.length&&e.missing_properties_warn(i),e._calendar.setOption("validRange",{start:e._current_properties.start,end:e._current_properties.end}),e.merge_selected_substances(r),e._editor.update_substances_used(e._substances_used),sessionStorage.setItem("substancesUsed",JSON.stringify(e._substances_used)),e.deserialize_events_json(n)}))},e.prototype.import_csv=function(){var e=this,t={},n=[],r={},i=this,s=document.getElementById("upload-csv-subject"),o=document.getElementById("upload-csv-event"),l=document.getElementById("upload-csv-start"),c=document.getElementById("upload-csv-end"),d=document.getElementById("upload-csv-events"),u=document.getElementById("upload-csv-earliest"),h=document.getElementById("upload-csv-latest"),f=document.getElementById("upload-csv-substances"),p=document.getElementById("filename-upload-csv"),g=document.getElementById("csv-warn"),m=[s,o,l,c,d,u,h,f,p,g];this.reset_modal_text(m),p.innerText="*.csv",document.getElementById("upload-data-csv").addEventListener("change",(function(a){g.innerText="",e.reset_modal_text(m),p.innerText=a.target.files[0].name;var v=new FileReader;v.onload=function(e){var a=e.target.result,p=[];if(a.split("\n").forEach((function(e){p.push(e.split(","))})),!i.valid_CSV(p))return i._modal_import_csv.reset(),void(g.innerText="The selected csv file does not contain data in an accepted format.");var m=p[1];if(n=p.length>4?p.slice(4,-1):[],t={subject:m[0],record:m[6],pid:m[2],timepoint:m[1],start:m[3],end:m[4],keyfield:m[7],staff:m[5]},s.classList.remove("has-text-danger"),s.innerText=m[0],m[0]!=i._current_properties.subject&&s.classList.add("has-text-danger"),o.classList.remove("has-text-danger"),o.innerText=m[1],m[1]!=i._current_properties.timepoint&&o.classList.add("has-text-danger"),l.classList.remove("has-text-danger"),l.innerText=m[3],m[3]!=i._current_properties.start&&l.classList.add("has-text-danger"),c.classList.remove("has-text-danger"),c.innerText=m[4],m[4]!=i._current_properties.end&&c.classList.add("has-text-danger"),d.innerText=String(n.length),n.length>0){var v=n.reduce((function(e,t){var n=new Date(t[1]);return n<e?n:e}),new Date(n[0][1]));u.innerText=v.toISOString().split("T")[0];var y=n.reduce((function(e,t){var n=new Date(t[1]);return n>e?n:e}),new Date(n[0][1]));h.innerText=y.toISOString().split("T")[0]}else u.innerText="-",h.innerText="-";var _="";n.forEach((function(e){if("use"===e[2]){var t=e[9].includes(".")?e[9].replace(".",","):e[9],n=i._substance_list.substance[e[6]].find((function(e){return e.label===t}));r.hasOwnProperty(e[6])&&!r[e[6]].includes(n)?r[e[6]].push(n):r[e[6]]=[n],_.includes(e[9])||(_=_+e[9]+", ")}})),f.innerText=_},v.readAsText(a.target.files[0])})),this._modal_import_csv.open((function(){(0,a.update_properties)(e._current_properties,t);var i=Object.keys(t).filter((function(e){return null===t[e]}));i.length&&e.missing_properties_warn(i),e._calendar.setOption("validRange",{start:e._current_properties.start,end:e._current_properties.end}),e.merge_selected_substances(r),e._editor.update_substances_used(e._substances_used),sessionStorage.setItem("substancesUsed",JSON.stringify(e._substances_used)),e.deserialize_events_csv(n)}))},e.prototype.export_json=function(){var e="TLFB-"+this._current_properties.pid+"-"+this._current_properties.subject+"-"+this._current_properties.start+"-"+this._current_properties.end+".json",t={subject:this._current_properties.subject,event:this._current_properties.timepoint,pid:this._current_properties.pid,start:this._current_properties.start,end:this._current_properties.end,staff:this._current_properties.staff,record:this._current_properties.record,keyfield:this._current_properties.keyfield,datetime:new Date,appversion:d.VERSION,events:this._editor.get_event_list().serialize_events("json")},n=JSON.stringify(t),r=new Blob([n],{type:"application/json"}),i=URL.createObjectURL(r),s=document.createElement("a");s.href=i,s.download=e,s.click(),URL.revokeObjectURL(i)},e.prototype.export_csv=function(){var e="TLFB-"+this._current_properties.pid+"-"+this._current_properties.subject+"-"+this._current_properties.start+"-"+this._current_properties.end+".csv",t=[["Subject","Event","pID","Start","End","Staff","Record","Keyfield","Datetime","AppVersion","","","","","",""],[this._current_properties.subject,this._current_properties.timepoint,this._current_properties.pid,this._current_properties.start,this._current_properties.end,this._current_properties.staff,this._current_properties.record,this._current_properties.keyfield,(new Date).toISOString(),d.VERSION,"","","","","","",""],["","","","","","","","","","","","","","","",""]],n=this._editor.get_event_list().serialize_events("csv"),r=t.concat(n),i="";r.forEach((function(e){i=i+e.join(",")+"\n"}));var s=new Blob([i],{type:"text/csv"}),o=URL.createObjectURL(s),a=document.createElement("a");a.href=o,a.download=e,a.click(),URL.revokeObjectURL(o)},e.prototype.reset_modal_text=function(e){e.forEach((function(e){e.innerText=""}))},e}();t.File=u},519:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.update_properties=void 0;var a=n(553),l=o(n(610)),c=o(n(790)),d=n(384),u=n(364),h=s(n(882)),f=n(601);function p(){for(var e=new URLSearchParams(window.location.search),t={},n=[],r=0,i=[{name:"record",to:"record",validator:f.RGX_INTEGER},{name:"pid",to:"pid",validator:f.RGX_INTEGER},{name:"event",to:"timepoint",validator:f.RGX_WORD},{name:"subject",to:"subject",validator:f.RGX_WORD},{name:"start",to:"start",validator:f.RGX_DATE},{name:"end",to:"end",validator:f.RGX_DATE},{name:"keyfield",to:"keyfield",validator:f.RGX_WORD},{name:"staff",to:"staff",validator:f.RGX_WORD}];r<i.length;r++){var s=i[r];e.has(s.name)?""===e.get(s.name)?n.push(s.name):s.validator.test(e.get(s.name))?t[s.to]=e.get(s.name):alert("".concat(s.name," misspecified in the URL query.")):n.push(s.name)}return!(t.record||t.pid||t.timepoint)||t.record&&t.pid&&t.timepoint||alert("Some but not all REDCap parameters received. REDCap may be misconfigured."),[t,n]}function g(e,t){Object.assign(e,t);var n=(new Date(e.end).valueOf()-new Date(e.start).valueOf())/f.CVT_MS_DAY;e.days=n,h.set_inner("calendar-file-title","".concat(e.pid," | ").concat(e.subject," / ").concat(e.record," at ").concat(e.timepoint)),h.set_inner("calendar-file-subtitle","".concat(e.start," to ").concat(e.end," (").concat(n," Days)"));var r=new URLSearchParams(window.location.search);[{name:"record",to:"record"},{name:"pid",to:"pid"},{name:"event",to:"timepoint"},{name:"subject",to:"subject"},{name:"start",to:"start"},{name:"end",to:"end"},{name:"keyfield",to:"keyfield"},{name:"staff",to:"staff"}].forEach((function(e){r.set(e.name,t[e.to])}));var i=window.location.href.split("?")[0];history.replaceState(i,document.title,"?"+r.toString())}t.update_properties=g,document.addEventListener("DOMContentLoaded",(function(){var e={subject:"",record:"",timepoint:"",pid:"",start:"",end:"",keyfield:"",staff:"",days:0},t=p()[0],r=p()[1];g(e,t);var i=document.getElementById("calendar"),s=new a.Calendar(i,{plugins:[c.default,l.default],initialView:"dayGridMonth",validRange:{start:e.start,end:e.end},headerToolbar:{left:"title",right:"prev,next"},editable:!1,selectable:!0,showNonCurrentDates:!1,fixedWeekCount:!0,height:window.innerHeight-f.CAL_HEIGHT_DIFF});s.render(),h.set_inner("application-version-title","Timeline-Followback v".concat(f.VERSION));var o=new d.Editor(s),m=new u.File(e,s,o);r.length>0&&m.missing_properties_warn(r);var v=n(684),y=document.getElementById("substance-form");v.category.forEach((function(e){y.insertAdjacentHTML("beforeend",'<h5 class="pt-5">'.concat(e.label,"</h5>")),v.substance[e.id].forEach((function(t,n){y.insertAdjacentHTML("beforeend",'<input class="substance-list" type="checkbox" id="'.concat(n.toString()+e.id,'" name="').concat(n.toString()+e.id,'" \n                value="').concat(n.toString()," ").concat(e.id,'">\n                <label for="').concat(n.toString()+e.id,'">').concat(t.label,"</label><br>"))}))})),window.addEventListener("resize",(function(){s.setOption("height",window.innerHeight-f.CAL_HEIGHT_DIFF)}))}))},799:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Modal=void 0;var n=function(){function e(e){var t,n=this;this._onsubmit=null;var r=document.getElementById(e);if(null==r)throw Error("Modal(): Could not locate DOM element '#".concat(e,"'."));if(!r.classList.contains("modal"))throw Error("Modal(): '#".concat(e,"' is not of class 'modal'."));this._element=r,this._form=this._element.querySelector("form"),this._element.querySelectorAll(".modal-close, .cancel-operation").forEach((function(e){return e.addEventListener("click",(function(){return n.close()}))})),null===(t=this._form)||void 0===t||t.addEventListener("submit",(function(e){e.preventDefault(),n.submit(e)}))}return e.prototype.reset=function(){var e;console.log("Modal.reset(): ".concat(this._element.id)),null===(e=this._form)||void 0===e||e.reset()},e.prototype.submit=function(e){if(console.log("Modal.submit(): ".concat(this._element.id)),!this._form)throw Error("Modal.submit(): Cannot submit modal with no descendant form ".concat(this._element.id,"."));if(!this._onsubmit)throw Error("Modal.submit(): Form submitted but no handler specified.");var t=this.getFormData(),n=e.submitter.value;return n&&t.append("action",n),this._onsubmit(t),this.close()},e.prototype.populateForm=function(e){if(console.log("Modal.populateForm(): ".concat(this._element.id)),!this._form)throw Error("Modal.populateForm(): Cannot populate modal with no descendant form ".concat(this._element.id,"."));for(var t in e){if(!this._form.elements.namedItem(t))throw Error("Modal.populateForm(): Named element '".concat(t,"' not found in form."));this._form.elements.namedItem(t).value=e[t]}return this},e.prototype.populateText=function(e){for(var t in console.log("Modal.populateText(): ".concat(this._element.id)),e){var n=this._element.querySelector(t);if(!n)throw Error("Modal.populateText(): Element not found for '".concat(t,"'."));n.innerHTML=e[t]}return this},e.prototype.setElementClass=function(e){for(var t in console.log("Modal.addElementClass(): ".concat(this._element.id)),e){var n=this._element.querySelector(t);if(!n)throw Error("Modal.addElementClass(): Element not found for '".concat(t,"'."));e[t][1]?n.classList.add(e[t][0]):n.classList.remove(e[t][0])}return this},e.prototype.getFormData=function(){if(console.log("Modal.getFormData(): ".concat(this._element.id)),!this._form)throw Error("Modal.getFormData(): Cannot get form data for modal with no descendant form ".concat(this._element.id,"."));return new FormData(this._form)},e.prototype.open=function(e){return void 0===e&&(e=null),console.log("Modal.open(): ".concat(this._element.id)),this._onsubmit=e,this._element.classList.add("is-active"),this},e.prototype.close=function(){return console.log("Modal.close(): ".concat(this._element.id)),this._element.classList.remove("is-active"),this.reset(),this},e}();t.Modal=n},367:function(e,t,n){var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarEventList=t.NoUseEvent=t.UseEvent=t.KeyEvent=t.CalendarEvent=t.CalendarDate=void 0;var s=n(601),o=function(){function e(e){if(!/^\d{4}-\d{2}-\d{2}$/.test(e))throw new Error("CalendarDate expects a date in 'YYYY-MM-DD' format.");if(this._date=new Date(e),isNaN(this._date.valueOf()))throw new Error("CalanderDate received an invalid date.")}return Object.defineProperty(e.prototype,"Date",{get:function(){return this._date},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"weekday",{get:function(){return this._date.getUTCDay()+1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"day",{get:function(){return this._date.getUTCDate()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"month",{get:function(){return this._date.getUTCMonth()+1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"year",{get:function(){return this._date.getUTCFullYear()},enumerable:!1,configurable:!0}),e.prototype.toString=function(){return this._date.toISOString().substring(0,10)},e.prototype.set_day=function(e){return this._date.setUTCDate(e),this},e.prototype.isSameDay=function(e){return this.year==e.year&&this.month==e.month&&this.day==e.day},e.prototype.isAfter=function(e){return this.year==e.year&&this.month==e.month&&this.day>e.day||this.year==e.year&&this.month>e.month||this.year>e.year},e.prototype.isBefore=function(e){return this.year==e.year&&this.month==e.month&&this.day<e.day||this.year==e.year&&this.month<e.month||this.year<e.year},Object.defineProperty(e.prototype,"next_day",{get:function(){return new e(this.toString()).set_day(this.day+1)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previous_day",{get:function(){return new e(this.toString()).set_day(this.day-1)},enumerable:!1,configurable:!0}),e}();t.CalendarDate=o;var a=function(){function e(e,t){this._eid=0,this._gid=0,this._title="Uninitialized CalendarEvent",this._date=new o(e),this._type=t}return Object.defineProperty(e.prototype,"eid",{get:function(){return this._eid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"gid",{get:function(){return this._gid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"date",{get:function(){return this._date.toString()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"date_object",{get:function(){return this._date},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"title",{get:function(){return this._title},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),e.prototype.set_eid=function(e){return this._eid=e,this},e.prototype.set_gid=function(e){return this._gid=e,this},e.prototype.set_date=function(e){return this._date=e instanceof o?e:new o(e),this},e.prototype.make_recurrence=function(e,t){for(var n=[],r=this._date;!r.isAfter(new o(t));r=r.next_day)e.includes(r.weekday)&&n.push(this.clone().set_gid(this.gid).set_eid(this.eid).set_date(r));return n},e}();t.CalendarEvent=a;var l=function(e){function t(t,n){var r=e.call(this,t,"key")||this;return r._title=n,r}return i(t,e),t.prototype.clone=function(){return new t(this.date,this._title)},t.prototype.set_properties=function(e){return this._title=e.title,this},Object.defineProperty(t.prototype,"colors",{get:function(){return[s.COLOR_ORANGE,s.COLOR_TEXT]},enumerable:!1,configurable:!0}),t}(a);t.KeyEvent=l;var c=function(e){function t(t,n){var r=e.call(this,t,"use")||this;return r._category="",r._substance="",r._methodType="",r._method="",r._methodOther="",r._times=0,r._amount=0,r._units="",r._unitsOther="",r._note="",null!=n&&r.set_properties(n),r}return i(t,e),t.prototype.clone=function(){return new t(this.date,this.properties)},Object.defineProperty(t.prototype,"colors",{get:function(){return[s.COLOR_PURPLE,s.COLOR_WHITE]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"properties",{get:function(){return{category:this._category,substance:this._substance,methodType:this._methodType,method:this._method,methodOther:this._methodOther,times:this._times,amount:this._amount,units:this._units,unitsOther:this._unitsOther,note:this._note}},enumerable:!1,configurable:!0}),t.prototype.set_properties=function(e){return this._category=e.category,this._substance=e.substance,this._methodType=e.methodType,this._method=e.method,this._methodOther=e.methodOther,this._times=e.times,this._amount=e.amount,this._units=e.units,this._unitsOther=e.unitsOther,this._note=e.note,this.update_title(),this},t.prototype.update_title=function(){var e=this._units;null!=this._unitsOther&&""!=this._unitsOther?e=this._unitsOther:null==this._units&&(e=""),this._title=this._method+" "+this._times+"x | "+this._amount+" "+e},t}(a);t.UseEvent=c;var d=function(e){function t(t){var n=e.call(this,t,"no-use")||this;return n._title="No substances used",n}return i(t,e),t.prototype.clone=function(){return new t(this.date)},Object.defineProperty(t.prototype,"colors",{get:function(){return[s.COLOR_YELLOW,s.COLOR_TEXT]},enumerable:!1,configurable:!0}),t}(a);t.NoUseEvent=d;var u=function(){function e(e,t,n,r){void 0===r&&(r=null),this._next_eid=1,this._next_gid=1,this._events=[],this._fullcalendar=n,this.start_date=new o(e),this.end_date=new o(t),null!=r&&this.import_events(r)}return e.prototype._get_next_eid=function(){var e=this._next_eid;return this._next_eid++,e},e.prototype._get_next_gid=function(){var e=this._next_gid;return this._next_gid++,e},e.prototype.get_event=function(e){var t=this._events.find((function(t){return t.eid==e}));if(null==t)throw Error("CalendarEventList.get_event(): Could not find event ".concat(e,"."));return t},e.prototype.get_event_group=function(e){var t=this._events.filter((function(t){return t.gid==e}));if(t.length<1)throw Error("CalendarEventList.get_event_group(): Could not find events in group ".concat(e,"."));return t},e.prototype.get_event_siblings=function(e){var t=this.get_event(e);return this.get_event_group(t.gid).filter((function(t){return t.eid!=e}))},e.prototype.get_events=function(){return this._events},e.prototype.add=function(e,t){return void 0===t&&(t=!0),this.import_events([e],t),this},e.prototype.delete_event=function(e){var t;return this._events=this._events.filter((function(t){return t.eid!=e})),null===(t=this._fullcalendar.getEventById(e.toString()))||void 0===t||t.remove(),sessionStorage.setItem("eventsList",JSON.stringify(this.get_events())),this},e.prototype.delete_substance=function(e){var t=this,n=this._events.filter((function(t){return"use"===t.type&&t.properties.method===e}));return this._events=this._events.filter((function(t){return!("use"===t.type&&t.properties.method===e)})),n.forEach((function(e){t.delete_event(e.eid)})),sessionStorage.setItem("eventsList",JSON.stringify(this.get_events())),this},e.prototype.delete_group=function(e){return this._events=this._events.filter((function(t){return t.gid!=e})),this._fullcalendar.getEvents().forEach((function(t){t.groupId==e.toString()&&t.remove()})),sessionStorage.setItem("eventsList",JSON.stringify(this.get_events())),this},e.prototype.import_events=function(e,t){var n=this;void 0===t&&(t=!0);var r=e.filter((function(e){return d.prototype.isPrototypeOf(e)})),i=this.get_events().filter((function(e){return d.prototype.isPrototypeOf(e)||c.prototype.isPrototypeOf(e)})),s=(i=i.concat(e.filter((function(e){return c.prototype.isPrototypeOf(e)})))).map((function(e){return e.date})),o=e.filter((function(e){return c.prototype.isPrototypeOf(e)})),a=this.get_events().filter((function(e){return d.prototype.isPrototypeOf(e)})).map((function(e){return e.date}));r.forEach((function(t){if(s.includes(t.date)){var n=e.indexOf(t);e.splice(n,1)}})),o.forEach((function(t){if(a.includes(t.date)){var n=e.indexOf(t);e.splice(n,1)}}));var l=e.reduce((function(e,t){if(null==t.gid)throw new Error("Event is missing a GID and cannot be imported.");return e.has(t.gid)||e.set(t.gid,n._get_next_gid()),e}),new Map);return this._events=this._events.concat(e.map((function(e){var r=n._get_next_eid(),i=l.get(e.gid);return e.set_eid(r),t&&e.set_gid(i),n._fullcalendar.addEvent({id:e.eid.toString(),groupId:e.gid.toString(),start:e.date,title:e.title,textColor:e.colors[1],backgroundColor:e.colors[0],borderColor:e.colors[0]}),e}))),sessionStorage.setItem("eventsList",JSON.stringify(this.get_events())),this},e.prototype.serialize_events=function(e){switch(e){case"csv":var t=[["Event","Date","Type","eID","gID","Title","Category","Substance","MethodType","Method","MethodOther","Times","Amount","Units","UnitsOther","Note"]],n=0;return this.get_events().forEach((function(e){var r=[n+=1,e.date,e.type,e.eid,e.gid,e.title];if("use"===e.type){var i=e.properties;r.push(i.category),i.substance.includes(",")?r.push(i.substance.replace(",",".")):r.push(i.substance),r.push(i.methodType,i.method,i.methodOther,i.times,i.amount,i.units,i.unitsOther,i.note)}t.push(r)})),t;case"json":var r=JSON.stringify(this.get_events());return JSON.parse(r).map((function(e){return e._date=e._date._date,e}))}},e}();t.CalendarEventList=u},882:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.find_parent_modal=t.set_inner=void 0,t.set_inner=function(e,t){var n=document.getElementById(e);if(null==n)throw new Error("Failed to select element #".concat(e,"."));t instanceof NodeList?t.forEach((function(e){return n.appendChild(e)})):n.innerText=t},t.find_parent_modal=function(e){var t=e.closest(".modal");if(null==t)throw Error("find_parent_modal: No modal found in ancestry of ".concat(e,"."));return t}},553:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(873),i=n(400);n(748);const s=[],o={code:"en",week:{dow:0,doy:4},direction:"ltr",buttonText:{prev:"prev",next:"next",prevYear:"prev year",nextYear:"next year",year:"year",today:"today",month:"month",week:"week",day:"day",list:"list"},weekText:"W",weekTextLong:"Week",closeHint:"Close",timeHint:"Time",eventHint:"Event",allDayText:"all-day",moreLinkText:"more",noEventsText:"No events to display"},a=Object.assign(Object.assign({},o),{buttonHints:{prev:"Previous $0",next:"Next $0",today:(e,t)=>"day"===t?"Today":`This ${e}`},viewHint:"$0 view",navLinkHint:"Go to $0",moreLinkHint:e=>`Show ${e} more event${1===e?"":"s"}`});function l(e){let t=e.length>0?e[0].code:"en",n=s.concat(e),r={en:a};for(let e of n)r[e.code]=e;return{map:r,defaultCode:t}}function c(e,t){return"object"!=typeof e||Array.isArray(e)?function(e,t){let n=[].concat(e||[]),r=function(e,t){for(let n=0;n<e.length;n+=1){let r=e[n].toLocaleLowerCase().split("-");for(let e=r.length;e>0;e-=1){let n=r.slice(0,e).join("-");if(t[n])return t[n]}}return null}(n,t)||a;return d(e,n,r)}(e,t):d(e.code,[e.code],e)}function d(e,t,n){let i=r.mergeProps([o,n],["buttonText"]);delete i.code;let{week:s}=i;return delete i.week,{codeArg:e,codes:t,week:s,simpleNumberFormat:new Intl.NumberFormat(e),options:i}}function u(e){return{id:r.guid(),name:e.name,premiumReleaseDate:e.premiumReleaseDate?new Date(e.premiumReleaseDate):void 0,deps:e.deps||[],reducers:e.reducers||[],isLoadingFuncs:e.isLoadingFuncs||[],contextInit:[].concat(e.contextInit||[]),eventRefiners:e.eventRefiners||{},eventDefMemberAdders:e.eventDefMemberAdders||[],eventSourceRefiners:e.eventSourceRefiners||{},isDraggableTransformers:e.isDraggableTransformers||[],eventDragMutationMassagers:e.eventDragMutationMassagers||[],eventDefMutationAppliers:e.eventDefMutationAppliers||[],dateSelectionTransformers:e.dateSelectionTransformers||[],datePointTransforms:e.datePointTransforms||[],dateSpanTransforms:e.dateSpanTransforms||[],views:e.views||{},viewPropsTransformers:e.viewPropsTransformers||[],isPropsValid:e.isPropsValid||null,externalDefTransforms:e.externalDefTransforms||[],viewContainerAppends:e.viewContainerAppends||[],eventDropTransformers:e.eventDropTransformers||[],componentInteractions:e.componentInteractions||[],calendarInteractions:e.calendarInteractions||[],themeClasses:e.themeClasses||{},eventSourceDefs:e.eventSourceDefs||[],cmdFormatter:e.cmdFormatter,recurringTypes:e.recurringTypes||[],namedTimeZonedImpl:e.namedTimeZonedImpl,initialView:e.initialView||"",elementDraggingImpl:e.elementDraggingImpl,optionChangeHandlers:e.optionChangeHandlers||{},scrollGridImpl:e.scrollGridImpl||null,listenerRefiners:e.listenerRefiners||{},optionRefiners:e.optionRefiners||{},propSetHandlers:e.propSetHandlers||{}}}class h extends r.Theme{}function f(e,t,n,r){if(t[e])return t[e];let i=function(e,t,n,r){let i=n[e],s=r[e],o=e=>i&&null!==i[e]?i[e]:s&&null!==s[e]?s[e]:null,a=o("component"),l=o("superType"),c=null;if(l){if(l===e)throw new Error("Can't have a custom view type that references itself");c=f(l,t,n,r)}return!a&&c&&(a=c.component),a?{type:e,component:a,defaults:Object.assign(Object.assign({},c?c.defaults:{}),i?i.rawOptions:{}),overrides:Object.assign(Object.assign({},c?c.overrides:{}),s?s.rawOptions:{})}:null}(e,t,n,r);return i&&(t[e]=i),i}function p(e){return r.mapHash(e,g)}function g(e){let t="function"==typeof e?{component:e}:e,{component:n}=t;return t.content?n=m(t):!n||n.prototype instanceof r.BaseComponent||(n=m(Object.assign(Object.assign({},t),{content:n}))),{superType:t.type,component:n,rawOptions:t}}function m(e){return t=>i.createElement(r.ViewContextType.Consumer,null,(n=>i.createElement(r.ContentContainer,{elTag:"div",elClasses:r.buildViewClassNames(n.viewSpec),renderProps:Object.assign(Object.assign({},t),{nextDayThreshold:n.options.nextDayThreshold}),generatorName:void 0,customGenerator:e.content,classNameGenerator:e.classNames,didMount:e.didMount,willUnmount:e.willUnmount})))}function v(e,t,n,i){let s=p(e),o=p(t.views),a=function(e,t){let n,r={};for(n in e)f(n,r,e,t);for(n in t)f(n,r,e,t);return r}(s,o);return r.mapHash(a,(e=>function(e,t,n,i,s){let o=e.overrides.duration||e.defaults.duration||i.duration||n.duration,a=null,l="",c="",d={};if(o&&(a=function(e){let t=JSON.stringify(e),n=y[t];return void 0===n&&(n=r.createDuration(e),y[t]=n),n}(o),a)){let e=r.greatestDurationDenominator(a);l=e.unit,1===e.value&&(c=l,d=t[l]?t[l].rawOptions:{})}let u=t=>{let n=t.buttonText||{},r=e.defaults.buttonTextKey;return null!=r&&null!=n[r]?n[r]:null!=n[e.type]?n[e.type]:null!=n[c]?n[c]:null},h=t=>{let n=t.buttonHints||{},r=e.defaults.buttonTextKey;return null!=r&&null!=n[r]?n[r]:null!=n[e.type]?n[e.type]:null!=n[c]?n[c]:null};return{type:e.type,component:e.component,duration:a,durationUnit:l,singleUnit:c,optionDefaults:e.defaults,optionOverrides:Object.assign(Object.assign({},d),e.overrides),buttonTextOverride:u(i)||u(n)||e.overrides.buttonText,buttonTextDefault:u(s)||e.defaults.buttonText||u(r.BASE_OPTION_DEFAULTS)||e.type,buttonTitleOverride:h(i)||h(n)||e.overrides.buttonHint,buttonTitleDefault:h(s)||e.defaults.buttonHint||h(r.BASE_OPTION_DEFAULTS)}}(e,o,t,n,i)))}h.prototype.classes={root:"fc-theme-standard",tableCellShaded:"fc-cell-shaded",buttonGroup:"fc-button-group",button:"fc-button fc-button-primary",buttonActive:"fc-button-active"},h.prototype.baseIconClass="fc-icon",h.prototype.iconClasses={close:"fc-icon-x",prev:"fc-icon-chevron-left",next:"fc-icon-chevron-right",prevYear:"fc-icon-chevrons-left",nextYear:"fc-icon-chevrons-right"},h.prototype.rtlIconClasses={prev:"fc-icon-chevron-right",next:"fc-icon-chevron-left",prevYear:"fc-icon-chevrons-right",nextYear:"fc-icon-chevrons-left"},h.prototype.iconOverrideOption="buttonIcons",h.prototype.iconOverrideCustomButtonOption="icon",h.prototype.iconOverridePrefix="fc-icon-";let y={};function _(e){for(let t in e)if(e[t].isFetching)return!0;return!1}function b(e,t,n,r){let i={};for(let e of t)i[e.sourceId]=e;return n&&(i=E(i,n,r)),Object.assign(Object.assign({},e),i)}function E(e,t,n){return S(e,r.filterHash(e,(e=>function(e,t,n){return C(e,n)?!n.options.lazyFetching||!e.fetchRange||e.isFetching||t.start<e.fetchRange.start||t.end>e.fetchRange.end:!e.latestFetchId}(e,t,n))),t,!1,n)}function S(e,t,n,r,i){let s={};for(let o in e){let a=e[o];t[o]?s[o]=D(a,n,r,i):s[o]=a}return s}function D(e,t,n,i){let{options:s,calendarApi:o}=i,a=i.pluginHooks.eventSourceDefs[e.sourceDefId],l=r.guid();return a.fetch({eventSource:e,range:t,isRefetch:n,context:i},(n=>{let{rawEvents:r}=n;s.eventSourceSuccess&&(r=s.eventSourceSuccess.call(o,r,n.response)||r),e.success&&(r=e.success.call(o,r,n.response)||r),i.dispatch({type:"RECEIVE_EVENTS",sourceId:e.sourceId,fetchId:l,fetchRange:t,rawEvents:r})}),(n=>{let r=!1;s.eventSourceFailure&&(s.eventSourceFailure.call(o,n),r=!0),e.failure&&(e.failure(n),r=!0),r||console.warn(n.message,n),i.dispatch({type:"RECEIVE_EVENT_ERROR",sourceId:e.sourceId,fetchId:l,fetchRange:t,error:n})})),Object.assign(Object.assign({},e),{isFetching:!0,latestFetchId:l})}function A(e,t){return r.filterHash(e,(e=>C(e,t)))}function C(e,t){return!t.pluginHooks.eventSourceDefs[e.sourceDefId].ignoreRange}function w(e,t){switch(t.type){case"UNSELECT_DATES":return null;case"SELECT_DATES":return t.selection;default:return e}}function T(e,t){switch(t.type){case"UNSELECT_EVENT":return"";case"SELECT_EVENT":return t.eventInstanceId;default:return e}}function R(e,t){let n;switch(t.type){case"UNSET_EVENT_DRAG":return null;case"SET_EVENT_DRAG":return n=t.state,{affectedEvents:n.affectedEvents,mutatedEvents:n.mutatedEvents,isEvent:n.isEvent};default:return e}}function O(e,t){let n;switch(t.type){case"UNSET_EVENT_RESIZE":return null;case"SET_EVENT_RESIZE":return n=t.state,{affectedEvents:n.affectedEvents,mutatedEvents:n.mutatedEvents,isEvent:n.isEvent};default:return e}}function x(e,t,n,r,i){return{header:e.headerToolbar?k(e.headerToolbar,e,t,n,r,i):null,footer:e.footerToolbar?k(e.footerToolbar,e,t,n,r,i):null}}function k(e,t,n,r,i,s){let o={},a=[],l=!1;for(let c in e){let d=M(e[c],t,n,r,i,s);o[c]=d.widgets,a.push(...d.viewsWithButtons),l=l||d.hasTitle}return{sectionWidgets:o,viewsWithButtons:a,hasTitle:l}}function M(e,t,n,i,s,o){let a="rtl"===t.direction,l=t.customButtons||{},c=n.buttonText||{},d=t.buttonText||{},u=n.buttonHints||{},h=t.buttonHints||{},f=e?e.split(" "):[],p=[],g=!1;return{widgets:f.map((e=>e.split(",").map((e=>{if("title"===e)return g=!0,{buttonName:e};let n,f,m,v,y,_;if(n=l[e])m=e=>{n.click&&n.click.call(e.target,e,e.target)},(v=i.getCustomButtonIconClass(n))||(v=i.getIconClass(e,a))||(y=n.text),_=n.hint||n.text;else if(f=s[e]){p.push(e),m=()=>{o.changeView(e)},(y=f.buttonTextOverride)||(v=i.getIconClass(e,a))||(y=f.buttonTextDefault);let n=f.buttonTextOverride||f.buttonTextDefault;_=r.formatWithOrdinals(f.buttonTitleOverride||f.buttonTitleDefault||t.viewHint,[n,e],n)}else if(o[e])if(m=()=>{o[e]()},(y=c[e])||(v=i.getIconClass(e,a))||(y=d[e]),"prevYear"===e||"nextYear"===e){let t="prevYear"===e?"prev":"next";_=r.formatWithOrdinals(u[t]||h[t],[d.year||"year","year"],d[e])}else _=t=>r.formatWithOrdinals(u[e]||h[e],[d[t]||t,t],d[e]);return{buttonName:e,buttonClick:m,buttonIcon:v,buttonText:y,buttonHint:_}})))),viewsWithButtons:p,hasTitle:g}}class I{constructor(e,t,n){this.type=e,this.getCurrentData=t,this.dateEnv=n}get calendar(){return this.getCurrentData().calendarApi}get title(){return this.getCurrentData().viewTitle}get activeStart(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start)}get activeEnd(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end)}get currentStart(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start)}get currentEnd(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end)}getOption(e){return this.getCurrentData().options[e]}}function N(e,t){let n=r.hashValuesToArray(t.getCurrentData().eventSources);if(1===n.length&&1===e.length&&Array.isArray(n[0]._raw)&&Array.isArray(e[0]))return void t.dispatch({type:"RESET_RAW_EVENTS",sourceId:n[0].sourceId,rawEvents:e[0]});let i=[];for(let t of e){let e=!1;for(let r=0;r<n.length;r+=1)if(n[r]._raw===t){n.splice(r,1),e=!0;break}e||i.push(t)}for(let e of n)t.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:e.sourceId});for(let e of i)t.calendarApi.addEventSource(e)}const P=[u({name:"array-event-source",eventSourceDefs:[{ignoreRange:!0,parseMeta:e=>Array.isArray(e.events)?e.events:null,fetch(e,t){t({rawEvents:e.eventSource.meta})}}]}),u({name:"func-event-source",eventSourceDefs:[{parseMeta:e=>"function"==typeof e.events?e.events:null,fetch(e,t,n){const{dateEnv:i}=e.context,s=e.eventSource.meta;r.unpromisify(s.bind(null,r.buildRangeApiWithTimeZone(e.range,i)),(e=>t({rawEvents:e})),n)}}]}),u({name:"json-event-source",eventSourceRefiners:{method:String,extraParams:r.identity,startParam:String,endParam:String,timeZoneParam:String},eventSourceDefs:[{parseMeta:e=>!e.url||"json"!==e.format&&e.format?null:{url:e.url,format:"json",method:(e.method||"GET").toUpperCase(),extraParams:e.extraParams,startParam:e.startParam,endParam:e.endParam,timeZoneParam:e.timeZoneParam},fetch(e,t,n){const{meta:i}=e.eventSource,s=function(e,t,n){let r,i,s,o,{dateEnv:a,options:l}=n,c={};return r=e.startParam,null==r&&(r=l.startParam),i=e.endParam,null==i&&(i=l.endParam),s=e.timeZoneParam,null==s&&(s=l.timeZoneParam),o="function"==typeof e.extraParams?e.extraParams():e.extraParams||{},Object.assign(c,o),c[r]=a.formatIso(t.start),c[i]=a.formatIso(t.end),"local"!==a.timeZone&&(c[s]=a.timeZone),c}(i,e.range,e.context);r.requestJson(i.method,i.url,s).then((([e,n])=>{t({rawEvents:e,response:n})}),n)}}]}),u({name:"simple-recurring-event",recurringTypes:[{parse(e,t){if(e.daysOfWeek||e.startTime||e.endTime||e.startRecur||e.endRecur){let n,i={daysOfWeek:e.daysOfWeek||null,startTime:e.startTime||null,endTime:e.endTime||null,startRecur:e.startRecur?t.createMarker(e.startRecur):null,endRecur:e.endRecur?t.createMarker(e.endRecur):null};return e.duration&&(n=e.duration),!n&&e.startTime&&e.endTime&&(n=r.subtractDurations(e.endTime,e.startTime)),{allDayGuess:Boolean(!e.startTime&&!e.endTime),duration:n,typeData:i}}return null},expand(e,t,n){let i=r.intersectRanges(t,{start:e.startRecur,end:e.endRecur});return i?function(e,t,n,i){let s=e?r.arrayToHash(e):null,o=r.startOfDay(n.start),a=n.end,l=[];for(;o<a;){let e;s&&!s[o.getUTCDay()]||(e=t?i.add(o,t):o,l.push(e)),o=r.addDays(o,1)}return l}(e.daysOfWeek,e.startTime,i,n):[]}}],eventRefiners:{daysOfWeek:r.identity,startTime:r.createDuration,endTime:r.createDuration,duration:r.createDuration,startRecur:r.identity,endRecur:r.identity}}),u({name:"change-handler",optionChangeHandlers:{events(e,t){N([e],t)},eventSources:N}}),u({name:"misc",isLoadingFuncs:[e=>_(e.eventSources)],propSetHandlers:{dateProfile:function(e,t){t.emitter.trigger("datesSet",Object.assign(Object.assign({},r.buildRangeApiWithTimeZone(e.activeRange,t.dateEnv)),{view:t.viewApi}))},eventStore:function(e,t){let{emitter:n}=t;n.hasHandlers("eventsSet")&&n.trigger("eventsSet",r.buildEventApis(e,t))}}})];class H{constructor(e,t){this.runTaskOption=e,this.drainedOption=t,this.queue=[],this.delayedRunner=new r.DelayedRunner(this.drain.bind(this))}request(e,t){this.queue.push(e),this.delayedRunner.request(t)}pause(e){this.delayedRunner.pause(e)}resume(e,t){this.delayedRunner.resume(e,t)}drain(){let{queue:e}=this;for(;e.length;){let t,n=[];for(;t=e.shift();)this.runTask(t),n.push(t);this.drained(n)}}runTask(e){this.runTaskOption&&this.runTaskOption(e)}drained(e){this.drainedOption&&this.drainedOption(e)}}function j(e,t,n){let i;return i=/^(year|month)$/.test(e.currentRangeUnit)?e.currentRange:e.activeRange,n.formatRange(i.start,i.end,r.createFormatter(t.titleFormat||function(e){let{currentRangeUnit:t}=e;if("year"===t)return{year:"numeric"};if("month"===t)return{year:"numeric",month:"long"};let n=r.diffWholeDays(e.currentRange.start,e.currentRange.end);return null!==n&&n>1?{year:"numeric",month:"short",day:"numeric"}:{year:"numeric",month:"long",day:"numeric"}}(e)),{isEndExclusive:e.isRangeAllDay,defaultSeparator:t.titleRangeSeparator})}class B{constructor(e){this.computeCurrentViewData=r.memoize(this._computeCurrentViewData),this.organizeRawLocales=r.memoize(l),this.buildLocale=r.memoize(c),this.buildPluginHooks=function(){let e,t=[],n=[];return(i,s)=>(e&&r.isArraysEqual(i,t)&&r.isArraysEqual(s,n)||(e=function(e,t){let n={},r={premiumReleaseDate:void 0,reducers:[],isLoadingFuncs:[],contextInit:[],eventRefiners:{},eventDefMemberAdders:[],eventSourceRefiners:{},isDraggableTransformers:[],eventDragMutationMassagers:[],eventDefMutationAppliers:[],dateSelectionTransformers:[],datePointTransforms:[],dateSpanTransforms:[],views:{},viewPropsTransformers:[],isPropsValid:null,externalDefTransforms:[],viewContainerAppends:[],eventDropTransformers:[],componentInteractions:[],calendarInteractions:[],themeClasses:{},eventSourceDefs:[],cmdFormatter:null,recurringTypes:[],namedTimeZonedImpl:null,initialView:"",elementDraggingImpl:null,optionChangeHandlers:{},scrollGridImpl:null,listenerRefiners:{},optionRefiners:{},propSetHandlers:{}};function i(e){for(let l of e){const e=l.name,c=n[e];void 0===c?(n[e]=l.id,i(l.deps),a=l,r={premiumReleaseDate:(t=(o=r).premiumReleaseDate,s=a.premiumReleaseDate,void 0===t?s:void 0===s?t:new Date(Math.max(t.valueOf(),s.valueOf()))),reducers:o.reducers.concat(a.reducers),isLoadingFuncs:o.isLoadingFuncs.concat(a.isLoadingFuncs),contextInit:o.contextInit.concat(a.contextInit),eventRefiners:Object.assign(Object.assign({},o.eventRefiners),a.eventRefiners),eventDefMemberAdders:o.eventDefMemberAdders.concat(a.eventDefMemberAdders),eventSourceRefiners:Object.assign(Object.assign({},o.eventSourceRefiners),a.eventSourceRefiners),isDraggableTransformers:o.isDraggableTransformers.concat(a.isDraggableTransformers),eventDragMutationMassagers:o.eventDragMutationMassagers.concat(a.eventDragMutationMassagers),eventDefMutationAppliers:o.eventDefMutationAppliers.concat(a.eventDefMutationAppliers),dateSelectionTransformers:o.dateSelectionTransformers.concat(a.dateSelectionTransformers),datePointTransforms:o.datePointTransforms.concat(a.datePointTransforms),dateSpanTransforms:o.dateSpanTransforms.concat(a.dateSpanTransforms),views:Object.assign(Object.assign({},o.views),a.views),viewPropsTransformers:o.viewPropsTransformers.concat(a.viewPropsTransformers),isPropsValid:a.isPropsValid||o.isPropsValid,externalDefTransforms:o.externalDefTransforms.concat(a.externalDefTransforms),viewContainerAppends:o.viewContainerAppends.concat(a.viewContainerAppends),eventDropTransformers:o.eventDropTransformers.concat(a.eventDropTransformers),calendarInteractions:o.calendarInteractions.concat(a.calendarInteractions),componentInteractions:o.componentInteractions.concat(a.componentInteractions),themeClasses:Object.assign(Object.assign({},o.themeClasses),a.themeClasses),eventSourceDefs:o.eventSourceDefs.concat(a.eventSourceDefs),cmdFormatter:a.cmdFormatter||o.cmdFormatter,recurringTypes:o.recurringTypes.concat(a.recurringTypes),namedTimeZonedImpl:a.namedTimeZonedImpl||o.namedTimeZonedImpl,initialView:o.initialView||a.initialView,elementDraggingImpl:o.elementDraggingImpl||a.elementDraggingImpl,optionChangeHandlers:Object.assign(Object.assign({},o.optionChangeHandlers),a.optionChangeHandlers),scrollGridImpl:a.scrollGridImpl||o.scrollGridImpl,listenerRefiners:Object.assign(Object.assign({},o.listenerRefiners),a.listenerRefiners),optionRefiners:Object.assign(Object.assign({},o.optionRefiners),a.optionRefiners),propSetHandlers:Object.assign(Object.assign({},o.propSetHandlers),a.propSetHandlers)}):c!==l.id&&console.warn(`Duplicate plugin '${e}'`)}var t,s,o,a}return e&&i(e),i(t),r}(i,s)),t=i,n=s,e)}(),this.buildDateEnv=r.memoize(L),this.buildTheme=r.memoize(U),this.parseToolbars=r.memoize(x),this.buildViewSpecs=r.memoize(v),this.buildDateProfileGenerator=r.memoizeObjArg(F),this.buildViewApi=r.memoize(z),this.buildViewUiProps=r.memoizeObjArg(G),this.buildEventUiBySource=r.memoize(V,r.isPropsEqual),this.buildEventUiBases=r.memoize(W),this.parseContextBusinessHours=r.memoizeObjArg(Y),this.buildTitle=r.memoize(j),this.emitter=new r.Emitter,this.actionRunner=new H(this._handleAction.bind(this),this.updateData.bind(this)),this.currentCalendarOptionsInput={},this.currentCalendarOptionsRefined={},this.currentViewOptionsInput={},this.currentViewOptionsRefined={},this.currentCalendarOptionsRefiners={},this.optionsForRefining=[],this.optionsForHandling=[],this.getCurrentData=()=>this.data,this.dispatch=e=>{this.actionRunner.request(e)},this.props=e,this.actionRunner.pause();let t={},n=this.computeOptionsData(e.optionOverrides,t,e.calendarApi),i=n.calendarOptions.initialView||n.pluginHooks.initialView,s=this.computeCurrentViewData(i,n,e.optionOverrides,t);e.calendarApi.currentDataManager=this,this.emitter.setThisContext(e.calendarApi),this.emitter.setOptions(s.options);let o=r.getInitialDate(n.calendarOptions,n.dateEnv),a=s.dateProfileGenerator.build(o);r.rangeContainsMarker(a.activeRange,o)||(o=a.currentRange.start);let d={dateEnv:n.dateEnv,options:n.calendarOptions,pluginHooks:n.pluginHooks,calendarApi:e.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData};for(let e of n.pluginHooks.contextInit)e(d);let u=function(e,t,n){let i=t?t.activeRange:null;return b({},function(e,t){let n=r.buildEventSourceRefiners(t),i=[].concat(e.eventSources||[]),s=[];e.initialEvents&&i.unshift(e.initialEvents),e.events&&i.unshift(e.events);for(let e of i){let i=r.parseEventSource(e,t,n);i&&s.push(i)}return s}(e,n),i,n)}(n.calendarOptions,a,d),h={dynamicOptionOverrides:t,currentViewType:i,currentDate:o,dateProfile:a,businessHours:this.parseContextBusinessHours(d),eventSources:u,eventUiBases:{},eventStore:r.createEmptyEventStore(),renderableEventStore:r.createEmptyEventStore(),dateSelection:null,eventSelection:"",eventDrag:null,eventResize:null,selectionConfig:this.buildViewUiProps(d).selectionConfig},f=Object.assign(Object.assign({},d),h);for(let e of n.pluginHooks.reducers)Object.assign(h,e(null,null,f));q(h,d)&&this.emitter.trigger("loading",!0),this.state=h,this.updateData(),this.actionRunner.resume()}resetOptions(e,t){let{props:n}=this;void 0===t?n.optionOverrides=e:(n.optionOverrides=Object.assign(Object.assign({},n.optionOverrides||{}),e),this.optionsForRefining.push(...t)),(void 0===t||t.length)&&this.actionRunner.request({type:"NOTHING"})}_handleAction(e){let{props:t,state:n,emitter:i}=this,s=function(e,t){return"SET_OPTION"===t.type?Object.assign(Object.assign({},e),{[t.optionName]:t.rawOptionValue}):e}(n.dynamicOptionOverrides,e),o=this.computeOptionsData(t.optionOverrides,s,t.calendarApi),a=function(e,t){return"CHANGE_VIEW_TYPE"===t.type&&(e=t.viewType),e}(n.currentViewType,e),l=this.computeCurrentViewData(a,o,t.optionOverrides,s);t.calendarApi.currentDataManager=this,i.setThisContext(t.calendarApi),i.setOptions(l.options);let c={dateEnv:o.dateEnv,options:o.calendarOptions,pluginHooks:o.pluginHooks,calendarApi:t.calendarApi,dispatch:this.dispatch,emitter:i,getCurrentData:this.getCurrentData},{currentDate:d,dateProfile:u}=n;this.data&&this.data.dateProfileGenerator!==l.dateProfileGenerator&&(u=l.dateProfileGenerator.build(d)),d=r.reduceCurrentDate(d,e),u=function(e,t,n,r){let i;switch(t.type){case"CHANGE_VIEW_TYPE":return r.build(t.dateMarker||n);case"CHANGE_DATE":return r.build(t.dateMarker);case"PREV":if(i=r.buildPrev(e,n),i.isValid)return i;break;case"NEXT":if(i=r.buildNext(e,n),i.isValid)return i}return e}(u,e,d,l.dateProfileGenerator),"PREV"!==e.type&&"NEXT"!==e.type&&r.rangeContainsMarker(u.currentRange,d)||(d=u.currentRange.start);let h=function(e,t,n,i){let s=n?n.activeRange:null;switch(t.type){case"ADD_EVENT_SOURCES":return b(e,t.sources,s,i);case"REMOVE_EVENT_SOURCE":return o=e,a=t.sourceId,r.filterHash(o,(e=>e.sourceId!==a));case"PREV":case"NEXT":case"CHANGE_DATE":case"CHANGE_VIEW_TYPE":return n?E(e,s,i):e;case"FETCH_EVENT_SOURCES":return S(e,t.sourceIds?r.arrayToHash(t.sourceIds):A(e,i),s,t.isRefetch||!1,i);case"RECEIVE_EVENTS":case"RECEIVE_EVENT_ERROR":return function(e,t,n,r){let i=e[t];return i&&n===i.latestFetchId?Object.assign(Object.assign({},e),{[t]:Object.assign(Object.assign({},i),{isFetching:!1,fetchRange:r})}):e}(e,t.sourceId,t.fetchId,t.fetchRange);case"REMOVE_ALL_EVENT_SOURCES":return{};default:return e}var o,a}(n.eventSources,e,u,c),f=r.reduceEventStore(n.eventStore,e,h,u,c),p=_(h)&&!l.options.progressiveEventRendering&&n.renderableEventStore||f,{eventUiSingleBase:g,selectionConfig:m}=this.buildViewUiProps(c),v=this.buildEventUiBySource(h),y={dynamicOptionOverrides:s,currentViewType:a,currentDate:d,dateProfile:u,eventSources:h,eventStore:f,renderableEventStore:p,selectionConfig:m,eventUiBases:this.buildEventUiBases(p.defs,g,v),businessHours:this.parseContextBusinessHours(c),dateSelection:w(n.dateSelection,e),eventSelection:T(n.eventSelection,e),eventDrag:R(n.eventDrag,e),eventResize:O(n.eventResize,e)},D=Object.assign(Object.assign({},c),y);for(let t of o.pluginHooks.reducers)Object.assign(y,t(n,e,D));let C=q(n,c),x=q(y,c);!C&&x?i.trigger("loading",!0):C&&!x&&i.trigger("loading",!1),this.state=y,t.onAction&&t.onAction(e)}updateData(){let{props:e,state:t}=this,n=this.data,i=this.computeOptionsData(e.optionOverrides,t.dynamicOptionOverrides,e.calendarApi),s=this.computeCurrentViewData(t.currentViewType,i,e.optionOverrides,t.dynamicOptionOverrides),o=this.data=Object.assign(Object.assign(Object.assign({viewTitle:this.buildTitle(t.dateProfile,s.options,i.dateEnv),calendarApi:e.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData},i),s),t),a=i.pluginHooks.optionChangeHandlers,l=n&&n.calendarOptions,c=i.calendarOptions;if(l&&l!==c){l.timeZone!==c.timeZone&&(t.eventSources=o.eventSources=function(e,t,n){let r=t?t.activeRange:null;return S(e,A(e,n),r,!0,n)}(o.eventSources,t.dateProfile,o),t.eventStore=o.eventStore=r.rezoneEventStoreDates(o.eventStore,n.dateEnv,o.dateEnv),t.renderableEventStore=o.renderableEventStore=r.rezoneEventStoreDates(o.renderableEventStore,n.dateEnv,o.dateEnv));for(let e in a)-1===this.optionsForHandling.indexOf(e)&&l[e]===c[e]||a[e](c[e],o)}this.optionsForHandling=[],e.onData&&e.onData(o)}computeOptionsData(e,t,n){if(!this.optionsForRefining.length&&e===this.stableOptionOverrides&&t===this.stableDynamicOptionOverrides)return this.stableCalendarOptionsData;let{refinedOptions:r,pluginHooks:i,localeDefaults:s,availableLocaleData:o,extra:a}=this.processRawCalendarOptions(e,t);Q(a);let l=this.buildDateEnv(r.timeZone,r.locale,r.weekNumberCalculation,r.firstDay,r.weekText,i,o,r.defaultRangeSeparator),c=this.buildViewSpecs(i.views,this.stableOptionOverrides,this.stableDynamicOptionOverrides,s),d=this.buildTheme(r,i),u=this.parseToolbars(r,this.stableOptionOverrides,d,c,n);return this.stableCalendarOptionsData={calendarOptions:r,pluginHooks:i,dateEnv:l,viewSpecs:c,theme:d,toolbarConfig:u,localeDefaults:s,availableRawLocales:o.map}}processRawCalendarOptions(e,t){let{locales:n,locale:i}=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,e,t]),s=this.organizeRawLocales(n),o=s.map,a=this.buildLocale(i||s.defaultCode,o).options,l=this.buildPluginHooks(e.plugins||[],P),c=this.currentCalendarOptionsRefiners=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},r.BASE_OPTION_REFINERS),r.CALENDAR_LISTENER_REFINERS),r.CALENDAR_OPTION_REFINERS),l.listenerRefiners),l.optionRefiners),d={},u=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,a,e,t]),h={},f=this.currentCalendarOptionsInput,p=this.currentCalendarOptionsRefined,g=!1;for(let e in u)-1===this.optionsForRefining.indexOf(e)&&(u[e]===f[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&e in f&&r.COMPLEX_OPTION_COMPARATORS[e](f[e],u[e]))?h[e]=p[e]:c[e]?(h[e]=c[e](u[e]),g=!0):d[e]=f[e];return g&&(this.currentCalendarOptionsInput=u,this.currentCalendarOptionsRefined=h,this.stableOptionOverrides=e,this.stableDynamicOptionOverrides=t),this.optionsForHandling.push(...this.optionsForRefining),this.optionsForRefining=[],{rawOptions:this.currentCalendarOptionsInput,refinedOptions:this.currentCalendarOptionsRefined,pluginHooks:l,availableLocaleData:s,localeDefaults:a,extra:d}}_computeCurrentViewData(e,t,n,r){let i=t.viewSpecs[e];if(!i)throw new Error(`viewType "${e}" is not available. Please make sure you've loaded all neccessary plugins`);let{refinedOptions:s,extra:o}=this.processRawViewOptions(i,t.pluginHooks,t.localeDefaults,n,r);return Q(o),{viewSpec:i,options:s,dateProfileGenerator:this.buildDateProfileGenerator({dateProfileGeneratorClass:i.optionDefaults.dateProfileGeneratorClass,duration:i.duration,durationUnit:i.durationUnit,usesMinMaxTime:i.optionDefaults.usesMinMaxTime,dateEnv:t.dateEnv,calendarApi:this.props.calendarApi,slotMinTime:s.slotMinTime,slotMaxTime:s.slotMaxTime,showNonCurrentDates:s.showNonCurrentDates,dayCount:s.dayCount,dateAlignment:s.dateAlignment,dateIncrement:s.dateIncrement,hiddenDays:s.hiddenDays,weekends:s.weekends,nowInput:s.now,validRangeInput:s.validRange,visibleRangeInput:s.visibleRange,fixedWeekCount:s.fixedWeekCount}),viewApi:this.buildViewApi(e,this.getCurrentData,t.dateEnv)}}processRawViewOptions(e,t,n,i,s){let o=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,e.optionDefaults,n,i,e.optionOverrides,s]),a=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},r.BASE_OPTION_REFINERS),r.CALENDAR_LISTENER_REFINERS),r.CALENDAR_OPTION_REFINERS),r.VIEW_OPTION_REFINERS),t.listenerRefiners),t.optionRefiners),l={},c=this.currentViewOptionsInput,d=this.currentViewOptionsRefined,u=!1,h={};for(let e in o)o[e]===c[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&r.COMPLEX_OPTION_COMPARATORS[e](o[e],c[e])?l[e]=d[e]:(o[e]===this.currentCalendarOptionsInput[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&r.COMPLEX_OPTION_COMPARATORS[e](o[e],this.currentCalendarOptionsInput[e])?e in this.currentCalendarOptionsRefined&&(l[e]=this.currentCalendarOptionsRefined[e]):a[e]?l[e]=a[e](o[e]):h[e]=o[e],u=!0);return u&&(this.currentViewOptionsInput=o,this.currentViewOptionsRefined=l),{rawOptions:this.currentViewOptionsInput,refinedOptions:this.currentViewOptionsRefined,extra:h}}}function L(e,t,n,i,s,o,a,l){let d=c(t||a.defaultCode,a.map);return new r.DateEnv({calendarSystem:"gregory",timeZone:e,namedTimeZoneImpl:o.namedTimeZonedImpl,locale:d,weekNumberCalculation:n,firstDay:i,weekText:s,cmdFormatter:o.cmdFormatter,defaultSeparator:l})}function U(e,t){return new(t.themeClasses[e.themeSystem]||h)(e)}function F(e){return new(e.dateProfileGeneratorClass||r.DateProfileGenerator)(e)}function z(e,t,n){return new I(e,t,n)}function V(e){return r.mapHash(e,(e=>e.ui))}function W(e,t,n){let r={"":t};for(let t in e){let i=e[t];i.sourceId&&n[i.sourceId]&&(r[t]=n[i.sourceId])}return r}function G(e){let{options:t}=e;return{eventUiSingleBase:r.createEventUi({display:t.eventDisplay,editable:t.editable,startEditable:t.eventStartEditable,durationEditable:t.eventDurationEditable,constraint:t.eventConstraint,overlap:"boolean"==typeof t.eventOverlap?t.eventOverlap:void 0,allow:t.eventAllow,backgroundColor:t.eventBackgroundColor,borderColor:t.eventBorderColor,textColor:t.eventTextColor,color:t.eventColor},e),selectionConfig:r.createEventUi({constraint:t.selectConstraint,overlap:"boolean"==typeof t.selectOverlap?t.selectOverlap:void 0,allow:t.selectAllow},e)}}function q(e,t){for(let n of t.pluginHooks.isLoadingFuncs)if(n(e))return!0;return!1}function Y(e){return r.parseBusinessHours(e.options.businessHours,e)}function Q(e,t){for(let n in e)console.warn(`Unknown option '${n}'`+(t?` for view '${t}'`:""))}class Z extends r.BaseComponent{render(){let e=this.props.widgetGroups.map((e=>this.renderWidgetGroup(e)));return i.createElement("div",{className:"fc-toolbar-chunk"},...e)}renderWidgetGroup(e){let{props:t}=this,{theme:n}=this.context,r=[],s=!0;for(let o of e){let{buttonName:e,buttonClick:a,buttonText:l,buttonIcon:c,buttonHint:d}=o;if("title"===e)s=!1,r.push(i.createElement("h2",{className:"fc-toolbar-title",id:t.titleId},t.title));else{let s=e===t.activeButton,o=!t.isTodayEnabled&&"today"===e||!t.isPrevEnabled&&"prev"===e||!t.isNextEnabled&&"next"===e,u=[`fc-${e}-button`,n.getClass("button")];s&&u.push(n.getClass("buttonActive")),r.push(i.createElement("button",{type:"button",title:"function"==typeof d?d(t.navUnit):d,disabled:o,"aria-pressed":s,className:u.join(" "),onClick:a},l||(c?i.createElement("span",{className:c}):"")))}}if(r.length>1){let e=s&&n.getClass("buttonGroup")||"";return i.createElement("div",{className:e},...r)}return r[0]}}class X extends r.BaseComponent{render(){let e,t,{model:n,extraClassName:r}=this.props,s=!1,o=n.sectionWidgets,a=o.center;o.left?(s=!0,e=o.left):e=o.start,o.right?(s=!0,t=o.right):t=o.end;let l=[r||"","fc-toolbar",s?"fc-toolbar-ltr":""];return i.createElement("div",{className:l.join(" ")},this.renderSection("start",e||[]),this.renderSection("center",a||[]),this.renderSection("end",t||[]))}renderSection(e,t){let{props:n}=this;return i.createElement(Z,{key:e,widgetGroups:t,title:n.title,navUnit:n.navUnit,activeButton:n.activeButton,isTodayEnabled:n.isTodayEnabled,isPrevEnabled:n.isPrevEnabled,isNextEnabled:n.isNextEnabled,titleId:n.titleId})}}class J extends r.BaseComponent{constructor(){super(...arguments),this.state={availableWidth:null},this.handleEl=e=>{this.el=e,r.setRef(this.props.elRef,e),this.updateAvailableWidth()},this.handleResize=()=>{this.updateAvailableWidth()}}render(){let{props:e,state:t}=this,{aspectRatio:n}=e,r=["fc-view-harness",n||e.liquid||e.height?"fc-view-harness-active":"fc-view-harness-passive"],s="",o="";return n?null!==t.availableWidth?s=t.availableWidth/n:o=1/n*100+"%":s=e.height||"",i.createElement("div",{"aria-labelledby":e.labeledById,ref:this.handleEl,className:r.join(" "),style:{height:s,paddingBottom:o}},e.children)}componentDidMount(){this.context.addResizeHandler(this.handleResize)}componentWillUnmount(){this.context.removeResizeHandler(this.handleResize)}updateAvailableWidth(){this.el&&this.props.aspectRatio&&this.setState({availableWidth:this.el.offsetWidth})}}class $ extends r.Interaction{constructor(e){super(e),this.handleSegClick=(e,t)=>{let{component:n}=this,{context:i}=n,s=r.getElSeg(t);if(s&&n.isValidSegDownEl(e.target)){let o=r.elementClosest(e.target,".fc-event-forced-url"),a=o?o.querySelector("a[href]").href:"";i.emitter.trigger("eventClick",{el:t,event:new r.EventImpl(n.context,s.eventRange.def,s.eventRange.instance),jsEvent:e,view:i.viewApi}),a&&!e.defaultPrevented&&(window.location.href=a)}},this.destroy=r.listenBySelector(e.el,"click",".fc-event",this.handleSegClick)}}class K extends r.Interaction{constructor(e){super(e),this.handleEventElRemove=e=>{e===this.currentSegEl&&this.handleSegLeave(null,this.currentSegEl)},this.handleSegEnter=(e,t)=>{r.getElSeg(t)&&(this.currentSegEl=t,this.triggerEvent("eventMouseEnter",e,t))},this.handleSegLeave=(e,t)=>{this.currentSegEl&&(this.currentSegEl=null,this.triggerEvent("eventMouseLeave",e,t))},this.removeHoverListeners=r.listenToHoverBySelector(e.el,".fc-event",this.handleSegEnter,this.handleSegLeave)}destroy(){this.removeHoverListeners()}triggerEvent(e,t,n){let{component:i}=this,{context:s}=i,o=r.getElSeg(n);t&&!i.isValidSegDownEl(t.target)||s.emitter.trigger(e,{el:n,event:new r.EventImpl(s,o.eventRange.def,o.eventRange.instance),jsEvent:t,view:s.viewApi})}}class ee extends r.PureComponent{constructor(){super(...arguments),this.buildViewContext=r.memoize(r.buildViewContext),this.buildViewPropTransformers=r.memoize(ne),this.buildToolbarProps=r.memoize(te),this.headerRef=i.createRef(),this.footerRef=i.createRef(),this.interactionsStore={},this.state={viewLabelId:r.getUniqueDomId()},this.registerInteractiveComponent=(e,t)=>{let n=r.parseInteractionSettings(e,t),i=[$,K].concat(this.props.pluginHooks.componentInteractions).map((e=>new e(n)));this.interactionsStore[e.uid]=i,r.interactionSettingsStore[e.uid]=n},this.unregisterInteractiveComponent=e=>{let t=this.interactionsStore[e.uid];if(t){for(let e of t)e.destroy();delete this.interactionsStore[e.uid]}delete r.interactionSettingsStore[e.uid]},this.resizeRunner=new r.DelayedRunner((()=>{this.props.emitter.trigger("_resize",!0),this.props.emitter.trigger("windowResize",{view:this.props.viewApi})})),this.handleWindowResize=e=>{let{options:t}=this.props;t.handleWindowResize&&e.target===window&&this.resizeRunner.request(t.windowResizeDelay)}}render(){let e,{props:t}=this,{toolbarConfig:n,options:s}=t,o=this.buildToolbarProps(t.viewSpec,t.dateProfile,t.dateProfileGenerator,t.currentDate,r.getNow(t.options.now,t.dateEnv),t.viewTitle),a=!1,l="";t.isHeightAuto||t.forPrint?l="":null!=s.height?a=!0:null!=s.contentHeight?l=s.contentHeight:e=Math.max(s.aspectRatio,.5);let c=this.buildViewContext(t.viewSpec,t.viewApi,t.options,t.dateProfileGenerator,t.dateEnv,t.theme,t.pluginHooks,t.dispatch,t.getCurrentData,t.emitter,t.calendarApi,this.registerInteractiveComponent,this.unregisterInteractiveComponent),d=n.header&&n.header.hasTitle?this.state.viewLabelId:"";return i.createElement(r.ViewContextType.Provider,{value:c},n.header&&i.createElement(X,Object.assign({ref:this.headerRef,extraClassName:"fc-header-toolbar",model:n.header,titleId:d},o)),i.createElement(J,{liquid:a,height:l,aspectRatio:e,labeledById:d},this.renderView(t),this.buildAppendContent()),n.footer&&i.createElement(X,Object.assign({ref:this.footerRef,extraClassName:"fc-footer-toolbar",model:n.footer,titleId:""},o)))}componentDidMount(){let{props:e}=this;this.calendarInteractions=e.pluginHooks.calendarInteractions.map((t=>new t(e))),window.addEventListener("resize",this.handleWindowResize);let{propSetHandlers:t}=e.pluginHooks;for(let n in t)t[n](e[n],e)}componentDidUpdate(e){let{props:t}=this,{propSetHandlers:n}=t.pluginHooks;for(let r in n)t[r]!==e[r]&&n[r](t[r],t)}componentWillUnmount(){window.removeEventListener("resize",this.handleWindowResize),this.resizeRunner.clear();for(let e of this.calendarInteractions)e.destroy();this.props.emitter.trigger("_unmount")}buildAppendContent(){let{props:e}=this,t=e.pluginHooks.viewContainerAppends.map((t=>t(e)));return i.createElement(i.Fragment,{},...t)}renderView(e){let{pluginHooks:t}=e,{viewSpec:n}=e,r={dateProfile:e.dateProfile,businessHours:e.businessHours,eventStore:e.renderableEventStore,eventUiBases:e.eventUiBases,dateSelection:e.dateSelection,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,isHeightAuto:e.isHeightAuto,forPrint:e.forPrint},s=this.buildViewPropTransformers(t.viewPropsTransformers);for(let t of s)Object.assign(r,t.transform(r,e));let o=n.component;return i.createElement(o,Object.assign({},r))}}function te(e,t,n,i,s,o){let a=n.build(s,void 0,!1),l=n.buildPrev(t,i,!1),c=n.buildNext(t,i,!1);return{title:o,activeButton:e.type,navUnit:e.singleUnit,isTodayEnabled:a.isValid&&!r.rangeContainsMarker(t.currentRange,s),isPrevEnabled:l.isValid,isNextEnabled:c.isValid}}function ne(e){return e.map((e=>new e))}class re extends r.CalendarImpl{constructor(e,t={}){super(),this.isRendering=!1,this.isRendered=!1,this.currentClassNames=[],this.customContentRenderId=0,this.handleAction=e=>{switch(e.type){case"SET_EVENT_DRAG":case"SET_EVENT_RESIZE":this.renderRunner.tryDrain()}},this.handleData=e=>{this.currentData=e,this.renderRunner.request(e.calendarOptions.rerenderDelay)},this.handleRenderRequest=()=>{if(this.isRendering){this.isRendered=!0;let{currentData:e}=this;r.flushSync((()=>{i.render(i.createElement(r.CalendarRoot,{options:e.calendarOptions,theme:e.theme,emitter:e.emitter},((t,n,s,o)=>(this.setClassNames(t),this.setHeight(n),i.createElement(r.RenderId.Provider,{value:this.customContentRenderId},i.createElement(ee,Object.assign({isHeightAuto:s,forPrint:o},e)))))),this.el)}))}else this.isRendered&&(this.isRendered=!1,i.render(null,this.el),this.setClassNames([]),this.setHeight(""))},r.ensureElHasStyles(e),this.el=e,this.renderRunner=new r.DelayedRunner(this.handleRenderRequest),new B({optionOverrides:t,calendarApi:this,onAction:this.handleAction,onData:this.handleData})}render(){let e=this.isRendering;e?this.customContentRenderId+=1:this.isRendering=!0,this.renderRunner.request(),e&&this.updateSize()}destroy(){this.isRendering&&(this.isRendering=!1,this.renderRunner.request())}updateSize(){r.flushSync((()=>{super.updateSize()}))}batchRendering(e){this.renderRunner.pause("batchRendering"),e(),this.renderRunner.resume("batchRendering")}pauseRendering(){this.renderRunner.pause("pauseRendering")}resumeRendering(){this.renderRunner.resume("pauseRendering",!0)}resetOptions(e,t){this.currentDataManager.resetOptions(e,t)}setClassNames(e){if(!r.isArraysEqual(e,this.currentClassNames)){let{classList:t}=this.el;for(let e of this.currentClassNames)t.remove(e);for(let n of e)t.add(n);this.currentClassNames=e}}setHeight(e){r.applyStyleProp(this.el,"height",e)}}function ie(e){let t=c(e.locale||"en",l([]).map);return new r.DateEnv(Object.assign(Object.assign({timeZone:r.BASE_OPTION_DEFAULTS.timeZone,calendarSystem:"gregory"},e),{locale:t}))}t.JsonRequestError=r.JsonRequestError,t.Calendar=re,t.createPlugin=u,t.formatDate=function(e,t={}){let n=ie(t),i=r.createFormatter(t),s=n.createMarkerMeta(e);return s?n.format(s.marker,i,{forcedTzo:s.forcedTzo}):""},t.formatRange=function(e,t,n){let i=ie("object"==typeof n&&n?n:{}),s=r.createFormatter(n),o=i.createMarkerMeta(e),a=i.createMarkerMeta(t);return o&&a?i.formatRange(o.marker,a.marker,s,{forcedStartTzo:o.forcedTzo,forcedEndTzo:a.forcedTzo,isEndExclusive:n.isEndExclusive,defaultSeparator:r.BASE_OPTION_DEFAULTS.defaultRangeSeparator}):""},t.globalLocales=s,t.globalPlugins=P,t.sliceEvents=function(e,t){return r.sliceEventStore(e.eventStore,e.eventUiBases,e.dateProfile.activeRange,t?e.nextDayThreshold:null).fg},t.version="6.1.8"},873:(e,t,n)=>{var r=n(400),i=n(748);function s(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var o=s(r);const a=[],l=new Map;function c(e){a.push(e),l.forEach((t=>{u(t,e)}))}function d(e){let t=l.get(e);if(!t||!t.isConnected){if(t=e.querySelector("style[data-fullcalendar]"),!t){t=document.createElement("style"),t.setAttribute("data-fullcalendar","");const n=(void 0===h&&(h=function(){const e=document.querySelector('meta[name="csp-nonce"]');if(e&&e.hasAttribute("content"))return e.getAttribute("content");const t=document.querySelector("script[nonce]");return t&&t.nonce||""}()),h);n&&(t.nonce=n);const r=e===document?document.head:e,i=e===document?r.querySelector("script,link[rel=stylesheet],link[as=style],style"):r.firstChild;r.insertBefore(t,i)}l.set(e,t),function(e){for(const t of a)u(e,t)}(t)}}function u(e,t){const{sheet:n}=e,r=n.cssRules.length;t.split("}").forEach(((e,t)=>{(e=e.trim())&&n.insertRule(e+"}",r+t)}))}let h;function f(e){e.parentNode&&e.parentNode.removeChild(e)}function p(e,t){if(e.closest)return e.closest(t);if(!document.documentElement.contains(e))return null;do{if(g(e,t))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType);return null}function g(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector).call(e,t)}function m(e,t){let n=e instanceof HTMLElement?[e]:e,r=[];for(let e=0;e<n.length;e+=1){let i=n[e].querySelectorAll(t);for(let e=0;e<i.length;e+=1)r.push(i[e])}return r}"undefined"!=typeof document&&d(document),c(':root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url("data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=") format("truetype")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:"\\e900"}.fc-icon-chevron-right:before{content:"\\e901"}.fc-icon-chevrons-left:before{content:"\\e902"}.fc-icon-chevrons-right:before{content:"\\e903"}.fc-icon-minus-square:before{content:"\\e904"}.fc-icon-plus-square:before{content:"\\e905"}.fc-icon-x:before{content:"\\e906"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:"";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:"";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}');const v=/(top|left|right|bottom|width|height)$/i;function y(e,t){for(let n in t)_(e,n,t[n])}function _(e,t,n){null==n?e.style[t]="":"number"==typeof n&&v.test(t)?e.style[t]=`${n}px`:e.style[t]=n}function b(e){var t,n;return null!==(n=null===(t=e.composedPath)||void 0===t?void 0:t.call(e)[0])&&void 0!==n?n:e.target}let E=0;function S(){return E+=1,"fc-dom-"+E}function D(e){e.preventDefault()}function A(e,t,n,r){let i=function(e,t){return n=>{let r=p(n.target,e);r&&t.call(r,n,r)}}(n,r);return e.addEventListener(t,i),()=>{e.removeEventListener(t,i)}}const C=["webkitTransitionEnd","otransitionend","oTransitionEnd","msTransitionEnd","transitionend"];function w(e){return Object.assign({onClick:e},T(e))}function T(e){return{tabIndex:0,onKeyDown(t){"Enter"!==t.key&&" "!==t.key||(e(t),t.preventDefault())}}}let R=0;function O(){return R+=1,String(R)}function x(e){let t,n,r=[],i=[];for("string"==typeof e?i=e.split(/\s*,\s*/):"function"==typeof e?i=[e]:Array.isArray(e)&&(i=e),t=0;t<i.length;t+=1)n=i[t],"string"==typeof n?r.push("-"===n.charAt(0)?{field:n.substring(1),order:-1}:{field:n,order:1}):"function"==typeof n&&r.push({func:n});return r}function k(e,t,n){let r,i;for(r=0;r<n.length;r+=1)if(i=M(e,t,n[r]),i)return i;return 0}function M(e,t,n){return n.func?n.func(e,t):I(e[n.field],t[n.field])*(n.order||1)}function I(e,t){return e||t?null==t?-1:null==e?1:"string"==typeof e||"string"==typeof t?String(e).localeCompare(String(t)):e-t:0}function N(e,t){let n=String(e);return"000".substr(0,t-n.length)+n}function P(e,t,n){return"function"==typeof e?e(...t):"string"==typeof e?t.reduce(((e,t,n)=>e.replace("$"+n,t||"")),e):n}function H(e){return e%1==0}function j(e){let t=e.querySelector(".fc-scrollgrid-shrink-frame"),n=e.querySelector(".fc-scrollgrid-shrink-cushion");if(!t)throw new Error("needs fc-scrollgrid-shrink-frame className");if(!n)throw new Error("needs fc-scrollgrid-shrink-cushion className");return e.getBoundingClientRect().width-t.getBoundingClientRect().width+n.getBoundingClientRect().width}const B=["years","months","days","milliseconds"],L=/^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;function U(e,t){return"string"==typeof e?function(e){let t=L.exec(e);if(t){let e=t[1]?-1:1;return{years:0,months:0,days:e*(t[2]?parseInt(t[2],10):0),milliseconds:e*(60*(t[3]?parseInt(t[3],10):0)*60*1e3+60*(t[4]?parseInt(t[4],10):0)*1e3+1e3*(t[5]?parseInt(t[5],10):0)+(t[6]?parseInt(t[6],10):0))}}return null}(e):"object"==typeof e&&e?F(e):"number"==typeof e?F({[t||"milliseconds"]:e}):null}function F(e){let t={years:e.years||e.year||0,months:e.months||e.month||0,days:e.days||e.day||0,milliseconds:60*(e.hours||e.hour||0)*60*1e3+60*(e.minutes||e.minute||0)*1e3+1e3*(e.seconds||e.second||0)+(e.milliseconds||e.millisecond||e.ms||0)},n=e.weeks||e.week;return n&&(t.days+=7*n,t.specifiedWeeks=!0),t}function z(e){return V(e)/864e5}function V(e){return 31536e6*e.years+2592e6*e.months+864e5*e.days+e.milliseconds}function W(e){let t=e.milliseconds;if(t){if(t%1e3!=0)return{unit:"millisecond",value:t};if(t%6e4!=0)return{unit:"second",value:t/1e3};if(t%36e5!=0)return{unit:"minute",value:t/6e4};if(t)return{unit:"hour",value:t/36e5}}return e.days?e.specifiedWeeks&&e.days%7==0?{unit:"week",value:e.days/7}:{unit:"day",value:e.days}:e.months?{unit:"month",value:e.months}:e.years?{unit:"year",value:e.years}:{unit:"millisecond",value:0}}const{hasOwnProperty:G}=Object.prototype;function q(e,t){let n={};if(t)for(let r in t)if(t[r]===Fe){let t=[];for(let i=e.length-1;i>=0;i-=1){let s=e[i][r];if("object"==typeof s&&s)t.unshift(s);else if(void 0!==s){n[r]=s;break}}t.length&&(n[r]=q(t))}for(let t=e.length-1;t>=0;t-=1){let r=e[t];for(let e in r)e in n||(n[e]=r[e])}return n}function Y(e,t){let n={};for(let r in e)t(e[r],r)&&(n[r]=e[r]);return n}function Q(e,t){let n={};for(let r in e)n[r]=t(e[r],r);return n}function Z(e){let t=[];for(let n in e)t.push(e[n]);return t}function X(e,t){if(e===t)return!0;for(let n in e)if(G.call(e,n)&&!(n in t))return!1;for(let n in t)if(G.call(t,n)&&e[n]!==t[n])return!1;return!0}const J=/^on[A-Z]/;function $(e,t){let n=[];for(let r in e)G.call(e,r)&&(r in t||n.push(r));for(let r in t)G.call(t,r)&&e[r]!==t[r]&&n.push(r);return n}function K(e,t,n={}){if(e===t)return!0;for(let o in t)if(!(o in e&&(r=e[o],i=t[o],s=n[o],r===i||!0===s||s&&s(r,i))))return!1;var r,i,s;for(let n in e)if(!(n in t))return!1;return!0}function ee(e,t=0,n,r=1){let i=[];null==n&&(n=Object.keys(e).length);for(let s=t;s<n;s+=r){let t=e[s];void 0!==t&&i.push(t)}return i}function te(e,t,n){if(e===t)return!0;let r,i=e.length;if(i!==t.length)return!1;for(r=0;r<i;r+=1)if(!(n?n(e[r],t[r]):e[r]===t[r]))return!1;return!0}const ne=["sun","mon","tue","wed","thu","fri","sat"];function re(e,t){let n=pe(e);return n[2]+=t,ge(n)}function ie(e,t){let n=pe(e);return n[6]+=t,ge(n)}function se(e,t){return(t.valueOf()-e.valueOf())/864e5}function oe(e,t){let n=ce(e),r=ce(t);return{years:0,months:0,days:Math.round(se(n,r)),milliseconds:t.valueOf()-r.valueOf()-(e.valueOf()-n.valueOf())}}function ae(e,t){let n=le(e,t);return null!==n&&n%7==0?n/7:null}function le(e,t){return ve(e)===ve(t)?Math.round(se(e,t)):null}function ce(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()])}function de(e,t,n,r){let i=ge([t,0,1+ue(t,n,r)]),s=ce(e),o=Math.round(se(i,s));return Math.floor(o/7)+1}function ue(e,t,n){let r=7+t-n;return-(7+ge([e,0,r]).getUTCDay()-t)%7+r-1}function he(e){return[e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()]}function fe(e){return new Date(e[0],e[1]||0,null==e[2]?1:e[2],e[3]||0,e[4]||0,e[5]||0)}function pe(e){return[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()]}function ge(e){return 1===e.length&&(e=e.concat([0])),new Date(Date.UTC(...e))}function me(e){return!isNaN(e.valueOf())}function ve(e){return 1e3*e.getUTCHours()*60*60+1e3*e.getUTCMinutes()*60+1e3*e.getUTCSeconds()+e.getUTCMilliseconds()}function ye(e,t,n=!1){let r=e.toISOString();return r=r.replace(".000",""),n&&(r=r.replace("T00:00:00Z","")),r.length>10&&(null==t?r=r.replace("Z",""):0!==t&&(r=r.replace("Z",be(t,!0)))),r}function _e(e){return e.toISOString().replace(/T.*$/,"")}function be(e,t=!1){let n=e<0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),s=Math.round(r%60);return t?`${n+N(i,2)}:${N(s,2)}`:`GMT${n}${i}${s?`:${N(s,2)}`:""}`}function Ee(e,t,n){let r,i;return function(...s){if(r){if(!te(r,s)){n&&n(i);let r=e.apply(this,s);t&&t(r,i)||(i=r)}}else i=e.apply(this,s);return r=s,i}}function Se(e,t,n){let r,i;return s=>{if(r){if(!X(r,s)){n&&n(i);let r=e.call(this,s);t&&t(r,i)||(i=r)}}else i=e.call(this,s);return r=s,i}}const De={week:3,separator:0,omitZeroMinute:0,meridiem:0,omitCommas:0},Ae={timeZoneName:7,era:6,year:5,month:4,day:2,weekday:2,hour:1,minute:1,second:1},Ce=/\s*([ap])\.?m\.?/i,we=/,/g,Te=/\s+/g,Re=/\u200e/g,Oe=/UTC|GMT/;class xe{constructor(e){let t={},n={},r=0;for(let i in e)i in De?(n[i]=e[i],r=Math.max(De[i],r)):(t[i]=e[i],i in Ae&&(r=Math.max(Ae[i],r)));this.standardDateProps=t,this.extendedSettings=n,this.severity=r,this.buildFormattingFunc=Ee(ke)}format(e,t){return this.buildFormattingFunc(this.standardDateProps,this.extendedSettings,t)(e)}formatRange(e,t,n,r){let{standardDateProps:i,extendedSettings:s}=this,o=(a=e.marker,l=t.marker,(c=n.calendarSystem).getMarkerYear(a)!==c.getMarkerYear(l)?5:c.getMarkerMonth(a)!==c.getMarkerMonth(l)?4:c.getMarkerDay(a)!==c.getMarkerDay(l)?2:ve(a)!==ve(l)?1:0);var a,l,c;if(!o)return this.format(e,n);let d=o;!(d>1)||"numeric"!==i.year&&"2-digit"!==i.year||"numeric"!==i.month&&"2-digit"!==i.month||"numeric"!==i.day&&"2-digit"!==i.day||(d=1);let u=this.format(e,n),h=this.format(t,n);if(u===h)return u;let f=ke(function(e,t){let n={};for(let r in e)(!(r in Ae)||Ae[r]<=t)&&(n[r]=e[r]);return n}(i,d),s,n),p=f(e),g=f(t),m=function(e,t,n,r){let i=0;for(;i<e.length;){let s=e.indexOf(t,i);if(-1===s)break;let o=e.substr(0,s);i=s+t.length;let a=e.substr(i),l=0;for(;l<n.length;){let e=n.indexOf(r,l);if(-1===e)break;let t=n.substr(0,e);l=e+r.length;let i=n.substr(l);if(o===t&&a===i)return{before:o,after:a}}}return null}(u,p,h,g),v=s.separator||r||n.defaultSeparator||"";return m?m.before+p+v+g+m.after:u+v+h}getLargestUnit(){switch(this.severity){case 7:case 6:case 5:return"year";case 4:return"month";case 3:return"week";case 2:return"day";default:return"time"}}}function ke(e,t,n){let r=Object.keys(e).length;return 1===r&&"short"===e.timeZoneName?e=>be(e.timeZoneOffset):0===r&&t.week?e=>function(e,t,n,r,i){let s=[];return"long"===i?s.push(n):"short"!==i&&"narrow"!==i||s.push(t),"long"!==i&&"short"!==i||s.push(" "),s.push(r.simpleNumberFormat.format(e)),"rtl"===r.options.direction&&s.reverse(),s.join("")}(n.computeWeekNumber(e.marker),n.weekText,n.weekTextLong,n.locale,t.week):function(e,t,n){e=Object.assign({},e),t=Object.assign({},t),function(e,t){e.timeZoneName&&(e.hour||(e.hour="2-digit"),e.minute||(e.minute="2-digit")),"long"===e.timeZoneName&&(e.timeZoneName="short"),t.omitZeroMinute&&(e.second||e.millisecond)&&delete t.omitZeroMinute}(e,t),e.timeZone="UTC";let r,i=new Intl.DateTimeFormat(n.locale.codes,e);if(t.omitZeroMinute){let t=Object.assign({},e);delete t.minute,r=new Intl.DateTimeFormat(n.locale.codes,t)}return s=>{let o,{marker:a}=s;return o=r&&!a.getUTCMinutes()?r:i,function(e,t,n,r,i){return e=e.replace(Re,""),"short"===n.timeZoneName&&(e=function(e,t){let n=!1;return e=e.replace(Oe,(()=>(n=!0,t))),n||(e+=` ${t}`),e}(e,"UTC"===i.timeZone||null==t.timeZoneOffset?"UTC":be(t.timeZoneOffset))),r.omitCommas&&(e=e.replace(we,"").trim()),r.omitZeroMinute&&(e=e.replace(":00","")),!1===r.meridiem?e=e.replace(Ce,"").trim():"narrow"===r.meridiem?e=e.replace(Ce,((e,t)=>t.toLocaleLowerCase())):"short"===r.meridiem?e=e.replace(Ce,((e,t)=>`${t.toLocaleLowerCase()}m`)):"lowercase"===r.meridiem&&(e=e.replace(Ce,(e=>e.toLocaleLowerCase()))),e=(e=e.replace(Te," ")).trim()}(o.format(a),s,e,t,n)}}(e,t,n)}function Me(e,t){let n=t.markerToArray(e.marker);return{marker:e.marker,timeZoneOffset:e.timeZoneOffset,array:n,year:n[0],month:n[1],day:n[2],hour:n[3],minute:n[4],second:n[5],millisecond:n[6]}}function Ie(e,t,n,r){let i=Me(e,n.calendarSystem);return{date:i,start:i,end:t?Me(t,n.calendarSystem):null,timeZone:n.timeZone,localeCodes:n.locale.codes,defaultSeparator:r||n.defaultSeparator}}class Ne{constructor(e){this.cmdStr=e}format(e,t,n){return t.cmdFormatter(this.cmdStr,Ie(e,null,t,n))}formatRange(e,t,n,r){return n.cmdFormatter(this.cmdStr,Ie(e,t,n,r))}}class Pe{constructor(e){this.func=e}format(e,t,n){return this.func(Ie(e,null,t,n))}formatRange(e,t,n,r){return this.func(Ie(e,t,n,r))}}function He(e){return"object"==typeof e&&e?new xe(e):"string"==typeof e?new Ne(e):"function"==typeof e?new Pe(e):null}const je={navLinkDayClick:Ge,navLinkWeekClick:Ge,duration:U,bootstrapFontAwesome:Ge,buttonIcons:Ge,customButtons:Ge,defaultAllDayEventDuration:U,defaultTimedEventDuration:U,nextDayThreshold:U,scrollTime:U,scrollTimeReset:Boolean,slotMinTime:U,slotMaxTime:U,dayPopoverFormat:He,slotDuration:U,snapDuration:U,headerToolbar:Ge,footerToolbar:Ge,defaultRangeSeparator:String,titleRangeSeparator:String,forceEventDuration:Boolean,dayHeaders:Boolean,dayHeaderFormat:He,dayHeaderClassNames:Ge,dayHeaderContent:Ge,dayHeaderDidMount:Ge,dayHeaderWillUnmount:Ge,dayCellClassNames:Ge,dayCellContent:Ge,dayCellDidMount:Ge,dayCellWillUnmount:Ge,initialView:String,aspectRatio:Number,weekends:Boolean,weekNumberCalculation:Ge,weekNumbers:Boolean,weekNumberClassNames:Ge,weekNumberContent:Ge,weekNumberDidMount:Ge,weekNumberWillUnmount:Ge,editable:Boolean,viewClassNames:Ge,viewDidMount:Ge,viewWillUnmount:Ge,nowIndicator:Boolean,nowIndicatorClassNames:Ge,nowIndicatorContent:Ge,nowIndicatorDidMount:Ge,nowIndicatorWillUnmount:Ge,showNonCurrentDates:Boolean,lazyFetching:Boolean,startParam:String,endParam:String,timeZoneParam:String,timeZone:String,locales:Ge,locale:Ge,themeSystem:String,dragRevertDuration:Number,dragScroll:Boolean,allDayMaintainDuration:Boolean,unselectAuto:Boolean,dropAccept:Ge,eventOrder:x,eventOrderStrict:Boolean,handleWindowResize:Boolean,windowResizeDelay:Number,longPressDelay:Number,eventDragMinDistance:Number,expandRows:Boolean,height:Ge,contentHeight:Ge,direction:String,weekNumberFormat:He,eventResizableFromStart:Boolean,displayEventTime:Boolean,displayEventEnd:Boolean,weekText:String,weekTextLong:String,progressiveEventRendering:Boolean,businessHours:Ge,initialDate:Ge,now:Ge,eventDataTransform:Ge,stickyHeaderDates:Ge,stickyFooterScrollbar:Ge,viewHeight:Ge,defaultAllDay:Boolean,eventSourceFailure:Ge,eventSourceSuccess:Ge,eventDisplay:String,eventStartEditable:Boolean,eventDurationEditable:Boolean,eventOverlap:Ge,eventConstraint:Ge,eventAllow:Ge,eventBackgroundColor:String,eventBorderColor:String,eventTextColor:String,eventColor:String,eventClassNames:Ge,eventContent:Ge,eventDidMount:Ge,eventWillUnmount:Ge,selectConstraint:Ge,selectOverlap:Ge,selectAllow:Ge,droppable:Boolean,unselectCancel:String,slotLabelFormat:Ge,slotLaneClassNames:Ge,slotLaneContent:Ge,slotLaneDidMount:Ge,slotLaneWillUnmount:Ge,slotLabelClassNames:Ge,slotLabelContent:Ge,slotLabelDidMount:Ge,slotLabelWillUnmount:Ge,dayMaxEvents:Ge,dayMaxEventRows:Ge,dayMinWidth:Number,slotLabelInterval:U,allDayText:String,allDayClassNames:Ge,allDayContent:Ge,allDayDidMount:Ge,allDayWillUnmount:Ge,slotMinWidth:Number,navLinks:Boolean,eventTimeFormat:He,rerenderDelay:Number,moreLinkText:Ge,moreLinkHint:Ge,selectMinDistance:Number,selectable:Boolean,selectLongPressDelay:Number,eventLongPressDelay:Number,selectMirror:Boolean,eventMaxStack:Number,eventMinHeight:Number,eventMinWidth:Number,eventShortHeight:Number,slotEventOverlap:Boolean,plugins:Ge,firstDay:Number,dayCount:Number,dateAlignment:String,dateIncrement:U,hiddenDays:Ge,fixedWeekCount:Boolean,validRange:Ge,visibleRange:Ge,titleFormat:Ge,eventInteractive:Boolean,noEventsText:String,viewHint:Ge,navLinkHint:Ge,closeHint:String,timeHint:String,eventHint:String,moreLinkClick:Ge,moreLinkClassNames:Ge,moreLinkContent:Ge,moreLinkDidMount:Ge,moreLinkWillUnmount:Ge,monthStartFormat:He,handleCustomRendering:Ge,customRenderingMetaMap:Ge,customRenderingReplacesEl:Boolean},Be={datesSet:Ge,eventsSet:Ge,eventAdd:Ge,eventChange:Ge,eventRemove:Ge,windowResize:Ge,eventClick:Ge,eventMouseEnter:Ge,eventMouseLeave:Ge,select:Ge,unselect:Ge,loading:Ge,_unmount:Ge,_beforeprint:Ge,_afterprint:Ge,_noEventDrop:Ge,_noEventResize:Ge,_resize:Ge,_scrollRequest:Ge},Le={buttonText:Ge,buttonHints:Ge,views:Ge,plugins:Ge,initialEvents:Ge,events:Ge,eventSources:Ge},Ue={headerToolbar:Fe,footerToolbar:Fe,buttonText:Fe,buttonHints:Fe,buttonIcons:Fe,dateIncrement:Fe,plugins:ze,events:ze,eventSources:ze,resources:ze};function Fe(e,t){return"object"==typeof e&&"object"==typeof t&&e&&t?X(e,t):e===t}function ze(e,t){return Array.isArray(e)&&Array.isArray(t)?te(e,t):e===t}const Ve={type:String,component:Ge,buttonText:String,buttonTextKey:String,dateProfileGeneratorClass:Ge,usesMinMaxTime:Boolean,classNames:Ge,content:Ge,didMount:Ge,willUnmount:Ge};function We(e,t){let n={},r={};for(let r in t)r in e&&(n[r]=t[r](e[r]));for(let n in e)n in t||(r[n]=e[n]);return{refined:n,extra:r}}function Ge(e){return e}function qe(e,t,n,r){return{instanceId:O(),defId:e,range:t,forcedStartTzo:null==n?null:n,forcedEndTzo:null==r?null:r}}function Ye(e,t,n){let{dateEnv:r,pluginHooks:i,options:s}=n,{defs:o,instances:a}=e;a=Y(a,(e=>!o[e.defId].recurringDef));for(let e in o){let n=o[e];if(n.recurringDef){let{duration:o}=n.recurringDef;o||(o=n.allDay?s.defaultAllDayEventDuration:s.defaultTimedEventDuration);let l=Qe(n,o,t,r,i.recurringTypes);for(let t of l){let n=qe(e,{start:t,end:r.add(t,o)});a[n.instanceId]=n}}}return{defs:o,instances:a}}function Qe(e,t,n,r,i){let s=i[e.recurringDef.typeId].expand(e.recurringDef.typeData,{start:r.subtract(n.start,t),end:n.end},r);return e.allDay&&(s=s.map(ce)),s}function Ze(e,t,n,r,i,s){let o={defs:{},instances:{}},a=ut(n);for(let l of e){let e=ct(l,t,n,r,a,i,s);e&&Xe(e,o)}return o}function Xe(e,t={defs:{},instances:{}}){return t.defs[e.def.defId]=e.def,e.instance&&(t.instances[e.instance.instanceId]=e.instance),t}function Je(e,t){let n=e.instances[t];if(n){let t=e.defs[n.defId],r=Ke(e,(e=>{return n=t,r=e,Boolean(n.groupId&&n.groupId===r.groupId);var n,r}));return r.defs[t.defId]=t,r.instances[n.instanceId]=n,r}return{defs:{},instances:{}}}function $e(e,t){return{defs:Object.assign(Object.assign({},e.defs),t.defs),instances:Object.assign(Object.assign({},e.instances),t.instances)}}function Ke(e,t){let n=Y(e.defs,t),r=Y(e.instances,(e=>n[e.defId]));return{defs:n,instances:r}}function et(e){return Array.isArray(e)?e:"string"==typeof e?e.split(/\s+/):[]}const tt={display:String,editable:Boolean,startEditable:Boolean,durationEditable:Boolean,constraint:Ge,overlap:Ge,allow:Ge,className:et,classNames:et,color:String,backgroundColor:String,borderColor:String,textColor:String},nt={display:null,startEditable:null,durationEditable:null,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]};function rt(e,t){let n=function(e,t){return Array.isArray(e)?Ze(e,null,t,!0):"object"==typeof e&&e?Ze([e],null,t,!0):null!=e?String(e):null}(e.constraint,t);return{display:e.display||null,startEditable:null!=e.startEditable?e.startEditable:e.editable,durationEditable:null!=e.durationEditable?e.durationEditable:e.editable,constraints:null!=n?[n]:[],overlap:null!=e.overlap?e.overlap:null,allows:null!=e.allow?[e.allow]:[],backgroundColor:e.backgroundColor||e.color||"",borderColor:e.borderColor||e.color||"",textColor:e.textColor||"",classNames:(e.className||[]).concat(e.classNames||[])}}function it(e){return e.reduce(st,nt)}function st(e,t){return{display:null!=t.display?t.display:e.display,startEditable:null!=t.startEditable?t.startEditable:e.startEditable,durationEditable:null!=t.durationEditable?t.durationEditable:e.durationEditable,constraints:e.constraints.concat(t.constraints),overlap:"boolean"==typeof t.overlap?t.overlap:e.overlap,allows:e.allows.concat(t.allows),backgroundColor:t.backgroundColor||e.backgroundColor,borderColor:t.borderColor||e.borderColor,textColor:t.textColor||e.textColor,classNames:e.classNames.concat(t.classNames)}}const ot={id:String,groupId:String,title:String,url:String,interactive:Boolean},at={start:Ge,end:Ge,date:Ge,allDay:Boolean},lt=Object.assign(Object.assign(Object.assign({},ot),at),{extendedProps:Ge});function ct(e,t,n,r,i=ut(n),s,o){let{refined:a,extra:l}=dt(e,n,i),c=function(e,t){let n=null;return e&&(n=e.defaultAllDay),null==n&&(n=t.options.defaultAllDay),n}(t,n),d=function(e,t,n,r){for(let i=0;i<r.length;i+=1){let s=r[i].parse(e,n);if(s){let{allDay:n}=e;return null==n&&(n=t,null==n&&(n=s.allDayGuess,null==n&&(n=!1))),{allDay:n,duration:s.duration,typeData:s.typeData,typeId:i}}}return null}(a,c,n.dateEnv,n.pluginHooks.recurringTypes);if(d){let e=ht(a,l,t?t.sourceId:"",d.allDay,Boolean(d.duration),n,s);return e.recurringDef={typeId:d.typeId,typeData:d.typeData,duration:d.duration},{def:e,instance:null}}let u=function(e,t,n,r){let i,s,{allDay:o}=e,a=null,l=!1,c=null,d=null!=e.start?e.start:e.date;if(i=n.dateEnv.createMarkerMeta(d),i)a=i.marker;else if(!r)return null;return null!=e.end&&(s=n.dateEnv.createMarkerMeta(e.end)),null==o&&(o=null!=t?t:(!i||i.isTimeUnspecified)&&(!s||s.isTimeUnspecified)),o&&a&&(a=ce(a)),s&&(c=s.marker,o&&(c=ce(c)),a&&c<=a&&(c=null)),c?l=!0:r||(l=n.options.forceEventDuration||!1,c=n.dateEnv.add(a,o?n.options.defaultAllDayEventDuration:n.options.defaultTimedEventDuration)),{allDay:o,hasEnd:l,range:{start:a,end:c},forcedStartTzo:i?i.forcedTzo:null,forcedEndTzo:s?s.forcedTzo:null}}(a,c,n,r);if(u){let e=ht(a,l,t?t.sourceId:"",u.allDay,u.hasEnd,n,s),r=qe(e.defId,u.range,u.forcedStartTzo,u.forcedEndTzo);return o&&e.publicId&&o[e.publicId]&&(r.instanceId=o[e.publicId]),{def:e,instance:r}}return null}function dt(e,t,n=ut(t)){return We(e,n)}function ut(e){return Object.assign(Object.assign(Object.assign({},tt),lt),e.pluginHooks.eventRefiners)}function ht(e,t,n,r,i,s,o){let a={title:e.title||"",groupId:e.groupId||"",publicId:e.id||"",url:e.url||"",recurringDef:null,defId:(o&&e.id?o[e.id]:"")||O(),sourceId:n,allDay:r,hasEnd:i,interactive:e.interactive,ui:rt(e,s),extendedProps:Object.assign(Object.assign({},e.extendedProps||{}),t)};for(let t of s.pluginHooks.eventDefMemberAdders)Object.assign(a,t(e));return Object.freeze(a.ui.classNames),Object.freeze(a.extendedProps),a}const ft={startTime:"09:00",endTime:"17:00",daysOfWeek:[1,2,3,4,5],display:"inverse-background",classNames:"fc-non-business",groupId:"_businessHours"};function pt(e){let t=Math.floor(se(e.start,e.end))||1,n=ce(e.start);return{start:n,end:re(n,t)}}function gt(e,t=U(0)){let n=null,r=null;if(e.end){r=ce(e.end);let n=e.end.valueOf()-r.valueOf();n&&n>=V(t)&&(r=re(r,1))}return e.start&&(n=ce(e.start),r&&r<=n&&(r=re(n,1))),{start:n,end:r}}function mt(e,t,n,r){return"year"===r?U(n.diffWholeYears(e,t),"year"):"month"===r?U(n.diffWholeMonths(e,t),"month"):oe(e,t)}function vt(e,t){let n={left:Math.max(e.left,t.left),right:Math.min(e.right,t.right),top:Math.max(e.top,t.top),bottom:Math.min(e.bottom,t.bottom)};return n.left<n.right&&n.top<n.bottom&&n}let yt;function _t(){return null==yt&&(yt=function(){if("undefined"==typeof document)return!0;let e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.innerHTML="<table><tr><td><div></div></td></tr></table>",e.querySelector("table").style.height="100px",e.querySelector("div").style.height="100%",document.body.appendChild(e);let t=e.querySelector("div").offsetHeight>0;return document.body.removeChild(e),t}()),yt}const bt={defs:{},instances:{}};function Et(e,t,n){let r=[];e&&r.push(e),t&&r.push(t);let i={"":it(r)};return n&&Object.assign(i,n),i}function St(e,t){let n,r,i=[],{start:s}=t;for(e.sort(Dt),n=0;n<e.length;n+=1)r=e[n],r.start>s&&i.push({start:s,end:r.start}),r.end>s&&(s=r.end);return s<t.end&&i.push({start:s,end:t.end}),i}function Dt(e,t){return e.start.valueOf()-t.start.valueOf()}function At(e,t){let{start:n,end:r}=e,i=null;return null!==t.start&&(n=null===n?t.start:new Date(Math.max(n.valueOf(),t.start.valueOf()))),null!=t.end&&(r=null===r?t.end:new Date(Math.min(r.valueOf(),t.end.valueOf()))),(null===n||null===r||n<r)&&(i={start:n,end:r}),i}function Ct(e,t){return(null===e.start?null:e.start.valueOf())===(null===t.start?null:t.start.valueOf())&&(null===e.end?null:e.end.valueOf())===(null===t.end?null:t.end.valueOf())}function wt(e,t){return(null===e.end||null===t.start||e.end>t.start)&&(null===e.start||null===t.end||e.start<t.end)}function Tt(e,t){return(null===e.start||null!==t.start&&t.start>=e.start)&&(null===e.end||null!==t.end&&t.end<=e.end)}function Rt(e,t){return(null===e.start||t>=e.start)&&(null===e.end||t<e.end)}function Ot(e,t,n,r){return{dow:e.getUTCDay(),isDisabled:Boolean(r&&!Rt(r.activeRange,e)),isOther:Boolean(r&&!Rt(r.currentRange,e)),isToday:Boolean(t&&Rt(t,e)),isPast:Boolean(n?e<n:!!t&&e<t.start),isFuture:Boolean(n?e>n:!!t&&e>=t.end)}}function xt(e,t){let n=["fc-day",`fc-day-${ne[e.dow]}`];return e.isDisabled?n.push("fc-day-disabled"):(e.isToday&&(n.push("fc-day-today"),n.push(t.getClass("today"))),e.isPast&&n.push("fc-day-past"),e.isFuture&&n.push("fc-day-future"),e.isOther&&n.push("fc-day-other")),n}const kt=He({year:"numeric",month:"long",day:"numeric"}),Mt=He({week:"long"});function It(e,t,n="day",r=!0){const{dateEnv:i,options:s,calendarApi:o}=e;let a=i.format(t,"week"===n?Mt:kt);if(s.navLinks){let e=i.toDate(t);const l=e=>{let r="day"===n?s.navLinkDayClick:"week"===n?s.navLinkWeekClick:null;"function"==typeof r?r.call(o,i.toDate(t),e):("string"==typeof r&&(n=r),o.zoomTo(t,n))};return Object.assign({title:P(s.navLinkHint,[a,e],a),"data-navlink":""},r?w(l):{onClick:l})}return{"aria-label":a}}let Nt,Pt=null;function Ht(){return null===Pt&&(Pt=function(){let e=document.createElement("div");y(e,{position:"absolute",top:-1e3,left:0,border:0,padding:0,overflow:"scroll",direction:"rtl"}),e.innerHTML="<div></div>",document.body.appendChild(e);let t=e.firstChild.getBoundingClientRect().left>e.getBoundingClientRect().left;return f(e),t}()),Pt}function jt(){return Nt||(Nt=function(){let e=document.createElement("div");e.style.overflow="scroll",e.style.position="absolute",e.style.top="-9999px",e.style.left="-9999px",document.body.appendChild(e);let t=Bt(e);return document.body.removeChild(e),t}()),Nt}function Bt(e){return{x:e.offsetHeight-e.clientHeight,y:e.offsetWidth-e.clientWidth}}function Lt(e,t=!1){let n=window.getComputedStyle(e),r=parseInt(n.borderLeftWidth,10)||0,i=parseInt(n.borderRightWidth,10)||0,s=parseInt(n.borderTopWidth,10)||0,o=parseInt(n.borderBottomWidth,10)||0,a=Bt(e),l=a.y-r-i,c={borderLeft:r,borderRight:i,borderTop:s,borderBottom:o,scrollbarBottom:a.x-s-o,scrollbarLeft:0,scrollbarRight:0};return Ht()&&"rtl"===n.direction?c.scrollbarLeft=l:c.scrollbarRight=l,t&&(c.paddingLeft=parseInt(n.paddingLeft,10)||0,c.paddingRight=parseInt(n.paddingRight,10)||0,c.paddingTop=parseInt(n.paddingTop,10)||0,c.paddingBottom=parseInt(n.paddingBottom,10)||0),c}function Ut(e){let t=e.getBoundingClientRect();return{left:t.left+window.pageXOffset,top:t.top+window.pageYOffset,right:t.right+window.pageXOffset,bottom:t.bottom+window.pageYOffset}}function Ft(e){let t=[];for(;e instanceof HTMLElement;){let n=window.getComputedStyle(e);if("fixed"===n.position)break;/(auto|scroll)/.test(n.overflow+n.overflowY+n.overflowX)&&t.push(e),e=e.parentNode}return t}class zt{constructor(){this.handlers={},this.thisContext=null}setThisContext(e){this.thisContext=e}setOptions(e){this.options=e}on(e,t){!function(e,t,n){(e[t]||(e[t]=[])).push(n)}(this.handlers,e,t)}off(e,t){!function(e,t,n){n?e[t]&&(e[t]=e[t].filter((e=>e!==n))):delete e[t]}(this.handlers,e,t)}trigger(e,...t){let n=this.handlers[e]||[],r=this.options&&this.options[e],i=[].concat(r||[],n);for(let e of i)e.apply(this.thisContext,t)}hasHandlers(e){return Boolean(this.handlers[e]&&this.handlers[e].length||this.options&&this.options[e])}}function Vt(e,t){const n=e.length;if(n!==t.length)return!1;for(let r=0;r<n;r++)if(Math.round(e[r])!==Math.round(t[r]))return!1;return!0}class Wt{getMaxScrollTop(){return this.getScrollHeight()-this.getClientHeight()}getMaxScrollLeft(){return this.getScrollWidth()-this.getClientWidth()}canScrollVertically(){return this.getMaxScrollTop()>0}canScrollHorizontally(){return this.getMaxScrollLeft()>0}canScrollUp(){return this.getScrollTop()>0}canScrollDown(){return this.getScrollTop()<this.getMaxScrollTop()}canScrollLeft(){return this.getScrollLeft()>0}canScrollRight(){return this.getScrollLeft()<this.getMaxScrollLeft()}}class Gt{constructor(e){this.iconOverrideOption&&this.setIconOverride(e[this.iconOverrideOption])}setIconOverride(e){let t,n;if("object"==typeof e&&e){for(n in t=Object.assign({},this.iconClasses),e)t[n]=this.applyIconOverridePrefix(e[n]);this.iconClasses=t}else!1===e&&(this.iconClasses={})}applyIconOverridePrefix(e){let t=this.iconOverridePrefix;return t&&0!==e.indexOf(t)&&(e=t+e),e}getClass(e){return this.classes[e]||""}getIconClass(e,t){let n;return n=t&&this.rtlIconClasses&&this.rtlIconClasses[e]||this.iconClasses[e],n?`${this.baseIconClass} ${n}`:""}getCustomButtonIconClass(e){let t;return this.iconOverrideCustomButtonOption&&(t=e[this.iconOverrideCustomButtonOption],t)?`${this.baseIconClass} ${this.applyIconOverridePrefix(t)}`:""}}Gt.prototype.classes={},Gt.prototype.iconClasses={},Gt.prototype.baseIconClass="",Gt.prototype.iconOverridePrefix="";class qt extends o.Component{render(){return o.createElement("div",{})}componentDidMount(){this.setState({})}}function Yt(e){let t=o.createContext(e),n=t.Provider;return t.Provider=function(){let e=!this.getChildContext,t=n.apply(this,arguments);if(e){let e=[];this.shouldComponentUpdate=t=>{this.props.value!==t.value&&e.forEach((e=>{e.context=t.value,e.forceUpdate()}))},this.sub=t=>{e.push(t);let n=t.componentWillUnmount;t.componentWillUnmount=()=>{e.splice(e.indexOf(t),1),n&&n.call(t)}}}return t},t}class Qt{constructor(e,t,n,r){this.execFunc=e,this.emitter=t,this.scrollTime=n,this.scrollTimeReset=r,this.handleScrollRequest=e=>{this.queuedRequest=Object.assign({},this.queuedRequest||{},e),this.drain()},t.on("_scrollRequest",this.handleScrollRequest),this.fireInitialScroll()}detach(){this.emitter.off("_scrollRequest",this.handleScrollRequest)}update(e){e&&this.scrollTimeReset?this.fireInitialScroll():this.drain()}fireInitialScroll(){this.handleScrollRequest({time:this.scrollTime})}drain(){this.queuedRequest&&this.execFunc(this.queuedRequest)&&(this.queuedRequest=null)}}const Zt=Yt({});class Xt extends r.Component{shouldComponentUpdate(e,t){return this.debug&&console.log($(e,this.props),$(t,this.state)),!K(this.props,e,this.propEquality)||!K(this.state,t,this.stateEquality)}safeSetState(e){K(this.state,Object.assign(Object.assign({},this.state),e),this.stateEquality)||this.setState(e)}}Xt.addPropsEquality=function(e){let t=Object.create(this.prototype.propEquality);Object.assign(t,e),this.prototype.propEquality=t},Xt.addStateEquality=function(e){let t=Object.create(this.prototype.stateEquality);Object.assign(t,e),this.prototype.stateEquality=t},Xt.contextType=Zt,Xt.prototype.propEquality={},Xt.prototype.stateEquality={};class Jt extends Xt{}function $t(e,t){"function"==typeof e?e(t):e&&(e.current=t)}Jt.contextType=Zt;class Kt extends Jt{constructor(){super(...arguments),this.uid=O()}prepareHits(){}queryHit(e,t,n,r){return null}isValidSegDownEl(e){return!this.props.eventDrag&&!this.props.eventResize&&!p(e,".fc-event-mirror")}isValidDateDownEl(e){return!(p(e,".fc-event:not(.fc-bg-event)")||p(e,".fc-more-link")||p(e,"a[data-navlink]")||p(e,".fc-popover"))}}function en(e,t){return"function"==typeof e&&(e=e()),null==e?t.createNowMarker():t.createMarker(e)}function tn(e,t,n){n.emitter.trigger("select",Object.assign(Object.assign({},nn(e,n)),{jsEvent:t?t.origEvent:null,view:n.viewApi||n.calendarApi.view}))}function nn(e,t){let n={};for(let r of t.pluginHooks.dateSpanTransforms)Object.assign(n,r(e,t));var r,i;return Object.assign(n,(r=e,i=t.dateEnv,Object.assign(Object.assign({},An(r.range,i,r.allDay)),{allDay:r.allDay}))),n}function rn(e,t,n){let{dateEnv:r,options:i}=n,s=t;return e?(s=ce(s),s=r.add(s,i.defaultAllDayEventDuration)):s=r.add(s,i.defaultTimedEventDuration),s}function sn(e,t,n,r){let i=pn(e.defs,t),s={defs:{},instances:{}};for(let t in e.defs){let o=e.defs[t];s.defs[t]=on(o,i[t],n,r)}for(let t in e.instances){let o=e.instances[t],a=s.defs[o.defId];s.instances[t]=an(o,a,i[o.defId],n,r)}return s}function on(e,t,n,r){let i=n.standardProps||{};null==i.hasEnd&&t.durationEditable&&(n.startDelta||n.endDelta)&&(i.hasEnd=!0);let s=Object.assign(Object.assign(Object.assign({},e),i),{ui:Object.assign(Object.assign({},e.ui),i.ui)});n.extendedProps&&(s.extendedProps=Object.assign(Object.assign({},s.extendedProps),n.extendedProps));for(let e of r.pluginHooks.eventDefMutationAppliers)e(s,n,r);return!s.hasEnd&&r.options.forceEventDuration&&(s.hasEnd=!0),s}function an(e,t,n,r,i){let{dateEnv:s}=i,o=r.standardProps&&!0===r.standardProps.allDay,a=r.standardProps&&!1===r.standardProps.hasEnd,l=Object.assign({},e);return o&&(l.range=pt(l.range)),r.datesDelta&&n.startEditable&&(l.range={start:s.add(l.range.start,r.datesDelta),end:s.add(l.range.end,r.datesDelta)}),r.startDelta&&n.durationEditable&&(l.range={start:s.add(l.range.start,r.startDelta),end:l.range.end}),r.endDelta&&n.durationEditable&&(l.range={start:l.range.start,end:s.add(l.range.end,r.endDelta)}),a&&(l.range={start:l.range.start,end:rn(t.allDay,l.range.start,i)}),t.allDay&&(l.range={start:ce(l.range.start),end:ce(l.range.end)}),l.range.end<l.range.start&&(l.range.end=rn(t.allDay,l.range.start,i)),l}class ln{constructor(e,t){this.context=e,this.internalEventSource=t}remove(){this.context.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:this.internalEventSource.sourceId})}refetch(){this.context.dispatch({type:"FETCH_EVENT_SOURCES",sourceIds:[this.internalEventSource.sourceId],isRefetch:!0})}get id(){return this.internalEventSource.publicId}get url(){return this.internalEventSource.meta.url}get format(){return this.internalEventSource.meta.format}}class cn{constructor(e,t,n){this._context=e,this._def=t,this._instance=n||null}setProp(e,t){if(e in at)console.warn("Could not set date-related prop 'name'. Use one of the date-related methods instead.");else if("id"===e)t=ot[e](t),this.mutate({standardProps:{publicId:t}});else if(e in ot)t=ot[e](t),this.mutate({standardProps:{[e]:t}});else if(e in tt){let n=tt[e](t);n="color"===e?{backgroundColor:t,borderColor:t}:"editable"===e?{startEditable:t,durationEditable:t}:{[e]:t},this.mutate({standardProps:{ui:n}})}else console.warn(`Could not set prop '${e}'. Use setExtendedProp instead.`)}setExtendedProp(e,t){this.mutate({extendedProps:{[e]:t}})}setStart(e,t={}){let{dateEnv:n}=this._context,r=n.createMarker(e);if(r&&this._instance){let e=mt(this._instance.range.start,r,n,t.granularity);t.maintainDuration?this.mutate({datesDelta:e}):this.mutate({startDelta:e})}}setEnd(e,t={}){let n,{dateEnv:r}=this._context;if((null==e||(n=r.createMarker(e),n))&&this._instance)if(n){let e=mt(this._instance.range.end,n,r,t.granularity);this.mutate({endDelta:e})}else this.mutate({standardProps:{hasEnd:!1}})}setDates(e,t,n={}){let r,{dateEnv:i}=this._context,s={allDay:n.allDay},o=i.createMarker(e);var a,l;if(o&&(null==t||(r=i.createMarker(t),r))&&this._instance){let e=this._instance.range;!0===n.allDay&&(e=pt(e));let t=mt(e.start,o,i,n.granularity);if(r){let o=mt(e.end,r,i,n.granularity);l=o,(a=t).years===l.years&&a.months===l.months&&a.days===l.days&&a.milliseconds===l.milliseconds?this.mutate({datesDelta:t,standardProps:s}):this.mutate({startDelta:t,endDelta:o,standardProps:s})}else s.hasEnd=!1,this.mutate({datesDelta:t,standardProps:s})}}moveStart(e){let t=U(e);t&&this.mutate({startDelta:t})}moveEnd(e){let t=U(e);t&&this.mutate({endDelta:t})}moveDates(e){let t=U(e);t&&this.mutate({datesDelta:t})}setAllDay(e,t={}){let n={allDay:e},{maintainDuration:r}=t;null==r&&(r=this._context.options.allDayMaintainDuration),this._def.allDay!==e&&(n.hasEnd=r),this.mutate({standardProps:n})}formatRange(e){let{dateEnv:t}=this._context,n=this._instance,r=He(e);return this._def.hasEnd?t.formatRange(n.range.start,n.range.end,r,{forcedStartTzo:n.forcedStartTzo,forcedEndTzo:n.forcedEndTzo}):t.format(n.range.start,r,{forcedTzo:n.forcedStartTzo})}mutate(e){let t=this._instance;if(t){let n=this._def,r=this._context,{eventStore:i}=r.getCurrentData(),s=Je(i,t.instanceId);s=sn(s,{"":{display:"",startEditable:!0,durationEditable:!0,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]}},e,r);let o=new cn(r,n,t);this._def=s.defs[n.defId],this._instance=s.instances[t.instanceId],r.dispatch({type:"MERGE_EVENTS",eventStore:s}),r.emitter.trigger("eventChange",{oldEvent:o,event:this,relatedEvents:un(s,r,t),revert(){r.dispatch({type:"RESET_EVENTS",eventStore:i})}})}}remove(){let e=this._context,t=dn(this);e.dispatch({type:"REMOVE_EVENTS",eventStore:t}),e.emitter.trigger("eventRemove",{event:this,relatedEvents:[],revert(){e.dispatch({type:"MERGE_EVENTS",eventStore:t})}})}get source(){let{sourceId:e}=this._def;return e?new ln(this._context,this._context.getCurrentData().eventSources[e]):null}get start(){return this._instance?this._context.dateEnv.toDate(this._instance.range.start):null}get end(){return this._instance&&this._def.hasEnd?this._context.dateEnv.toDate(this._instance.range.end):null}get startStr(){let e=this._instance;return e?this._context.dateEnv.formatIso(e.range.start,{omitTime:this._def.allDay,forcedTzo:e.forcedStartTzo}):""}get endStr(){let e=this._instance;return e&&this._def.hasEnd?this._context.dateEnv.formatIso(e.range.end,{omitTime:this._def.allDay,forcedTzo:e.forcedEndTzo}):""}get id(){return this._def.publicId}get groupId(){return this._def.groupId}get allDay(){return this._def.allDay}get title(){return this._def.title}get url(){return this._def.url}get display(){return this._def.ui.display||"auto"}get startEditable(){return this._def.ui.startEditable}get durationEditable(){return this._def.ui.durationEditable}get constraint(){return this._def.ui.constraints[0]||null}get overlap(){return this._def.ui.overlap}get allow(){return this._def.ui.allows[0]||null}get backgroundColor(){return this._def.ui.backgroundColor}get borderColor(){return this._def.ui.borderColor}get textColor(){return this._def.ui.textColor}get classNames(){return this._def.ui.classNames}get extendedProps(){return this._def.extendedProps}toPlainObject(e={}){let t=this._def,{ui:n}=t,{startStr:r,endStr:i}=this,s={allDay:t.allDay};return t.title&&(s.title=t.title),r&&(s.start=r),i&&(s.end=i),t.publicId&&(s.id=t.publicId),t.groupId&&(s.groupId=t.groupId),t.url&&(s.url=t.url),n.display&&"auto"!==n.display&&(s.display=n.display),e.collapseColor&&n.backgroundColor&&n.backgroundColor===n.borderColor?s.color=n.backgroundColor:(n.backgroundColor&&(s.backgroundColor=n.backgroundColor),n.borderColor&&(s.borderColor=n.borderColor)),n.textColor&&(s.textColor=n.textColor),n.classNames.length&&(s.classNames=n.classNames),Object.keys(t.extendedProps).length&&(e.collapseExtendedProps?Object.assign(s,t.extendedProps):s.extendedProps=t.extendedProps),s}toJSON(){return this.toPlainObject()}}function dn(e){let t=e._def,n=e._instance;return{defs:{[t.defId]:t},instances:n?{[n.instanceId]:n}:{}}}function un(e,t,n){let{defs:r,instances:i}=e,s=[],o=n?n.instanceId:"";for(let e in i){let n=i[e],a=r[n.defId];n.instanceId!==o&&s.push(new cn(t,a,n))}return s}function hn(e,t,n,r){let i={},s={},o={},a=[],l=[],c=pn(e.defs,t);for(let t in e.defs){let n=e.defs[t];"inverse-background"===c[n.defId].display&&(n.groupId?(i[n.groupId]=[],o[n.groupId]||(o[n.groupId]=n)):s[t]=[])}for(let t in e.instances){let o=e.instances[t],d=e.defs[o.defId],u=c[d.defId],h=o.range,f=!d.allDay&&r?gt(h,r):h,p=At(f,n);p&&("inverse-background"===u.display?d.groupId?i[d.groupId].push(p):s[o.defId].push(p):"none"!==u.display&&("background"===u.display?a:l).push({def:d,ui:u,instance:o,range:p,isStart:f.start&&f.start.valueOf()===p.start.valueOf(),isEnd:f.end&&f.end.valueOf()===p.end.valueOf()}))}for(let e in i){let t=St(i[e],n);for(let n of t){let t=o[e],r=c[t.defId];a.push({def:t,ui:r,instance:null,range:n,isStart:!1,isEnd:!1})}}for(let t in s){let r=St(s[t],n);for(let n of r)a.push({def:e.defs[t],ui:c[t],instance:null,range:n,isStart:!1,isEnd:!1})}return{bg:a,fg:l}}function fn(e,t){e.fcSeg=t}function pn(e,t){return Q(e,(e=>gn(e,t)))}function gn(e,t){let n=[];return t[""]&&n.push(t[""]),t[e.defId]&&n.push(t[e.defId]),n.push(e.ui),it(n)}function mn(e){let{eventRange:t}=e,n=t.def,r=t.instance?t.instance.range:t.range,i=r.start?r.start.valueOf():0,s=r.end?r.end.valueOf():0;return Object.assign(Object.assign(Object.assign({},n.extendedProps),n),{id:n.publicId,start:i,end:s,duration:s-i,allDay:Number(n.allDay),_seg:e})}function vn(e,t){let{pluginHooks:n}=t,r=n.isDraggableTransformers,{def:i,ui:s}=e.eventRange,o=s.startEditable;for(let e of r)o=e(o,i,s,t);return o}function yn(e,t){return e.isStart&&e.eventRange.ui.durationEditable&&t.options.eventResizableFromStart}function _n(e,t){return e.isEnd&&e.eventRange.ui.durationEditable}function bn(e,t,n,r,i,s,o){let{dateEnv:a,options:l}=n,{displayEventTime:c,displayEventEnd:d}=l,u=e.eventRange.def,h=e.eventRange.instance;null==c&&(c=!1!==r),null==d&&(d=!1!==i);let f=h.range.start,p=h.range.end,g=s||e.start||e.eventRange.range.start,m=o||e.end||e.eventRange.range.end,v=ce(f).valueOf()===ce(g).valueOf(),y=ce(ie(p,-1)).valueOf()===ce(ie(m,-1)).valueOf();return c&&!u.allDay&&(v||y)?(g=v?f:g,m=y?p:m,d&&u.hasEnd?a.formatRange(g,m,t,{forcedStartTzo:s?null:h.forcedStartTzo,forcedEndTzo:o?null:h.forcedEndTzo}):a.format(g,t,{forcedTzo:s?null:h.forcedStartTzo})):""}function En(e){let t=["fc-event"];return e.isMirror&&t.push("fc-event-mirror"),e.isDraggable&&t.push("fc-event-draggable"),(e.isStartResizable||e.isEndResizable)&&t.push("fc-event-resizable"),e.isDragging&&t.push("fc-event-dragging"),e.isResizing&&t.push("fc-event-resizing"),e.isSelected&&t.push("fc-event-selected"),e.isStart&&t.push("fc-event-start"),e.isEnd&&t.push("fc-event-end"),e.isPast&&t.push("fc-event-past"),e.isToday&&t.push("fc-event-today"),e.isFuture&&t.push("fc-event-future"),t}function Sn(e,t){let{def:n,instance:r}=e.eventRange,{url:i}=n;if(i)return{href:i};let{emitter:s,options:o}=t,{eventInteractive:a}=o;return null==a&&(a=n.interactive,null==a&&(a=Boolean(s.hasHandlers("eventClick")))),a?T((e=>{s.trigger("eventClick",{el:e.target,event:new cn(t,n,r),jsEvent:e,view:t.viewApi})})):{}}const Dn={start:Ge,end:Ge,allDay:Boolean};function An(e,t,n){return{start:t.toDate(e.start),end:t.toDate(e.end),startStr:t.formatIso(e.start,{omitTime:n}),endStr:t.formatIso(e.end,{omitTime:n})}}let Cn={};var wn;wn=class{getMarkerYear(e){return e.getUTCFullYear()}getMarkerMonth(e){return e.getUTCMonth()}getMarkerDay(e){return e.getUTCDate()}arrayToMarker(e){return ge(e)}markerToArray(e){return pe(e)}},Cn.gregory=wn;const Tn=/^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;function Rn(e){let t=Tn.exec(e);if(t){let e=new Date(Date.UTC(Number(t[1]),t[3]?Number(t[3])-1:0,Number(t[5]||1),Number(t[7]||0),Number(t[8]||0),Number(t[10]||0),t[12]?1e3*Number(`0.${t[12]}`):0));if(me(e)){let n=null;return t[13]&&(n=("-"===t[15]?-1:1)*(60*Number(t[16]||0)+Number(t[18]||0))),{marker:e,isTimeUnspecified:!t[6],timeZoneOffset:n}}}return null}function On(e){return e.span.end}function xn(e){return e.index+":"+e.span.start}function kn(e,t){let n=Math.max(e.start,t.start),r=Math.min(e.end,t.end);return n<r?{start:n,end:r}:null}function Mn(e,t,n){e.splice(t,0,n)}function In(e,t,n){let r=0,i=e.length;if(!i||t<n(e[r]))return[0,0];if(t>n(e[i-1]))return[i,0];for(;r<i;){let s=Math.floor(r+(i-r)/2),o=n(e[s]);if(t<o)i=s;else{if(!(t>o))return[s,1];r=s+1}}return[r,0]}const Nn={startTime:U,duration:U,create:Boolean,sourceId:String};function Pn(e,t){return He(!e||t>10?{weekday:"short"}:t>1?{weekday:"short",month:"numeric",day:"numeric",omitCommas:!0}:{weekday:"long"})}const Hn="fc-col-header-cell";function jn(e){return e.text}class Bn extends Jt{constructor(){super(...arguments),this.id=O(),this.queuedDomNodes=[],this.currentDomNodes=[],this.handleEl=e=>{this.props.elRef&&$t(this.props.elRef,e)}}render(){const{props:e,context:t}=this,{options:n}=t,{customGenerator:i,defaultGenerator:s,renderProps:o}=e,a=Un(e);let l,c,d=!1,u=[];if(null!=i){const e="function"==typeof i?i(o,r.createElement):i;if(!0===e)d=!0;else{const t=e&&"object"==typeof e;t&&"html"in e?a.dangerouslySetInnerHTML={__html:e.html}:t&&"domNodes"in e?u=Array.prototype.slice.call(e.domNodes):t||"function"==typeof e?c=e:l=e}}else d=!Ln(e.generatorName,n);return d&&s&&(l=s(o)),this.queuedDomNodes=u,this.currentGeneratorMeta=c,r.createElement(e.elTag,a,l)}componentDidMount(){this.applyQueueudDomNodes(),this.triggerCustomRendering(!0)}componentDidUpdate(){this.applyQueueudDomNodes(),this.triggerCustomRendering(!0)}componentWillUnmount(){this.triggerCustomRendering(!1)}triggerCustomRendering(e){var t;const{props:n,context:r}=this,{handleCustomRendering:i,customRenderingMetaMap:s}=r.options;if(i){const r=null!==(t=this.currentGeneratorMeta)&&void 0!==t?t:null==s?void 0:s[n.generatorName];r&&i(Object.assign(Object.assign({id:this.id,isActive:e,containerEl:this.base,reportNewContainerEl:this.handleEl,generatorMeta:r},n),{elClasses:(n.elClasses||[]).filter(Fn)}))}}applyQueueudDomNodes(){const{queuedDomNodes:e,currentDomNodes:t}=this,n=this.base;if(!te(e,t)){t.forEach(f);for(let t of e)n.appendChild(t);this.currentDomNodes=e}}}function Ln(e,t){var n;return Boolean(t.handleCustomRendering&&e&&(null===(n=t.customRenderingMetaMap)||void 0===n?void 0:n[e]))}function Un(e,t){const n=Object.assign(Object.assign({},e.elAttrs),{ref:e.elRef});return(e.elClasses||t)&&(n.className=(e.elClasses||[]).concat(t||[]).concat(n.className||[]).filter(Boolean).join(" ")),e.elStyle&&(n.style=e.elStyle),n}function Fn(e){return Boolean(e)}Bn.addPropsEquality({elClasses:te,elStyle:X,elAttrs:function(e,t){const n=$(e,t);for(let e of n)if(!J.test(e))return!1;return!0},renderProps:X});const zn=Yt(0);class Vn extends r.Component{constructor(){super(...arguments),this.InnerContent=Wn.bind(void 0,this),this.handleRootEl=e=>{this.rootEl=e,this.props.elRef&&$t(this.props.elRef,e)}}render(){const{props:e}=this,t=function(e,t){const n="function"==typeof e?e(t):e||[];return"string"==typeof n?[n]:n}(e.classNameGenerator,e.renderProps);if(e.children){const n=Un(e,t),i=e.children(this.InnerContent,e.renderProps,n);return e.elTag?r.createElement(e.elTag,n,i):i}return r.createElement(Bn,Object.assign(Object.assign({},e),{elRef:this.handleRootEl,elTag:e.elTag||"div",elClasses:(e.elClasses||[]).concat(t),renderId:this.context}))}componentDidMount(){var e,t;null===(t=(e=this.props).didMount)||void 0===t||t.call(e,Object.assign(Object.assign({},this.props.renderProps),{el:this.rootEl||this.base}))}componentWillUnmount(){var e,t;null===(t=(e=this.props).willUnmount)||void 0===t||t.call(e,Object.assign(Object.assign({},this.props.renderProps),{el:this.rootEl||this.base}))}}function Wn(e,t){const n=e.props;return r.createElement(Bn,Object.assign({renderProps:n.renderProps,generatorName:n.generatorName,customGenerator:n.customGenerator,defaultGenerator:n.defaultGenerator,renderId:e.context},t))}Vn.contextType=zn;class Gn extends Jt{render(){let{dateEnv:e,options:t,theme:n,viewApi:i}=this.context,{props:s}=this,{date:o,dateProfile:a}=s,l=Ot(o,s.todayRange,null,a),c=[Hn].concat(xt(l,n)),d=e.format(o,s.dayHeaderFormat),u=!l.isDisabled&&s.colCnt>1?It(this.context,o):{},h=Object.assign(Object.assign(Object.assign({date:e.toDate(o),view:i},s.extraRenderProps),{text:d}),l);return r.createElement(Vn,{elTag:"th",elClasses:c,elAttrs:Object.assign({role:"columnheader",colSpan:s.colSpan,"data-date":l.isDisabled?void 0:_e(o)},s.extraDataAttrs),renderProps:h,generatorName:"dayHeaderContent",customGenerator:t.dayHeaderContent,defaultGenerator:jn,classNameGenerator:t.dayHeaderClassNames,didMount:t.dayHeaderDidMount,willUnmount:t.dayHeaderWillUnmount},(e=>r.createElement("div",{className:"fc-scrollgrid-sync-inner"},!l.isDisabled&&r.createElement(e,{elTag:"a",elAttrs:u,elClasses:["fc-col-header-cell-cushion",s.isSticky&&"fc-sticky"]}))))}}const qn=He({weekday:"long"});class Yn extends Jt{render(){let{props:e}=this,{dateEnv:t,theme:n,viewApi:i,options:s}=this.context,o=re(new Date(2592e5),e.dow),a={dow:e.dow,isDisabled:!1,isFuture:!1,isPast:!1,isToday:!1,isOther:!1},l=t.format(o,e.dayHeaderFormat),c=Object.assign(Object.assign(Object.assign(Object.assign({date:o},a),{view:i}),e.extraRenderProps),{text:l});return r.createElement(Vn,{elTag:"th",elClasses:[Hn,...xt(a,n),...e.extraClassNames||[]],elAttrs:Object.assign({role:"columnheader",colSpan:e.colSpan},e.extraDataAttrs),renderProps:c,generatorName:"dayHeaderContent",customGenerator:s.dayHeaderContent,defaultGenerator:jn,classNameGenerator:s.dayHeaderClassNames,didMount:s.dayHeaderDidMount,willUnmount:s.dayHeaderWillUnmount},(n=>r.createElement("div",{className:"fc-scrollgrid-sync-inner"},r.createElement(n,{elTag:"a",elClasses:["fc-col-header-cell-cushion",e.isSticky&&"fc-sticky"],elAttrs:{"aria-label":t.format(o,qn)}}))))}}class Qn extends r.Component{constructor(e,t){super(e,t),this.initialNowDate=en(t.options.now,t.dateEnv),this.initialNowQueriedMs=(new Date).valueOf(),this.state=this.computeTiming().currentState}render(){let{props:e,state:t}=this;return e.children(t.nowDate,t.todayRange)}componentDidMount(){this.setTimeout()}componentDidUpdate(e){e.unit!==this.props.unit&&(this.clearTimeout(),this.setTimeout())}componentWillUnmount(){this.clearTimeout()}computeTiming(){let{props:e,context:t}=this,n=ie(this.initialNowDate,(new Date).valueOf()-this.initialNowQueriedMs),r=t.dateEnv.startOf(n,e.unit),i=t.dateEnv.add(r,U(1,e.unit)),s=i.valueOf()-n.valueOf();return s=Math.min(864e5,s),{currentState:{nowDate:r,todayRange:Zn(r)},nextState:{nowDate:i,todayRange:Zn(i)},waitMs:s}}setTimeout(){let{nextState:e,waitMs:t}=this.computeTiming();this.timeoutId=setTimeout((()=>{this.setState(e,(()=>{this.setTimeout()}))}),t)}clearTimeout(){this.timeoutId&&clearTimeout(this.timeoutId)}}function Zn(e){let t=ce(e);return{start:t,end:re(t,1)}}function Xn(e,t,n){return e||Pn(t,n)}function Jn(e,t){let n=e.activeRange;return t?n:{start:ie(n.start,e.slotMinTime.milliseconds),end:ie(n.end,e.slotMaxTime.milliseconds-864e5)}}function $n(e,t,n){let r=n.options.eventDataTransform,i=t?t.eventDataTransform:null;return i&&(e=Kn(e,i)),r&&(e=Kn(e,r)),e}function Kn(e,t){let n;if(t){n=[];for(let r of e){let e=t(r);e?n.push(e):null==e&&n.push(r)}}else n=e;return n}function er(e,t){return Ke(e,(e=>e.sourceId!==t))}function tr(e,t){let n=t.getCurrentData(),r=Object.assign({businessHours:n.businessHours,dateSelection:"",eventStore:n.eventStore,eventUiBases:n.eventUiBases,eventSelection:"",eventDrag:null,eventResize:null},e);return(t.pluginHooks.isPropsValid||nr)(r,t)}function nr(e,t,n={},r){return!(e.eventDrag&&!function(e,t,n,r){let i=t.getCurrentData(),s=e.eventDrag,o=s.mutatedEvents,a=o.defs,l=o.instances,c=pn(a,s.isEvent?e.eventUiBases:{"":i.selectionConfig});r&&(c=Q(c,r));let d=(p=e.eventStore,g=s.affectedEvents.instances,{defs:p.defs,instances:Y(p.instances,(e=>!g[e.instanceId]))}),u=d.defs,h=d.instances,f=pn(u,e.eventUiBases);var p,g;for(let r in l){let o=l[r],p=o.range,g=c[o.defId],m=a[o.defId];if(!rr(g.constraints,p,d,e.businessHours,t))return!1;let{eventOverlap:v}=t.options,y="function"==typeof v?v:null;for(let e in h){let n=h[e];if(wt(p,n.range)){if(!1===f[n.defId].overlap&&s.isEvent)return!1;if(!1===g.overlap)return!1;if(y&&!y(new cn(t,u[n.defId],n),new cn(t,m,o)))return!1}}let _=i.eventStore;for(let e of g.allows){let i,s=Object.assign(Object.assign({},n),{range:o.range,allDay:m.allDay}),a=_.defs[m.defId],l=_.instances[r];if(i=a?new cn(t,a,l):new cn(t,m),!e(nn(s,t),i))return!1}}return!0}(e,t,n,r)||e.dateSelection&&!function(e,t,n,r){let i=e.eventStore,s=i.defs,o=i.instances,a=e.dateSelection,l=a.range,{selectionConfig:c}=t.getCurrentData();if(r&&(c=r(c)),!rr(c.constraints,l,i,e.businessHours,t))return!1;let{selectOverlap:d}=t.options,u="function"==typeof d?d:null;for(let e in o){let n=o[e];if(wt(l,n.range)){if(!1===c.overlap)return!1;if(u&&!u(new cn(t,s[n.defId],n),null))return!1}}for(let e of c.allows)if(!e(nn(Object.assign(Object.assign({},n),a),t),null))return!1;return!0}(e,t,n,r))}function rr(e,t,n,r,i){for(let s of e)if(!or(ir(s,t,n,r,i),t))return!1;return!0}function ir(e,t,n,r,i){return"businessHours"===e?sr(Ye(r,t,i)):"string"==typeof e?sr(Ke(n,(t=>t.groupId===e))):"object"==typeof e&&e?sr(Ye(e,t,i)):[]}function sr(e){let{instances:t}=e,n=[];for(let e in t)n.push(t[e].range);return n}function or(e,t){for(let n of e)if(Tt(n,t))return!0;return!1}Qn.contextType=Zt;class ar extends Error{constructor(e,t){super(e),this.response=t}}const lr=/^(visible|hidden)$/;class cr extends Jt{constructor(){super(...arguments),this.handleEl=e=>{this.el=e,$t(this.props.elRef,e)}}render(){let{props:e}=this,{liquid:t,liquidIsAbsolute:n}=e,i=t&&n,s=["fc-scroller"];return t&&(n?s.push("fc-scroller-liquid-absolute"):s.push("fc-scroller-liquid")),r.createElement("div",{ref:this.handleEl,className:s.join(" "),style:{overflowX:e.overflowX,overflowY:e.overflowY,left:i&&-(e.overcomeLeft||0)||"",right:i&&-(e.overcomeRight||0)||"",bottom:i&&-(e.overcomeBottom||0)||"",marginLeft:!i&&-(e.overcomeLeft||0)||"",marginRight:!i&&-(e.overcomeRight||0)||"",marginBottom:!i&&-(e.overcomeBottom||0)||"",maxHeight:e.maxHeight||""}},e.children)}needsXScrolling(){if(lr.test(this.props.overflowX))return!1;let{el:e}=this,t=this.el.getBoundingClientRect().width-this.getYScrollbarWidth(),{children:n}=e;for(let e=0;e<n.length;e+=1)if(n[e].getBoundingClientRect().width>t)return!0;return!1}needsYScrolling(){if(lr.test(this.props.overflowY))return!1;let{el:e}=this,t=this.el.getBoundingClientRect().height-this.getXScrollbarWidth(),{children:n}=e;for(let e=0;e<n.length;e+=1)if(n[e].getBoundingClientRect().height>t)return!0;return!1}getXScrollbarWidth(){return lr.test(this.props.overflowX)?0:this.el.offsetHeight-this.el.clientHeight}getYScrollbarWidth(){return lr.test(this.props.overflowY)?0:this.el.offsetWidth-this.el.clientWidth}}class dr{constructor(e){this.masterCallback=e,this.currentMap={},this.depths={},this.callbackMap={},this.handleValue=(e,t)=>{let{depths:n,currentMap:r}=this,i=!1,s=!1;null!==e?(i=t in r,r[t]=e,n[t]=(n[t]||0)+1,s=!0):(n[t]-=1,n[t]||(delete r[t],delete this.callbackMap[t],i=!0)),this.masterCallback&&(i&&this.masterCallback(null,String(t)),s&&this.masterCallback(e,String(t)))}}createRef(e){let t=this.callbackMap[e];return t||(t=this.callbackMap[e]=t=>{this.handleValue(t,String(e))}),t}collect(e,t,n){return ee(this.currentMap,e,t,n)}getAll(){return Z(this.currentMap)}}function ur(e){let t=m(e,".fc-scrollgrid-shrink"),n=0;for(let e of t)n=Math.max(n,j(e));return Math.ceil(n)}function hr(e,t){return e.liquid&&t.liquid}function fr(e,t){return null!=t.maxHeight||hr(e,t)}function pr(e,t,n,i){let{expandRows:s}=n;return"function"==typeof t.content?t.content(n):r.createElement("table",{role:"presentation",className:[t.tableClassName,e.syncRowHeights?"fc-scrollgrid-sync-table":""].join(" "),style:{minWidth:n.tableMinWidth,width:n.clientWidth,height:s?n.clientHeight:""}},n.tableColGroupNode,r.createElement(i?"thead":"tbody",{role:"presentation"},"function"==typeof t.rowContent?t.rowContent(n):t.rowContent))}function gr(e,t){return te(e,t,X)}function mr(e,t){let n=[];for(let i of e){let e=i.span||1;for(let s=0;s<e;s+=1)n.push(r.createElement("col",{style:{width:"shrink"===i.width?vr(t):i.width||"",minWidth:i.minWidth||""}}))}return r.createElement("colgroup",{},...n)}function vr(e){return null==e?4:e}function yr(e){for(let t of e)if("shrink"===t.width)return!0;return!1}function _r(e,t){let n=["fc-scrollgrid",t.theme.getClass("table")];return e&&n.push("fc-scrollgrid-liquid"),n}function br(e,t){let n=["fc-scrollgrid-section",`fc-scrollgrid-section-${e.type}`,e.className];return t&&e.liquid&&null==e.maxHeight&&n.push("fc-scrollgrid-section-liquid"),e.isSticky&&n.push("fc-scrollgrid-section-sticky"),n}class Er extends Jt{constructor(){super(...arguments),this.processCols=Ee((e=>e),gr),this.renderMicroColGroup=Ee(mr),this.scrollerRefs=new dr,this.scrollerElRefs=new dr(this._handleScrollerEl.bind(this)),this.state={shrinkWidth:null,forceYScrollbars:!1,scrollerClientWidths:{},scrollerClientHeights:{}},this.handleSizing=()=>{this.safeSetState(Object.assign({shrinkWidth:this.computeShrinkWidth()},this.computeScrollerDims()))}}render(){let{props:e,state:t,context:n}=this,i=e.sections||[],s=this.processCols(e.cols),o=this.renderMicroColGroup(s,t.shrinkWidth),a=_r(e.liquid,n);e.collapsibleWidth&&a.push("fc-scrollgrid-collapsible");let l,c=i.length,d=0,u=[],h=[],f=[];for(;d<c&&"header"===(l=i[d]).type;)u.push(this.renderSection(l,o,!0)),d+=1;for(;d<c&&"body"===(l=i[d]).type;)h.push(this.renderSection(l,o,!1)),d+=1;for(;d<c&&"footer"===(l=i[d]).type;)f.push(this.renderSection(l,o,!0)),d+=1;let p=!_t();const g={role:"rowgroup"};return r.createElement("table",{role:"grid",className:a.join(" "),style:{height:e.height}},Boolean(!p&&u.length)&&r.createElement("thead",g,...u),Boolean(!p&&h.length)&&r.createElement("tbody",g,...h),Boolean(!p&&f.length)&&r.createElement("tfoot",g,...f),p&&r.createElement("tbody",g,...u,...h,...f))}renderSection(e,t,n){return"outerContent"in e?r.createElement(r.Fragment,{key:e.key},e.outerContent):r.createElement("tr",{key:e.key,role:"presentation",className:br(e,this.props.liquid).join(" ")},this.renderChunkTd(e,t,e.chunk,n))}renderChunkTd(e,t,n,i){if("outerContent"in n)return n.outerContent;let{props:s}=this,{forceYScrollbars:o,scrollerClientWidths:a,scrollerClientHeights:l}=this.state,c=fr(s,e),d=hr(s,e),u=s.liquid?o?"scroll":c?"auto":"hidden":"visible",h=e.key,f=pr(e,n,{tableColGroupNode:t,tableMinWidth:"",clientWidth:s.collapsibleWidth||void 0===a[h]?null:a[h],clientHeight:void 0!==l[h]?l[h]:null,expandRows:e.expandRows,syncRowHeights:!1,rowSyncHeights:[],reportRowHeightChange:()=>{}},i);return r.createElement(i?"th":"td",{ref:n.elRef,role:"presentation"},r.createElement("div",{className:"fc-scroller-harness"+(d?" fc-scroller-harness-liquid":"")},r.createElement(cr,{ref:this.scrollerRefs.createRef(h),elRef:this.scrollerElRefs.createRef(h),overflowY:u,overflowX:s.liquid?"hidden":"visible",maxHeight:e.maxHeight,liquid:d,liquidIsAbsolute:!0},f)))}_handleScrollerEl(e,t){let n=function(e,t){for(let n of e)if(n.key===t)return n;return null}(this.props.sections,t);n&&$t(n.chunk.scrollerElRef,e)}componentDidMount(){this.handleSizing(),this.context.addResizeHandler(this.handleSizing)}componentDidUpdate(){this.handleSizing()}componentWillUnmount(){this.context.removeResizeHandler(this.handleSizing)}computeShrinkWidth(){return yr(this.props.cols)?ur(this.scrollerElRefs.getAll()):0}computeScrollerDims(){let e=jt(),{scrollerRefs:t,scrollerElRefs:n}=this,r=!1,i={},s={};for(let e in t.currentMap){let n=t.currentMap[e];if(n&&n.needsYScrolling()){r=!0;break}}for(let t of this.props.sections){let o=t.key,a=n.currentMap[o];if(a){let t=a.parentNode;i[o]=Math.floor(t.getBoundingClientRect().width-(r?e.y:0)),s[o]=Math.floor(t.getBoundingClientRect().height)}}return{forceYScrollbars:r,scrollerClientWidths:i,scrollerClientHeights:s}}}Er.addStateEquality({scrollerClientWidths:X,scrollerClientHeights:X});class Sr extends Jt{constructor(){super(...arguments),this.handleEl=e=>{this.el=e,e&&fn(e,this.props.seg)}}render(){const{props:e,context:t}=this,{options:n}=t,{seg:i}=e,{eventRange:s}=i,{ui:o}=s,a={event:new cn(t,s.def,s.instance),view:t.viewApi,timeText:e.timeText,textColor:o.textColor,backgroundColor:o.backgroundColor,borderColor:o.borderColor,isDraggable:!e.disableDragging&&vn(i,t),isStartResizable:!e.disableResizing&&yn(i,t),isEndResizable:!e.disableResizing&&_n(i),isMirror:Boolean(e.isDragging||e.isResizing||e.isDateSelecting),isStart:Boolean(i.isStart),isEnd:Boolean(i.isEnd),isPast:Boolean(e.isPast),isFuture:Boolean(e.isFuture),isToday:Boolean(e.isToday),isSelected:Boolean(e.isSelected),isDragging:Boolean(e.isDragging),isResizing:Boolean(e.isResizing)};return r.createElement(Vn,Object.assign({},e,{elRef:this.handleEl,elClasses:[...En(a),...i.eventRange.ui.classNames,...e.elClasses||[]],renderProps:a,generatorName:"eventContent",customGenerator:n.eventContent,defaultGenerator:e.defaultGenerator,classNameGenerator:n.eventClassNames,didMount:n.eventDidMount,willUnmount:n.eventWillUnmount}))}componentDidUpdate(e){this.el&&this.props.seg!==e.seg&&fn(this.el,this.props.seg)}}function Dr(e){return r.createElement("div",{className:"fc-event-main-frame"},e.timeText&&r.createElement("div",{className:"fc-event-time"},e.timeText),r.createElement("div",{className:"fc-event-title-container"},r.createElement("div",{className:"fc-event-title fc-sticky"},e.event.title||r.createElement(r.Fragment,null," "))))}const Ar=He({day:"numeric"});class Cr extends Jt{constructor(){super(...arguments),this.refineRenderProps=Se(Tr)}render(){let{props:e,context:t}=this,{options:n}=t,i=this.refineRenderProps({date:e.date,dateProfile:e.dateProfile,todayRange:e.todayRange,isMonthStart:e.isMonthStart||!1,showDayNumber:e.showDayNumber,extraRenderProps:e.extraRenderProps,viewApi:t.viewApi,dateEnv:t.dateEnv,monthStartFormat:n.monthStartFormat});return r.createElement(Vn,Object.assign({},e,{elClasses:[...xt(i,t.theme),...e.elClasses||[]],elAttrs:Object.assign(Object.assign({},e.elAttrs),i.isDisabled?{}:{"data-date":_e(e.date)}),renderProps:i,generatorName:"dayCellContent",customGenerator:n.dayCellContent,defaultGenerator:e.defaultGenerator,classNameGenerator:i.isDisabled?void 0:n.dayCellClassNames,didMount:n.dayCellDidMount,willUnmount:n.dayCellWillUnmount}))}}function wr(e){return Boolean(e.dayCellContent||Ln("dayCellContent",e))}function Tr(e){let{date:t,dateEnv:n,dateProfile:r,isMonthStart:i}=e,s=Ot(t,e.todayRange,null,r),o=e.showDayNumber?n.format(t,i?e.monthStartFormat:Ar):"";return Object.assign(Object.assign(Object.assign({date:n.toDate(t),view:e.viewApi},s),{isMonthStart:i,dayNumberText:o}),e.extraRenderProps)}function Rr(e){let{title:t}=e.event;return t&&r.createElement("div",{className:"fc-event-title"},e.event.title)}function Or(e){return e.text}class xr extends Jt{constructor(){super(...arguments),this.state={titleId:S()},this.handleRootEl=e=>{this.rootEl=e,this.props.elRef&&$t(this.props.elRef,e)},this.handleDocumentMouseDown=e=>{const t=b(e);this.rootEl.contains(t)||this.handleCloseClick()},this.handleDocumentKeyDown=e=>{"Escape"===e.key&&this.handleCloseClick()},this.handleCloseClick=()=>{let{onClose:e}=this.props;e&&e()}}render(){let{theme:e,options:t}=this.context,{props:n,state:s}=this,o=["fc-popover",e.getClass("popover")].concat(n.extraClassNames||[]);return i.createPortal(r.createElement("div",Object.assign({},n.extraAttrs,{id:n.id,className:o.join(" "),"aria-labelledby":s.titleId,ref:this.handleRootEl}),r.createElement("div",{className:"fc-popover-header "+e.getClass("popoverHeader")},r.createElement("span",{className:"fc-popover-title",id:s.titleId},n.title),r.createElement("span",{className:"fc-popover-close "+e.getIconClass("close"),title:t.closeHint,onClick:this.handleCloseClick})),r.createElement("div",{className:"fc-popover-body "+e.getClass("popoverContent")},n.children)),n.parentEl)}componentDidMount(){document.addEventListener("mousedown",this.handleDocumentMouseDown),document.addEventListener("keydown",this.handleDocumentKeyDown),this.updateSize()}componentWillUnmount(){document.removeEventListener("mousedown",this.handleDocumentMouseDown),document.removeEventListener("keydown",this.handleDocumentKeyDown)}updateSize(){let{isRtl:e}=this.context,{alignmentEl:t,alignGridTop:n}=this.props,{rootEl:r}=this,i=function(e){let t=Ft(e),n=e.getBoundingClientRect();for(let e of t){let t=vt(n,e.getBoundingClientRect());if(!t)return null;n=t}return n}(t);if(i){let s=r.getBoundingClientRect(),o=n?p(t,".fc-scrollgrid").getBoundingClientRect().top:i.top,a=e?i.right-s.width:i.left;o=Math.max(o,10),a=Math.min(a,document.documentElement.clientWidth-10-s.width),a=Math.max(a,10);let l=r.offsetParent.getBoundingClientRect();y(r,{top:o-l.top,left:a-l.left})}}}class kr extends Kt{constructor(){super(...arguments),this.handleRootEl=e=>{this.rootEl=e,e?this.context.registerInteractiveComponent(this,{el:e,useEventCenter:!1}):this.context.unregisterInteractiveComponent(this)}}render(){let{options:e,dateEnv:t}=this.context,{props:n}=this,{startDate:i,todayRange:s,dateProfile:o}=n,a=t.format(i,e.dayPopoverFormat);return r.createElement(Cr,{elRef:this.handleRootEl,date:i,dateProfile:o,todayRange:s},((t,i,s)=>r.createElement(xr,{elRef:s.ref,id:n.id,title:a,extraClassNames:["fc-more-popover"].concat(s.className||[]),extraAttrs:s,parentEl:n.parentEl,alignmentEl:n.alignmentEl,alignGridTop:n.alignGridTop,onClose:n.onClose},wr(e)&&r.createElement(t,{elTag:"div",elClasses:["fc-more-popover-misc"]}),n.children)))}queryHit(e,t,n,r){let{rootEl:i,props:s}=this;return e>=0&&e<n&&t>=0&&t<r?{dateProfile:s.dateProfile,dateSpan:Object.assign({allDay:!s.forceTimed,range:{start:s.startDate,end:s.endDate}},s.extraDateSpan),dayEl:i,rect:{left:0,top:0,right:n,bottom:r},layer:1}:null}}function Mr(e){return e.text}function Ir(e){if(e.allDayDate)return{start:e.allDayDate,end:re(e.allDayDate,1)};let{hiddenSegs:t}=e;return{start:Nr(t),end:(n=t,n.reduce(Hr).eventRange.range.end)};var n}function Nr(e){return e.reduce(Pr).eventRange.range.start}function Pr(e,t){return e.eventRange.range.start<t.eventRange.range.start?e:t}function Hr(e,t){return e.eventRange.range.end>t.eventRange.range.end?e:t}function jr(e){return[`fc-${e.type}-view`,"fc-view"]}const Br={id:String,defaultAllDay:Boolean,url:String,format:String,events:Ge,eventDataTransform:Ge,success:Ge,failure:Ge};function Lr(e,t,n=Ur(t)){let r;if("string"==typeof e?r={url:e}:"function"==typeof e||Array.isArray(e)?r={events:e}:"object"==typeof e&&e&&(r=e),r){let{refined:i,extra:s}=We(r,n),o=function(e,t){let n=t.pluginHooks.eventSourceDefs;for(let t=n.length-1;t>=0;t-=1){let r=n[t].parseMeta(e);if(r)return{sourceDefId:t,meta:r}}return null}(i,t);if(o)return{_raw:e,isFetching:!1,latestFetchId:"",fetchRange:null,defaultAllDay:i.defaultAllDay,eventDataTransform:i.eventDataTransform,success:i.success,failure:i.failure,publicId:i.id||"",sourceId:O(),sourceDefId:o.sourceDefId,meta:o.meta,ui:rt(i,t),extendedProps:s}}return null}function Ur(e){return Object.assign(Object.assign(Object.assign({},tt),Br),e.pluginHooks.eventSourceRefiners)}class Fr{constructor(){this.handlers=[]}set(e){this.currentValue=e;for(let t of this.handlers)t(e)}subscribe(e){this.handlers.push(e),void 0!==this.currentValue&&e(this.currentValue)}}t.BASE_OPTION_DEFAULTS={eventDisplay:"auto",defaultRangeSeparator:" - ",titleRangeSeparator:" – ",defaultTimedEventDuration:"01:00:00",defaultAllDayEventDuration:{day:1},forceEventDuration:!1,nextDayThreshold:"00:00:00",dayHeaders:!0,initialView:"",aspectRatio:1.35,headerToolbar:{start:"title",center:"",end:"today prev,next"},weekends:!0,weekNumbers:!1,weekNumberCalculation:"local",editable:!1,nowIndicator:!1,scrollTime:"06:00:00",scrollTimeReset:!0,slotMinTime:"00:00:00",slotMaxTime:"24:00:00",showNonCurrentDates:!0,lazyFetching:!0,startParam:"start",endParam:"end",timeZoneParam:"timeZone",timeZone:"local",locales:[],locale:"",themeSystem:"standard",dragRevertDuration:500,dragScroll:!0,allDayMaintainDuration:!1,unselectAuto:!0,dropAccept:"*",eventOrder:"start,-duration,allDay,title",dayPopoverFormat:{month:"long",day:"numeric",year:"numeric"},handleWindowResize:!0,windowResizeDelay:100,longPressDelay:1e3,eventDragMinDistance:5,expandRows:!1,navLinks:!1,selectable:!1,eventMinHeight:15,eventMinWidth:30,eventShortHeight:30,monthStartFormat:{month:"long",day:"numeric"}},t.BASE_OPTION_REFINERS=je,t.BaseComponent=Jt,t.BgEvent=class extends Jt{render(){let{props:e}=this,{seg:t}=e;return r.createElement(Sr,{elTag:"div",elClasses:["fc-bg-event"],elStyle:{backgroundColor:t.eventRange.ui.backgroundColor},defaultGenerator:Rr,seg:t,timeText:"",isDragging:!1,isResizing:!1,isDateSelecting:!1,isSelected:!1,isPast:e.isPast,isFuture:e.isFuture,isToday:e.isToday,disableDragging:!0,disableResizing:!0})}},t.CALENDAR_LISTENER_REFINERS=Be,t.CALENDAR_OPTION_REFINERS=Le,t.COMPLEX_OPTION_COMPARATORS=Ue,t.CalendarImpl=class{getCurrentData(){return this.currentDataManager.getCurrentData()}dispatch(e){this.currentDataManager.dispatch(e)}get view(){return this.getCurrentData().viewApi}batchRendering(e){e()}updateSize(){this.trigger("_resize",!0)}setOption(e,t){this.dispatch({type:"SET_OPTION",optionName:e,rawOptionValue:t})}getOption(e){return this.currentDataManager.currentCalendarOptionsInput[e]}getAvailableLocaleCodes(){return Object.keys(this.getCurrentData().availableRawLocales)}on(e,t){let{currentDataManager:n}=this;n.currentCalendarOptionsRefiners[e]?n.emitter.on(e,t):console.warn(`Unknown listener name '${e}'`)}off(e,t){this.currentDataManager.emitter.off(e,t)}trigger(e,...t){this.currentDataManager.emitter.trigger(e,...t)}changeView(e,t){this.batchRendering((()=>{if(this.unselect(),t)if(t.start&&t.end)this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e}),this.dispatch({type:"SET_OPTION",optionName:"visibleRange",rawOptionValue:t});else{let{dateEnv:n}=this.getCurrentData();this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e,dateMarker:n.createMarker(t)})}else this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e})}))}zoomTo(e,t){let n;t=t||"day",n=this.getCurrentData().viewSpecs[t]||this.getUnitViewSpec(t),this.unselect(),n?this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:n.type,dateMarker:e}):this.dispatch({type:"CHANGE_DATE",dateMarker:e})}getUnitViewSpec(e){let t,n,{viewSpecs:r,toolbarConfig:i}=this.getCurrentData(),s=[].concat(i.header?i.header.viewsWithButtons:[],i.footer?i.footer.viewsWithButtons:[]);for(let e in r)s.push(e);for(t=0;t<s.length;t+=1)if(n=r[s[t]],n&&n.singleUnit===e)return n;return null}prev(){this.unselect(),this.dispatch({type:"PREV"})}next(){this.unselect(),this.dispatch({type:"NEXT"})}prevYear(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:e.dateEnv.addYears(e.currentDate,-1)})}nextYear(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:e.dateEnv.addYears(e.currentDate,1)})}today(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:en(e.calendarOptions.now,e.dateEnv)})}gotoDate(e){let t=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:t.dateEnv.createMarker(e)})}incrementDate(e){let t=this.getCurrentData(),n=U(e);n&&(this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:t.dateEnv.add(t.currentDate,n)}))}getDate(){let e=this.getCurrentData();return e.dateEnv.toDate(e.currentDate)}formatDate(e,t){let{dateEnv:n}=this.getCurrentData();return n.format(n.createMarker(e),He(t))}formatRange(e,t,n){let{dateEnv:r}=this.getCurrentData();return r.formatRange(r.createMarker(e),r.createMarker(t),He(n),n)}formatIso(e,t){let{dateEnv:n}=this.getCurrentData();return n.formatIso(n.createMarker(e),{omitTime:t})}select(e,t){let n;n=null==t?null!=e.start?e:{start:e,end:null}:{start:e,end:t};let r=this.getCurrentData(),i=function(e,t,n){let r=function(e,t){let{refined:n,extra:r}=We(e,Dn),i=n.start?t.createMarkerMeta(n.start):null,s=n.end?t.createMarkerMeta(n.end):null,{allDay:o}=n;return null==o&&(o=i&&i.isTimeUnspecified&&(!s||s.isTimeUnspecified)),Object.assign({range:{start:i?i.marker:null,end:s?s.marker:null},allDay:o},r)}(e,t),{range:i}=r;if(!i.start)return null;if(!i.end){if(null==n)return null;i.end=t.add(i.start,n)}return r}(n,r.dateEnv,U({days:1}));i&&(this.dispatch({type:"SELECT_DATES",selection:i}),tn(i,null,r))}unselect(e){let t=this.getCurrentData();t.dateSelection&&(this.dispatch({type:"UNSELECT_DATES"}),function(e,t){t.emitter.trigger("unselect",{jsEvent:e?e.origEvent:null,view:t.viewApi||t.calendarApi.view})}(e,t))}addEvent(e,t){if(e instanceof cn){let t=e._def,n=e._instance;return this.getCurrentData().eventStore.defs[t.defId]||(this.dispatch({type:"ADD_EVENTS",eventStore:Xe({def:t,instance:n})}),this.triggerEventAdd(e)),e}let n,r=this.getCurrentData();if(t instanceof ln)n=t.internalEventSource;else if("boolean"==typeof t)t&&([n]=Z(r.eventSources));else if(null!=t){let e=this.getEventSourceById(t);if(!e)return console.warn(`Could not find an event source with ID "${t}"`),null;n=e.internalEventSource}let i=ct(e,n,r,!1);if(i){let e=new cn(r,i.def,i.def.recurringDef?null:i.instance);return this.dispatch({type:"ADD_EVENTS",eventStore:Xe(i)}),this.triggerEventAdd(e),e}return null}triggerEventAdd(e){let{emitter:t}=this.getCurrentData();t.trigger("eventAdd",{event:e,relatedEvents:[],revert:()=>{this.dispatch({type:"REMOVE_EVENTS",eventStore:dn(e)})}})}getEventById(e){let t=this.getCurrentData(),{defs:n,instances:r}=t.eventStore;e=String(e);for(let i in n){let s=n[i];if(s.publicId===e){if(s.recurringDef)return new cn(t,s,null);for(let e in r){let n=r[e];if(n.defId===s.defId)return new cn(t,s,n)}}}return null}getEvents(){let e=this.getCurrentData();return un(e.eventStore,e)}removeAllEvents(){this.dispatch({type:"REMOVE_ALL_EVENTS"})}getEventSources(){let e=this.getCurrentData(),t=e.eventSources,n=[];for(let r in t)n.push(new ln(e,t[r]));return n}getEventSourceById(e){let t=this.getCurrentData(),n=t.eventSources;e=String(e);for(let r in n)if(n[r].publicId===e)return new ln(t,n[r]);return null}addEventSource(e){let t=this.getCurrentData();if(e instanceof ln)return t.eventSources[e.internalEventSource.sourceId]||this.dispatch({type:"ADD_EVENT_SOURCES",sources:[e.internalEventSource]}),e;let n=Lr(e,t);return n?(this.dispatch({type:"ADD_EVENT_SOURCES",sources:[n]}),new ln(t,n)):null}removeAllEventSources(){this.dispatch({type:"REMOVE_ALL_EVENT_SOURCES"})}refetchEvents(){this.dispatch({type:"FETCH_EVENT_SOURCES",isRefetch:!0})}scrollToTime(e){let t=U(e);t&&this.trigger("_scrollRequest",{time:t})}},t.CalendarRoot=class extends Jt{constructor(){super(...arguments),this.state={forPrint:!1},this.handleBeforePrint=()=>{this.setState({forPrint:!0})},this.handleAfterPrint=()=>{this.setState({forPrint:!1})}}render(){let{props:e}=this,{options:t}=e,{forPrint:n}=this.state,r=n||"auto"===t.height||"auto"===t.contentHeight,i=r||null==t.height?"":t.height,s=["fc",n?"fc-media-print":"fc-media-screen",`fc-direction-${t.direction}`,e.theme.getClass("root")];return _t()||s.push("fc-liquid-hack"),e.children(s,i,r,n)}componentDidMount(){let{emitter:e}=this.props;e.on("_beforeprint",this.handleBeforePrint),e.on("_afterprint",this.handleAfterPrint)}componentWillUnmount(){let{emitter:e}=this.props;e.off("_beforeprint",this.handleBeforePrint),e.off("_afterprint",this.handleAfterPrint)}},t.ContentContainer=Vn,t.CustomRenderingStore=class extends Fr{constructor(){super(...arguments),this.map=new Map}handle(e){const{map:t}=this;let n=!1;e.isActive?(t.set(e.id,e),n=!0):t.has(e.id)&&(t.delete(e.id),n=!0),n&&this.set(t)}},t.DateComponent=Kt,t.DateEnv=class{constructor(e){let t=this.timeZone=e.timeZone,n="local"!==t&&"UTC"!==t;e.namedTimeZoneImpl&&n&&(this.namedTimeZoneImpl=new e.namedTimeZoneImpl(t)),this.canComputeOffset=Boolean(!n||this.namedTimeZoneImpl),this.calendarSystem=function(e){return new Cn[e]}(e.calendarSystem),this.locale=e.locale,this.weekDow=e.locale.week.dow,this.weekDoy=e.locale.week.doy,"ISO"===e.weekNumberCalculation&&(this.weekDow=1,this.weekDoy=4),"number"==typeof e.firstDay&&(this.weekDow=e.firstDay),"function"==typeof e.weekNumberCalculation&&(this.weekNumberFunc=e.weekNumberCalculation),this.weekText=null!=e.weekText?e.weekText:e.locale.options.weekText,this.weekTextLong=(null!=e.weekTextLong?e.weekTextLong:e.locale.options.weekTextLong)||this.weekText,this.cmdFormatter=e.cmdFormatter,this.defaultSeparator=e.defaultSeparator}createMarker(e){let t=this.createMarkerMeta(e);return null===t?null:t.marker}createNowMarker(){return this.canComputeOffset?this.timestampToMarker((new Date).valueOf()):ge(he(new Date))}createMarkerMeta(e){if("string"==typeof e)return this.parse(e);let t=null;return"number"==typeof e?t=this.timestampToMarker(e):e instanceof Date?(e=e.valueOf(),isNaN(e)||(t=this.timestampToMarker(e))):Array.isArray(e)&&(t=ge(e)),null!==t&&me(t)?{marker:t,isTimeUnspecified:!1,forcedTzo:null}:null}parse(e){let t=Rn(e);if(null===t)return null;let{marker:n}=t,r=null;return null!==t.timeZoneOffset&&(this.canComputeOffset?n=this.timestampToMarker(n.valueOf()-60*t.timeZoneOffset*1e3):r=t.timeZoneOffset),{marker:n,isTimeUnspecified:t.isTimeUnspecified,forcedTzo:r}}getYear(e){return this.calendarSystem.getMarkerYear(e)}getMonth(e){return this.calendarSystem.getMarkerMonth(e)}getDay(e){return this.calendarSystem.getMarkerDay(e)}add(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]+=t.years,n[1]+=t.months,n[2]+=t.days,n[6]+=t.milliseconds,this.calendarSystem.arrayToMarker(n)}subtract(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]-=t.years,n[1]-=t.months,n[2]-=t.days,n[6]-=t.milliseconds,this.calendarSystem.arrayToMarker(n)}addYears(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]+=t,this.calendarSystem.arrayToMarker(n)}addMonths(e,t){let n=this.calendarSystem.markerToArray(e);return n[1]+=t,this.calendarSystem.arrayToMarker(n)}diffWholeYears(e,t){let{calendarSystem:n}=this;return ve(e)===ve(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)&&n.getMarkerMonth(e)===n.getMarkerMonth(t)?n.getMarkerYear(t)-n.getMarkerYear(e):null}diffWholeMonths(e,t){let{calendarSystem:n}=this;return ve(e)===ve(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)?n.getMarkerMonth(t)-n.getMarkerMonth(e)+12*(n.getMarkerYear(t)-n.getMarkerYear(e)):null}greatestWholeUnit(e,t){let n=this.diffWholeYears(e,t);return null!==n?{unit:"year",value:n}:(n=this.diffWholeMonths(e,t),null!==n?{unit:"month",value:n}:(n=ae(e,t),null!==n?{unit:"week",value:n}:(n=le(e,t),null!==n?{unit:"day",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/36e5}(e,t),H(n)?{unit:"hour",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/6e4}(e,t),H(n)?{unit:"minute",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/1e3}(e,t),H(n)?{unit:"second",value:n}:{unit:"millisecond",value:t.valueOf()-e.valueOf()}))))))}countDurationsBetween(e,t,n){let r;return n.years&&(r=this.diffWholeYears(e,t),null!==r)?r/(z(n)/365):n.months&&(r=this.diffWholeMonths(e,t),null!==r)?r/(z(n)/30):n.days&&(r=le(e,t),null!==r)?r/z(n):(t.valueOf()-e.valueOf())/V(n)}startOf(e,t){return"year"===t?this.startOfYear(e):"month"===t?this.startOfMonth(e):"week"===t?this.startOfWeek(e):"day"===t?ce(e):"hour"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours()])}(e):"minute"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes()])}(e):"second"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds()])}(e):null}startOfYear(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e)])}startOfMonth(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e)])}startOfWeek(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e),e.getUTCDate()-(e.getUTCDay()-this.weekDow+7)%7])}computeWeekNumber(e){return this.weekNumberFunc?this.weekNumberFunc(this.toDate(e)):function(e,t,n){let r=e.getUTCFullYear(),i=de(e,r,t,n);if(i<1)return de(e,r-1,t,n);let s=de(e,r+1,t,n);return s>=1?Math.min(i,s):i}(e,this.weekDow,this.weekDoy)}format(e,t,n={}){return t.format({marker:e,timeZoneOffset:null!=n.forcedTzo?n.forcedTzo:this.offsetForMarker(e)},this)}formatRange(e,t,n,r={}){return r.isEndExclusive&&(t=ie(t,-1)),n.formatRange({marker:e,timeZoneOffset:null!=r.forcedStartTzo?r.forcedStartTzo:this.offsetForMarker(e)},{marker:t,timeZoneOffset:null!=r.forcedEndTzo?r.forcedEndTzo:this.offsetForMarker(t)},this,r.defaultSeparator)}formatIso(e,t={}){let n=null;return t.omitTimeZoneOffset||(n=null!=t.forcedTzo?t.forcedTzo:this.offsetForMarker(e)),ye(e,n,t.omitTime)}timestampToMarker(e){return"local"===this.timeZone?ge(he(new Date(e))):"UTC"!==this.timeZone&&this.namedTimeZoneImpl?ge(this.namedTimeZoneImpl.timestampToArray(e)):new Date(e)}offsetForMarker(e){return"local"===this.timeZone?-fe(pe(e)).getTimezoneOffset():"UTC"===this.timeZone?0:this.namedTimeZoneImpl?this.namedTimeZoneImpl.offsetForArray(pe(e)):null}toDate(e,t){return"local"===this.timeZone?fe(pe(e)):"UTC"===this.timeZone?new Date(e.valueOf()):this.namedTimeZoneImpl?new Date(e.valueOf()-1e3*this.namedTimeZoneImpl.offsetForArray(pe(e))*60):new Date(e.valueOf()-(t||0))}},t.DateProfileGenerator=class{constructor(e){this.props=e,this.nowDate=en(e.nowInput,e.dateEnv),this.initHiddenDays()}buildPrev(e,t,n){let{dateEnv:r}=this.props,i=r.subtract(r.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(i,-1,n)}buildNext(e,t,n){let{dateEnv:r}=this.props,i=r.add(r.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(i,1,n)}build(e,t,n=!0){let r,i,s,o,a,l,{props:c}=this;var d,u;return r=this.buildValidRange(),r=this.trimHiddenDays(r),n&&(d=e,e=null!=(u=r).start&&d<u.start?u.start:null!=u.end&&d>=u.end?new Date(u.end.valueOf()-1):d),i=this.buildCurrentRangeInfo(e,t),s=/^(year|month|week|day)$/.test(i.unit),o=this.buildRenderRange(this.trimHiddenDays(i.range),i.unit,s),o=this.trimHiddenDays(o),a=o,c.showNonCurrentDates||(a=At(a,i.range)),a=this.adjustActiveRange(a),a=At(a,r),l=wt(i.range,r),Rt(o,e)||(e=o.start),{currentDate:e,validRange:r,currentRange:i.range,currentRangeUnit:i.unit,isRangeAllDay:s,activeRange:a,renderRange:o,slotMinTime:c.slotMinTime,slotMaxTime:c.slotMaxTime,isValid:l,dateIncrement:this.buildDateIncrement(i.duration)}}buildValidRange(){let e=this.props.validRangeInput,t="function"==typeof e?e.call(this.props.calendarApi,this.nowDate):e;return this.refineRange(t)||{start:null,end:null}}buildCurrentRangeInfo(e,t){let n,{props:r}=this,i=null,s=null,o=null;return r.duration?(i=r.duration,s=r.durationUnit,o=this.buildRangeFromDuration(e,t,i,s)):(n=this.props.dayCount)?(s="day",o=this.buildRangeFromDayCount(e,t,n)):(o=this.buildCustomVisibleRange(e))?s=r.dateEnv.greatestWholeUnit(o.start,o.end).unit:(i=this.getFallbackDuration(),s=W(i).unit,o=this.buildRangeFromDuration(e,t,i,s)),{duration:i,unit:s,range:o}}getFallbackDuration(){return U({day:1})}adjustActiveRange(e){let{dateEnv:t,usesMinMaxTime:n,slotMinTime:r,slotMaxTime:i}=this.props,{start:s,end:o}=e;return n&&(z(r)<0&&(s=ce(s),s=t.add(s,r)),z(i)>1&&(o=ce(o),o=re(o,-1),o=t.add(o,i))),{start:s,end:o}}buildRangeFromDuration(e,t,n,r){let i,s,o,{dateEnv:a,dateAlignment:l}=this.props;if(!l){let{dateIncrement:e}=this.props;l=e&&V(e)<V(n)?W(e).unit:r}function c(){i=a.startOf(e,l),s=a.add(i,n),o={start:i,end:s}}return z(n)<=1&&this.isHiddenDay(i)&&(i=this.skipHiddenDays(i,t),i=ce(i)),c(),this.trimHiddenDays(o)||(e=this.skipHiddenDays(e,t),c()),o}buildRangeFromDayCount(e,t,n){let r,{dateEnv:i,dateAlignment:s}=this.props,o=0,a=e;s&&(a=i.startOf(a,s)),a=ce(a),a=this.skipHiddenDays(a,t),r=a;do{r=re(r,1),this.isHiddenDay(r)||(o+=1)}while(o<n);return{start:a,end:r}}buildCustomVisibleRange(e){let{props:t}=this,n=t.visibleRangeInput,r="function"==typeof n?n.call(t.calendarApi,t.dateEnv.toDate(e)):n,i=this.refineRange(r);return!i||null!=i.start&&null!=i.end?i:null}buildRenderRange(e,t,n){return e}buildDateIncrement(e){let t,{dateIncrement:n}=this.props;return n||((t=this.props.dateAlignment)?U(1,t):e||U({days:1}))}refineRange(e){if(e){let t=function(e,t){let n=null,r=null;return e.start&&(n=t.createMarker(e.start)),e.end&&(r=t.createMarker(e.end)),n||r?n&&r&&r<n?null:{start:n,end:r}:null}(e,this.props.dateEnv);return t&&(t=gt(t)),t}return null}initHiddenDays(){let e,t=this.props.hiddenDays||[],n=[],r=0;for(!1===this.props.weekends&&t.push(0,6),e=0;e<7;e+=1)(n[e]=-1!==t.indexOf(e))||(r+=1);if(!r)throw new Error("invalid hiddenDays");this.isHiddenDayHash=n}trimHiddenDays(e){let{start:t,end:n}=e;return t&&(t=this.skipHiddenDays(t)),n&&(n=this.skipHiddenDays(n,-1,!0)),null==t||null==n||t<n?{start:t,end:n}:null}isHiddenDay(e){return e instanceof Date&&(e=e.getUTCDay()),this.isHiddenDayHash[e]}skipHiddenDays(e,t=1,n=!1){for(;this.isHiddenDayHash[(e.getUTCDay()+(n?t:0)+7)%7];)e=re(e,t);return e}},t.DayCellContainer=Cr,t.DayHeader=class extends Jt{constructor(){super(...arguments),this.createDayHeaderFormatter=Ee(Xn)}render(){let{context:e}=this,{dates:t,dateProfile:n,datesRepDistinctDays:i,renderIntro:s}=this.props,o=this.createDayHeaderFormatter(e.options.dayHeaderFormat,i,t.length);return r.createElement(Qn,{unit:"day"},((e,a)=>r.createElement("tr",{role:"row"},s&&s("day"),t.map((e=>i?r.createElement(Gn,{key:e.toISOString(),date:e,dateProfile:n,todayRange:a,colCnt:t.length,dayHeaderFormat:o}):r.createElement(Yn,{key:e.getUTCDay(),dow:e.getUTCDay(),dayHeaderFormat:o}))))))}},t.DaySeriesModel=class{constructor(e,t){let n=e.start,{end:r}=e,i=[],s=[],o=-1;for(;n<r;)t.isHiddenDay(n)?i.push(o+.5):(o+=1,i.push(o),s.push(n)),n=re(n,1);this.dates=s,this.indices=i,this.cnt=s.length}sliceRange(e){let t=this.getDateDayIndex(e.start),n=this.getDateDayIndex(re(e.end,-1)),r=Math.max(0,t),i=Math.min(this.cnt-1,n);return r=Math.ceil(r),i=Math.floor(i),r<=i?{firstIndex:r,lastIndex:i,isStart:t===r,isEnd:n===i}:null}getDateDayIndex(e){let{indices:t}=this,n=Math.floor(se(this.dates[0],e));return n<0?t[0]-1:n>=t.length?t[t.length-1]+1:t[n]}},t.DayTableModel=class{constructor(e,t){let n,r,i,{dates:s}=e;if(t){for(r=s[0].getUTCDay(),n=1;n<s.length&&s[n].getUTCDay()!==r;n+=1);i=Math.ceil(s.length/n)}else i=1,n=s.length;this.rowCnt=i,this.colCnt=n,this.daySeries=e,this.cells=this.buildCells(),this.headerDates=this.buildHeaderDates()}buildCells(){let e=[];for(let t=0;t<this.rowCnt;t+=1){let n=[];for(let e=0;e<this.colCnt;e+=1)n.push(this.buildCell(t,e));e.push(n)}return e}buildCell(e,t){let n=this.daySeries.dates[e*this.colCnt+t];return{key:n.toISOString(),date:n}}buildHeaderDates(){let e=[];for(let t=0;t<this.colCnt;t+=1)e.push(this.cells[0][t].date);return e}sliceRange(e){let{colCnt:t}=this,n=this.daySeries.sliceRange(e),r=[];if(n){let{firstIndex:e,lastIndex:i}=n,s=e;for(;s<=i;){let o=Math.floor(s/t),a=Math.min((o+1)*t,i+1);r.push({row:o,firstCol:s%t,lastCol:(a-1)%t,isStart:n.isStart&&s===e,isEnd:n.isEnd&&a-1===i}),s=a}}return r}},t.DelayedRunner=class{constructor(e){this.drainedOption=e,this.isRunning=!1,this.isDirty=!1,this.pauseDepths={},this.timeoutId=0}request(e){this.isDirty=!0,this.isPaused()||(this.clearTimeout(),null==e?this.tryDrain():this.timeoutId=setTimeout(this.tryDrain.bind(this),e))}pause(e=""){let{pauseDepths:t}=this;t[e]=(t[e]||0)+1,this.clearTimeout()}resume(e="",t){let{pauseDepths:n}=this;e in n&&(t?delete n[e]:(n[e]-=1,n[e]<=0&&delete n[e]),this.tryDrain())}isPaused(){return Object.keys(this.pauseDepths).length}tryDrain(){if(!this.isRunning&&!this.isPaused()){for(this.isRunning=!0;this.isDirty;)this.isDirty=!1,this.drained();this.isRunning=!1}}clear(){this.clearTimeout(),this.isDirty=!1,this.pauseDepths={}}clearTimeout(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=0)}drained(){this.drainedOption&&this.drainedOption()}},t.ElementDragging=class{constructor(e,t){this.emitter=new zt}destroy(){}setMirrorIsVisible(e){}setMirrorNeedsRevert(e){}setAutoScrollEnabled(e){}},t.ElementScrollController=class extends Wt{constructor(e){super(),this.el=e}getScrollTop(){return this.el.scrollTop}getScrollLeft(){return this.el.scrollLeft}setScrollTop(e){this.el.scrollTop=e}setScrollLeft(e){this.el.scrollLeft=e}getScrollWidth(){return this.el.scrollWidth}getScrollHeight(){return this.el.scrollHeight}getClientHeight(){return this.el.clientHeight}getClientWidth(){return this.el.clientWidth}},t.Emitter=zt,t.EventContainer=Sr,t.EventImpl=cn,t.Interaction=class{constructor(e){this.component=e.component,this.isHitComboAllowed=e.isHitComboAllowed||null}destroy(){}},t.JsonRequestError=ar,t.MoreLinkContainer=class extends Jt{constructor(){super(...arguments),this.state={isPopoverOpen:!1,popoverId:S()},this.handleLinkEl=e=>{this.linkEl=e,this.props.elRef&&$t(this.props.elRef,e)},this.handleClick=e=>{let{props:t,context:n}=this,{moreLinkClick:r}=n.options,i=Ir(t).start;function s(e){let{def:t,instance:r,range:i}=e.eventRange;return{event:new cn(n,t,r),start:n.dateEnv.toDate(i.start),end:n.dateEnv.toDate(i.end),isStart:e.isStart,isEnd:e.isEnd}}"function"==typeof r&&(r=r({date:i,allDay:Boolean(t.allDayDate),allSegs:t.allSegs.map(s),hiddenSegs:t.hiddenSegs.map(s),jsEvent:e,view:n.viewApi})),r&&"popover"!==r?"string"==typeof r&&n.calendarApi.zoomTo(i,r):this.setState({isPopoverOpen:!0})},this.handlePopoverClose=()=>{this.setState({isPopoverOpen:!1})}}render(){let{props:e,state:t}=this;return r.createElement(Zt.Consumer,null,(n=>{let{viewApi:i,options:s,calendarApi:o}=n,{moreLinkText:a}=s,{moreCnt:l}=e,c=Ir(e),d="function"==typeof a?a.call(o,l):`+${l} ${a}`,u=P(s.moreLinkHint,[l],d),h={num:l,shortText:`+${l}`,text:d,view:i};return r.createElement(r.Fragment,null,Boolean(e.moreCnt)&&r.createElement(Vn,{elTag:e.elTag||"a",elRef:this.handleLinkEl,elClasses:[...e.elClasses||[],"fc-more-link"],elStyle:e.elStyle,elAttrs:Object.assign(Object.assign(Object.assign({},e.elAttrs),w(this.handleClick)),{title:u,"aria-expanded":t.isPopoverOpen,"aria-controls":t.isPopoverOpen?t.popoverId:""}),renderProps:h,generatorName:"moreLinkContent",customGenerator:s.moreLinkContent,defaultGenerator:e.defaultGenerator||Mr,classNameGenerator:s.moreLinkClassNames,didMount:s.moreLinkDidMount,willUnmount:s.moreLinkWillUnmount},e.children),t.isPopoverOpen&&r.createElement(kr,{id:t.popoverId,startDate:c.start,endDate:c.end,dateProfile:e.dateProfile,todayRange:e.todayRange,extraDateSpan:e.extraDateSpan,parentEl:this.parentEl,alignmentEl:e.alignmentElRef?e.alignmentElRef.current:this.linkEl,alignGridTop:e.alignGridTop,forceTimed:e.forceTimed,onClose:this.handlePopoverClose},e.popoverContent()))}))}componentDidMount(){this.updateParentEl()}componentDidUpdate(){this.updateParentEl()}updateParentEl(){this.linkEl&&(this.parentEl=p(this.linkEl,".fc-view-harness"))}},t.NamedTimeZoneImpl=class{constructor(e){this.timeZoneName=e}},t.NowIndicatorContainer=e=>r.createElement(Zt.Consumer,null,(t=>{let{options:n}=t,i={isAxis:e.isAxis,date:t.dateEnv.toDate(e.date),view:t.viewApi};return r.createElement(Vn,Object.assign({},e,{elTag:e.elTag||"div",renderProps:i,generatorName:"nowIndicatorContent",customGenerator:n.nowIndicatorContent,classNameGenerator:n.nowIndicatorClassNames,didMount:n.nowIndicatorDidMount,willUnmount:n.nowIndicatorWillUnmount}))})),t.NowTimer=Qn,t.PositionCache=class{constructor(e,t,n,r){this.els=t;let i=this.originClientRect=e.getBoundingClientRect();n&&this.buildElHorizontals(i.left),r&&this.buildElVerticals(i.top)}buildElHorizontals(e){let t=[],n=[];for(let r of this.els){let i=r.getBoundingClientRect();t.push(i.left-e),n.push(i.right-e)}this.lefts=t,this.rights=n}buildElVerticals(e){let t=[],n=[];for(let r of this.els){let i=r.getBoundingClientRect();t.push(i.top-e),n.push(i.bottom-e)}this.tops=t,this.bottoms=n}leftToIndex(e){let t,{lefts:n,rights:r}=this,i=n.length;for(t=0;t<i;t+=1)if(e>=n[t]&&e<r[t])return t}topToIndex(e){let t,{tops:n,bottoms:r}=this,i=n.length;for(t=0;t<i;t+=1)if(e>=n[t]&&e<r[t])return t}getWidth(e){return this.rights[e]-this.lefts[e]}getHeight(e){return this.bottoms[e]-this.tops[e]}similarTo(e){return Vt(this.tops||[],e.tops||[])&&Vt(this.bottoms||[],e.bottoms||[])&&Vt(this.lefts||[],e.lefts||[])&&Vt(this.rights||[],e.rights||[])}},t.PureComponent=Xt,t.RefMap=dr,t.RenderId=zn,t.ScrollController=Wt,t.ScrollResponder=Qt,t.Scroller=cr,t.SegHierarchy=class{constructor(){this.strictOrder=!1,this.allowReslicing=!1,this.maxCoord=-1,this.maxStackCnt=-1,this.levelCoords=[],this.entriesByLevel=[],this.stackCnts={}}addSegs(e){let t=[];for(let n of e)this.insertEntry(n,t);return t}insertEntry(e,t){let n=this.findInsertion(e);return this.isInsertionValid(n,e)?(this.insertEntryAt(e,n),1):this.handleInvalidInsertion(n,e,t)}isInsertionValid(e,t){return(-1===this.maxCoord||e.levelCoord+t.thickness<=this.maxCoord)&&(-1===this.maxStackCnt||e.stackCnt<this.maxStackCnt)}handleInvalidInsertion(e,t,n){return this.allowReslicing&&e.touchingEntry?this.splitEntry(t,e.touchingEntry,n):(n.push(t),0)}splitEntry(e,t,n){let r=0,i=[],s=e.span,o=t.span;return s.start<o.start&&(r+=this.insertEntry({index:e.index,thickness:e.thickness,span:{start:s.start,end:o.start}},i)),s.end>o.end&&(r+=this.insertEntry({index:e.index,thickness:e.thickness,span:{start:o.end,end:s.end}},i)),r?(n.push({index:e.index,thickness:e.thickness,span:kn(o,s)},...i),r):(n.push(e),0)}insertEntryAt(e,t){let{entriesByLevel:n,levelCoords:r}=this;-1===t.lateral?(Mn(r,t.level,t.levelCoord),Mn(n,t.level,[e])):Mn(n[t.level],t.lateral,e),this.stackCnts[xn(e)]=t.stackCnt}findInsertion(e){let{levelCoords:t,entriesByLevel:n,strictOrder:r,stackCnts:i}=this,s=t.length,o=0,a=-1,l=-1,c=null,d=0;for(let u=0;u<s;u+=1){let s=t[u];if(!r&&s>=o+e.thickness)break;let h,f=n[u],p=In(f,e.span.start,On),g=p[0]+p[1];for(;(h=f[g])&&h.span.start<e.span.end;){let e=s+h.thickness;e>o&&(o=e,c=h,a=u,l=g),e===o&&(d=Math.max(d,i[xn(h)]+1)),g+=1}}let u=0;if(c)for(u=a+1;u<s&&t[u]<o;)u+=1;let h=-1;return u<s&&t[u]===o&&(h=In(n[u],e.span.end,On)[0]),{touchingLevel:a,touchingLateral:l,touchingEntry:c,stackCnt:d,levelCoord:o,level:u,lateral:h}}toRects(){let{entriesByLevel:e,levelCoords:t}=this,n=e.length,r=[];for(let i=0;i<n;i+=1){let n=e[i],s=t[i];for(let e of n)r.push(Object.assign(Object.assign({},e),{levelCoord:s}))}return r}},t.SimpleScrollGrid=Er,t.Slicer=class{constructor(){this.sliceBusinessHours=Ee(this._sliceBusinessHours),this.sliceDateSelection=Ee(this._sliceDateSpan),this.sliceEventStore=Ee(this._sliceEventStore),this.sliceEventDrag=Ee(this._sliceInteraction),this.sliceEventResize=Ee(this._sliceInteraction),this.forceDayIfListItem=!1}sliceProps(e,t,n,r,...i){let{eventUiBases:s}=e,o=this.sliceEventStore(e.eventStore,s,t,n,...i);return{dateSelectionSegs:this.sliceDateSelection(e.dateSelection,t,n,s,r,...i),businessHourSegs:this.sliceBusinessHours(e.businessHours,t,n,r,...i),fgEventSegs:o.fg,bgEventSegs:o.bg,eventDrag:this.sliceEventDrag(e.eventDrag,s,t,n,...i),eventResize:this.sliceEventResize(e.eventResize,s,t,n,...i),eventSelection:e.eventSelection}}sliceNowDate(e,t,n,r,...i){return this._sliceDateSpan({range:{start:e,end:ie(e,1)},allDay:!1},t,n,{},r,...i)}_sliceBusinessHours(e,t,n,r,...i){return e?this._sliceEventStore(Ye(e,Jn(t,Boolean(n)),r),{},t,n,...i).bg:[]}_sliceEventStore(e,t,n,r,...i){if(e){let s=hn(e,t,Jn(n,Boolean(r)),r);return{bg:this.sliceEventRanges(s.bg,i),fg:this.sliceEventRanges(s.fg,i)}}return{bg:[],fg:[]}}_sliceInteraction(e,t,n,r,...i){if(!e)return null;let s=hn(e.mutatedEvents,t,Jn(n,Boolean(r)),r);return{segs:this.sliceEventRanges(s.fg,i),affectedInstances:e.affectedEvents.instances,isEvent:e.isEvent}}_sliceDateSpan(e,t,n,r,i,...s){if(!e)return[];let o=Jn(t,Boolean(n)),a=At(e.range,o);if(a){let t=function(e,t,n){let r=dt({editable:!1},n),i=ht(r.refined,r.extra,"",e.allDay,!0,n);return{def:i,ui:gn(i,t),instance:qe(i.defId,e.range),range:e.range,isStart:!0,isEnd:!0}}(e=Object.assign(Object.assign({},e),{range:a}),r,i),n=this.sliceRange(e.range,...s);for(let e of n)e.eventRange=t;return n}return[]}sliceEventRanges(e,t){let n=[];for(let r of e)n.push(...this.sliceEventRange(r,t));return n}sliceEventRange(e,t){let n=e.range;this.forceDayIfListItem&&"list-item"===e.ui.display&&(n={start:n.start,end:re(n.start,1)});let r=this.sliceRange(n,...t);for(let t of r)t.eventRange=e,t.isStart=e.isStart&&t.isStart,t.isEnd=e.isEnd&&t.isEnd;return r}},t.Splitter=class{constructor(){this.getKeysForEventDefs=Ee(this._getKeysForEventDefs),this.splitDateSelection=Ee(this._splitDateSpan),this.splitEventStore=Ee(this._splitEventStore),this.splitIndividualUi=Ee(this._splitIndividualUi),this.splitEventDrag=Ee(this._splitInteraction),this.splitEventResize=Ee(this._splitInteraction),this.eventUiBuilders={}}splitProps(e){let t=this.getKeyInfo(e),n=this.getKeysForEventDefs(e.eventStore),r=this.splitDateSelection(e.dateSelection),i=this.splitIndividualUi(e.eventUiBases,n),s=this.splitEventStore(e.eventStore,n),o=this.splitEventDrag(e.eventDrag),a=this.splitEventResize(e.eventResize),l={};this.eventUiBuilders=Q(t,((e,t)=>this.eventUiBuilders[t]||Ee(Et)));for(let n in t){let c=t[n],d=s[n]||bt,u=this.eventUiBuilders[n];l[n]={businessHours:c.businessHours||e.businessHours,dateSelection:r[n]||null,eventStore:d,eventUiBases:u(e.eventUiBases[""],c.ui,i[n]),eventSelection:d.instances[e.eventSelection]?e.eventSelection:"",eventDrag:o[n]||null,eventResize:a[n]||null}}return l}_splitDateSpan(e){let t={};if(e){let n=this.getKeysForDateSpan(e);for(let r of n)t[r]=e}return t}_getKeysForEventDefs(e){return Q(e.defs,(e=>this.getKeysForEventDef(e)))}_splitEventStore(e,t){let{defs:n,instances:r}=e,i={};for(let e in n)for(let r of t[e])i[r]||(i[r]={defs:{},instances:{}}),i[r].defs[e]=n[e];for(let e in r){let n=r[e];for(let r of t[n.defId])i[r]&&(i[r].instances[e]=n)}return i}_splitIndividualUi(e,t){let n={};for(let r in e)if(r)for(let i of t[r])n[i]||(n[i]={}),n[i][r]=e[r];return n}_splitInteraction(e){let t={};if(e){let n=this._splitEventStore(e.affectedEvents,this._getKeysForEventDefs(e.affectedEvents)),r=this._getKeysForEventDefs(e.mutatedEvents),i=this._splitEventStore(e.mutatedEvents,r),s=r=>{t[r]||(t[r]={affectedEvents:n[r]||bt,mutatedEvents:i[r]||bt,isEvent:e.isEvent})};for(let e in n)s(e);for(let e in i)s(e)}return t}},t.StandardEvent=class extends Jt{render(){let{props:e,context:t}=this,{options:n}=t,{seg:i}=e,{ui:s}=i.eventRange,o=bn(i,n.eventTimeFormat||e.defaultTimeFormat,t,e.defaultDisplayEventTime,e.defaultDisplayEventEnd);return r.createElement(Sr,Object.assign({},e,{elTag:"a",elStyle:{borderColor:s.borderColor,backgroundColor:s.backgroundColor},elAttrs:Sn(i,t),defaultGenerator:Dr,timeText:o}),((e,t)=>r.createElement(r.Fragment,null,r.createElement(e,{elTag:"div",elClasses:["fc-event-main"],elStyle:{color:t.textColor}}),Boolean(t.isStartResizable)&&r.createElement("div",{className:"fc-event-resizer fc-event-resizer-start"}),Boolean(t.isEndResizable)&&r.createElement("div",{className:"fc-event-resizer fc-event-resizer-end"}))))}},t.TableDateCell=Gn,t.TableDowCell=Yn,t.Theme=Gt,t.VIEW_OPTION_REFINERS=Ve,t.ViewContainer=class extends Jt{render(){let{props:e,context:t}=this,{options:n}=t,i={view:t.viewApi};return r.createElement(Vn,Object.assign({},e,{elTag:e.elTag||"div",elClasses:[...jr(e.viewSpec),...e.elClasses||[]],renderProps:i,classNameGenerator:n.viewClassNames,generatorName:void 0,didMount:n.viewDidMount,willUnmount:n.viewWillUnmount}),(()=>e.children))}},t.ViewContextType=Zt,t.WeekNumberContainer=e=>r.createElement(Zt.Consumer,null,(t=>{let{dateEnv:n,options:i}=t,{date:s}=e,o=i.weekNumberFormat||e.defaultFormat,a={num:n.computeWeekNumber(s),text:n.format(s,o),date:s};return r.createElement(Vn,Object.assign({},e,{renderProps:a,generatorName:"weekNumberContent",customGenerator:i.weekNumberContent,defaultGenerator:Or,classNameGenerator:i.weekNumberClassNames,didMount:i.weekNumberDidMount,willUnmount:i.weekNumberWillUnmount}))})),t.WindowScrollController=class extends Wt{getScrollTop(){return window.pageYOffset}getScrollLeft(){return window.pageXOffset}setScrollTop(e){window.scroll(window.pageXOffset,e)}setScrollLeft(e){window.scroll(e,window.pageYOffset)}getScrollWidth(){return document.documentElement.scrollWidth}getScrollHeight(){return document.documentElement.scrollHeight}getClientHeight(){return document.documentElement.clientHeight}getClientWidth(){return document.documentElement.clientWidth}},t.addDays=re,t.addDurations=function(e,t){return{years:e.years+t.years,months:e.months+t.months,days:e.days+t.days,milliseconds:e.milliseconds+t.milliseconds}},t.addMs=ie,t.addWeeks=function(e,t){let n=pe(e);return n[2]+=7*t,ge(n)},t.allowContextMenu=function(e){e.removeEventListener("contextmenu",D)},t.allowSelection=function(e){e.style.userSelect="",e.removeEventListener("selectstart",D)},t.applyMutationToEventStore=sn,t.applyStyle=y,t.applyStyleProp=_,t.arrayToHash=function(e){let t={};for(let n of e)t[n]=!0;return t},t.asCleanDays=function(e){return e.years||e.months||e.milliseconds?0:e.days},t.asRoughMinutes=function(e){return V(e)/6e4},t.asRoughMs=V,t.asRoughSeconds=function(e){return V(e)/1e3},t.binarySearch=In,t.buildElAttrs=Un,t.buildEntryKey=xn,t.buildEventApis=un,t.buildEventRangeKey=function(e){return e.instance?e.instance.instanceId:`${e.def.defId}:${e.range.start.toISOString()}`},t.buildEventSourceRefiners=Ur,t.buildIsoString=ye,t.buildNavLinkAttrs=It,t.buildRangeApiWithTimeZone=function(e,t,n){return Object.assign(Object.assign({},An(e,t,n)),{timeZone:t.timeZone})},t.buildSegTimeText=bn,t.buildViewClassNames=jr,t.buildViewContext=function(e,t,n,r,i,s,o,a,l,c,d,u,h){return{dateEnv:i,options:n,pluginHooks:o,emitter:c,dispatch:a,getCurrentData:l,calendarApi:d,viewSpec:e,viewApi:t,dateProfileGenerator:r,theme:s,isRtl:"rtl"===n.direction,addResizeHandler(e){c.on("_resize",e)},removeResizeHandler(e){c.off("_resize",e)},createScrollResponder:e=>new Qt(e,c,U(n.scrollTime),n.scrollTimeReset),registerInteractiveComponent:u,unregisterInteractiveComponent:h}},t.collectFromHash=ee,t.combineEventUis=it,t.compareByFieldSpecs=k,t.compareNumbers=function(e,t){return e-t},t.compareObjs=K,t.computeEarliestSegStart=Nr,t.computeEdges=Lt,t.computeFallbackHeaderFormat=Pn,t.computeInnerRect=function(e,t=!1,n){let r=n?e.getBoundingClientRect():Ut(e),i=Lt(e,t),s={left:r.left+i.borderLeft+i.scrollbarLeft,right:r.right-i.borderRight-i.scrollbarRight,top:r.top+i.borderTop,bottom:r.bottom-i.borderBottom-i.scrollbarBottom};return t&&(s.left+=i.paddingLeft,s.right-=i.paddingRight,s.top+=i.paddingTop,s.bottom-=i.paddingBottom),s},t.computeRect=Ut,t.computeShrinkWidth=ur,t.computeVisibleDayRange=gt,t.config={},t.constrainPoint=function(e,t){return{left:Math.min(Math.max(e.left,t.left),t.right),top:Math.min(Math.max(e.top,t.top),t.bottom)}},t.createContext=Yt,t.createDuration=U,t.createEmptyEventStore=function(){return{defs:{},instances:{}}},t.createEventInstance=qe,t.createEventUi=rt,t.createFormatter=He,t.diffDates=mt,t.diffDayAndTime=oe,t.diffDays=se,t.diffPoints=function(e,t){return{left:e.left-t.left,top:e.top-t.top}},t.diffWeeks=function(e,t){return se(e,t)/7},t.diffWholeDays=le,t.diffWholeWeeks=ae,t.disableCursor=function(){document.body.classList.add("fc-not-allowed")},t.elementClosest=p,t.elementMatches=g,t.enableCursor=function(){document.body.classList.remove("fc-not-allowed")},t.ensureElHasStyles=function(e){e.isConnected&&d(e.getRootNode())},t.eventTupleToStore=Xe,t.filterHash=Y,t.findDirectChildren=function(e,t){let n=e instanceof HTMLElement?[e]:e,r=[];for(let e=0;e<n.length;e+=1){let i=n[e].children;for(let e=0;e<i.length;e+=1){let n=i[e];t&&!g(n,t)||r.push(n)}}return r},t.findElements=m,t.flexibleCompare=I,t.flushSync=function(e){e();let t=o.options.debounceRendering,n=[];for(o.options.debounceRendering=function(e){n.push(e)},o.render(o.createElement(qt,{}),document.createElement("div"));n.length;)n.shift()();o.options.debounceRendering=t},t.formatDayString=_e,t.formatIsoMonthStr=function(e){return e.toISOString().match(/^\d{4}-\d{2}/)[0]},t.formatIsoTimeString=function(e){return N(e.getUTCHours(),2)+":"+N(e.getUTCMinutes(),2)+":"+N(e.getUTCSeconds(),2)},t.formatWithOrdinals=P,t.getAllowYScrolling=fr,t.getCanVGrowWithinCell=_t,t.getClippingParents=Ft,t.getDateMeta=Ot,t.getDayClassNames=xt,t.getDefaultEventEnd=rn,t.getElSeg=function(e){return e.fcSeg||e.parentNode.fcSeg||null},t.getEntrySpanEnd=On,t.getEventTargetViaRoot=b,t.getInitialDate=function(e,t){let n=e.initialDate;return null!=n?t.createMarker(n):en(e.now,t)},t.getIsRtlScrollbarOnLeft=Ht,t.getNow=en,t.getRectCenter=function(e){return{left:(e.left+e.right)/2,top:(e.top+e.bottom)/2}},t.getRelevantEvents=Je,t.getScrollGridClassNames=_r,t.getScrollbarWidths=jt,t.getSectionClassNames=br,t.getSectionHasLiquidHeight=hr,t.getSegAnchorAttrs=Sn,t.getSegMeta=function(e,t,n){let r=e.eventRange.range;return{isPast:r.end<(n||t.start),isFuture:r.start>=(n||t.end),isToday:t&&Rt(t,r.start)}},t.getSlotClassNames=function(e,t){let n=["fc-slot",`fc-slot-${ne[e.dow]}`];return e.isDisabled?n.push("fc-slot-disabled"):(e.isToday&&(n.push("fc-slot-today"),n.push(t.getClass("today"))),e.isPast&&n.push("fc-slot-past"),e.isFuture&&n.push("fc-slot-future")),n},t.getStickyFooterScrollbar=function(e){let{stickyFooterScrollbar:t}=e;return null!=t&&"auto"!==t||(t="auto"===e.height||"auto"===e.viewHeight),t},t.getStickyHeaderDates=function(e){let{stickyHeaderDates:t}=e;return null!=t&&"auto"!==t||(t="auto"===e.height||"auto"===e.viewHeight),t},t.getUniqueDomId=S,t.greatestDurationDenominator=W,t.groupIntersectingEntries=function(e){let t=[];for(let i of e){let e=[],s={span:i.span,entries:[i]};for(let i of t)kn(i.span,s.span)?s={entries:i.entries.concat(s.entries),span:(n=i.span,r=s.span,{start:Math.min(n.start,r.start),end:Math.max(n.end,r.end)})}:e.push(i);e.push(s),t=e}var n,r;return t},t.guid=O,t.hasBgRendering=function(e){return"background"===e.ui.display||"inverse-background"===e.ui.display},t.hasCustomDayCellContent=wr,t.hasShrinkWidth=yr,t.hashValuesToArray=Z,t.identity=Ge,t.injectStyles=c,t.interactionSettingsStore={},t.interactionSettingsToStore=function(e){return{[e.component.uid]:e}},t.intersectRanges=At,t.intersectRects=vt,t.intersectSpans=kn,t.isArraysEqual=te,t.isColPropsEqual=gr,t.isDateSelectionValid=function(e,t,n){return!!Tt(t.validRange,e.range)&&tr({dateSelection:e},n)},t.isDateSpansEqual=function(e,t){return Ct(e.range,t.range)&&e.allDay===t.allDay&&function(e,t){for(let n in t)if("range"!==n&&"allDay"!==n&&e[n]!==t[n])return!1;for(let n in e)if(!(n in t))return!1;return!0}(e,t)},t.isInt=H,t.isInteractionValid=function(e,t,n){let{instances:r}=e.mutatedEvents;for(let e in r)if(!Tt(t.validRange,r[e].range))return!1;return tr({eventDrag:e},n)},t.isMultiDayRange=function(e){let t=gt(e);return se(t.start,t.end)>1},t.isPropsEqual=X,t.isPropsValid=nr,t.isValidDate=me,t.listenBySelector=A,t.listenToHoverBySelector=function(e,t,n,r){let i;return A(e,"mouseover",t,((e,t)=>{if(t!==i){i=t,n(e,t);let s=e=>{i=null,r(e,t),t.removeEventListener("mouseleave",s)};t.addEventListener("mouseleave",s)}}))},t.mapHash=Q,t.memoize=Ee,t.memoizeArraylike=function(e,t,n){let r=[],i=[];return s=>{let o=r.length,a=s.length,l=0;for(;l<o;l+=1)if(s[l]){if(!te(r[l],s[l])){n&&n(i[l]);let r=e.apply(this,s[l]);t&&t(r,i[l])||(i[l]=r)}}else n&&n(i[l]);for(;l<a;l+=1)i[l]=e.apply(this,s[l]);return r=s,i.splice(a),i}},t.memoizeHashlike=function(e,t,n){let r={},i={};return s=>{let o={};for(let a in s)if(i[a])if(te(r[a],s[a]))o[a]=i[a];else{n&&n(i[a]);let r=e.apply(this,s[a]);o[a]=t&&t(r,i[a])?i[a]:r}else o[a]=e.apply(this,s[a]);return r=s,i=o,o}},t.memoizeObjArg=Se,t.mergeEventStores=$e,t.mergeProps=q,t.mergeRawOptions=function(e){return q(e,Ue)},t.multiplyDuration=function(e,t){return{years:e.years*t,months:e.months*t,days:e.days*t,milliseconds:e.milliseconds*t}},t.padStart=N,t.parse=Rn,t.parseBusinessHours=function(e,t){return Ze(function(e){let t;return t=!0===e?[{}]:Array.isArray(e)?e.filter((e=>e.daysOfWeek)):"object"==typeof e&&e?[e]:[],t=t.map((e=>Object.assign(Object.assign({},ft),e))),t}(e),null,t)},t.parseClassNames=et,t.parseDragMeta=function(e){let{refined:t,extra:n}=We(e,Nn);return{startTime:t.startTime||null,duration:t.duration||null,create:null==t.create||t.create,sourceId:t.sourceId,leftoverProps:n}},t.parseEventDef=ht,t.parseEventSource=Lr,t.parseFieldSpecs=x,t.parseInteractionSettings=function(e,t){return{component:e,el:t.el,useEventCenter:null==t.useEventCenter||t.useEventCenter,isHitComboAllowed:t.isHitComboAllowed||null}},t.pointInsideRect=function(e,t){return e.left>=t.left&&e.left<t.right&&e.top>=t.top&&e.top<t.bottom},t.preventContextMenu=function(e){e.addEventListener("contextmenu",D)},t.preventDefault=D,t.preventSelection=function(e){e.style.userSelect="none",e.addEventListener("selectstart",D)},t.rangeContainsMarker=Rt,t.rangeContainsRange=Tt,t.rangesEqual=Ct,t.rangesIntersect=wt,t.reduceCurrentDate=function(e,t){return"CHANGE_DATE"===t.type?t.dateMarker:e},t.reduceEventStore=function(e,t,n,r,i){switch(t.type){case"RECEIVE_EVENTS":return function(e,t,n,r,i,s){if(t&&n===t.latestFetchId){let n=Ze($n(i,t,s),t,s);return r&&(n=Ye(n,r,s)),$e(er(e,t.sourceId),n)}return e}(e,n[t.sourceId],t.fetchId,t.fetchRange,t.rawEvents,i);case"RESET_RAW_EVENTS":return function(e,t,n,r,i){const{defIdMap:s,instanceIdMap:o}=function(e){const{defs:t,instances:n}=e,r={},i={};for(let e in t){const n=t[e],{publicId:i}=n;i&&(r[i]=e)}for(let e in n){const r=t[n[e].defId],{publicId:s}=r;s&&(i[s]=e)}return{defIdMap:r,instanceIdMap:i}}(e);return Ye(Ze($n(n,t,i),t,i,!1,s,o),r,i)}(e,n[t.sourceId],t.rawEvents,r.activeRange,i);case"ADD_EVENTS":return function(e,t,n,r){return n&&(t=Ye(t,n,r)),$e(e,t)}(e,t.eventStore,r?r.activeRange:null,i);case"RESET_EVENTS":return t.eventStore;case"MERGE_EVENTS":return $e(e,t.eventStore);case"PREV":case"NEXT":case"CHANGE_DATE":case"CHANGE_VIEW_TYPE":return r?Ye(e,r.activeRange,i):e;case"REMOVE_EVENTS":return function(e,t){let{defs:n,instances:r}=e,i={},s={};for(let e in n)t.defs[e]||(i[e]=n[e]);for(let e in r)!t.instances[e]&&i[r[e].defId]&&(s[e]=r[e]);return{defs:i,instances:s}}(e,t.eventStore);case"REMOVE_EVENT_SOURCE":return er(e,t.sourceId);case"REMOVE_ALL_EVENT_SOURCES":return Ke(e,(e=>!e.sourceId));case"REMOVE_ALL_EVENTS":return{defs:{},instances:{}};default:return e}},t.refineEventDef=dt,t.refineProps=We,t.removeElement=f,t.removeExact=function(e,t){let n=0,r=0;for(;r<e.length;)e[r]===t?(e.splice(r,1),n+=1):r+=1;return n},t.renderChunkContent=pr,t.renderFill=function(e){return r.createElement("div",{className:`fc-${e}`})},t.renderMicroColGroup=mr,t.renderScrollShim=function(e){return r.createElement("div",{className:"fc-scrollgrid-sticky-shim",style:{width:e.clientWidth,minWidth:e.tableMinWidth}})},t.requestJson=function(e,t,n){const r={method:e=e.toUpperCase()};return"GET"===e?t+=(-1===t.indexOf("?")?"?":"&")+new URLSearchParams(n):(r.body=new URLSearchParams(n),r.headers={"Content-Type":"application/x-www-form-urlencoded"}),fetch(t,r).then((e=>{if(e.ok)return e.json().then((t=>[t,e]),(()=>{throw new ar("Failure parsing JSON",e)}));throw new ar("Request failed",e)}))},t.rezoneEventStoreDates=function(e,t,n){let{defs:r}=e,i=Q(e.instances,(e=>r[e.defId].allDay?e:Object.assign(Object.assign({},e),{range:{start:n.createMarker(t.toDate(e.range.start,e.forcedStartTzo)),end:n.createMarker(t.toDate(e.range.end,e.forcedEndTzo))},forcedStartTzo:n.canComputeOffset?null:e.forcedStartTzo,forcedEndTzo:n.canComputeOffset?null:e.forcedEndTzo})));return{defs:r,instances:i}},t.sanitizeShrinkWidth=vr,t.setRef=$t,t.sliceEventStore=hn,t.sortEventSegs=function(e,t){let n=e.map(mn);return n.sort(((e,n)=>k(e,n,t))),n.map((e=>e._seg))},t.startOfDay=ce,t.subtractDurations=function(e,t){return{years:e.years-t.years,months:e.months-t.months,days:e.days-t.days,milliseconds:e.milliseconds-t.milliseconds}},t.translateRect=function(e,t,n){return{left:e.left+t,right:e.right+t,top:e.top+n,bottom:e.bottom+n}},t.triggerDateSelect=tn,t.unpromisify=function(e,t,n){let r=!1,i=function(e){r||(r=!0,t(e))},s=function(e){r||(r=!0,n(e))},o=e(i,s);o&&"function"==typeof o.then&&o.then(i,s)},t.whenTransitionDone=function(e,t){let n=r=>{t(r),C.forEach((t=>{e.removeEventListener(t,n)}))};C.forEach((t=>{e.addEventListener(t,n)}))},t.wholeDivideDurations=function(e,t){let n=null;for(let r=0;r<B.length;r+=1){let i=B[r];if(t[i]){let r=e[i]/t[i];if(!H(r)||null!==n&&n!==r)return null;n=r}else if(e[i])return null}return n}},368:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(873);n(400),n(748),t.BASE_OPTION_DEFAULTS=r.BASE_OPTION_DEFAULTS,t.BaseComponent=r.BaseComponent,t.BgEvent=r.BgEvent,t.CalendarImpl=r.CalendarImpl,t.CalendarRoot=r.CalendarRoot,t.ContentContainer=r.ContentContainer,t.CustomRenderingStore=r.CustomRenderingStore,t.DateComponent=r.DateComponent,t.DateEnv=r.DateEnv,t.DateProfileGenerator=r.DateProfileGenerator,t.DayCellContainer=r.DayCellContainer,t.DayHeader=r.DayHeader,t.DaySeriesModel=r.DaySeriesModel,t.DayTableModel=r.DayTableModel,t.DelayedRunner=r.DelayedRunner,t.ElementDragging=r.ElementDragging,t.ElementScrollController=r.ElementScrollController,t.Emitter=r.Emitter,t.EventContainer=r.EventContainer,t.EventImpl=r.EventImpl,t.Interaction=r.Interaction,t.MoreLinkContainer=r.MoreLinkContainer,t.NamedTimeZoneImpl=r.NamedTimeZoneImpl,t.NowIndicatorContainer=r.NowIndicatorContainer,t.NowTimer=r.NowTimer,t.PositionCache=r.PositionCache,t.RefMap=r.RefMap,t.ScrollController=r.ScrollController,t.ScrollResponder=r.ScrollResponder,t.Scroller=r.Scroller,t.SegHierarchy=r.SegHierarchy,t.SimpleScrollGrid=r.SimpleScrollGrid,t.Slicer=r.Slicer,t.Splitter=r.Splitter,t.StandardEvent=r.StandardEvent,t.TableDateCell=r.TableDateCell,t.TableDowCell=r.TableDowCell,t.Theme=r.Theme,t.ViewContainer=r.ViewContainer,t.ViewContextType=r.ViewContextType,t.WeekNumberContainer=r.WeekNumberContainer,t.WindowScrollController=r.WindowScrollController,t.addDays=r.addDays,t.addDurations=r.addDurations,t.addMs=r.addMs,t.addWeeks=r.addWeeks,t.allowContextMenu=r.allowContextMenu,t.allowSelection=r.allowSelection,t.applyMutationToEventStore=r.applyMutationToEventStore,t.applyStyle=r.applyStyle,t.asCleanDays=r.asCleanDays,t.asRoughMinutes=r.asRoughMinutes,t.asRoughMs=r.asRoughMs,t.asRoughSeconds=r.asRoughSeconds,t.binarySearch=r.binarySearch,t.buildElAttrs=r.buildElAttrs,t.buildEntryKey=r.buildEntryKey,t.buildEventApis=r.buildEventApis,t.buildEventRangeKey=r.buildEventRangeKey,t.buildIsoString=r.buildIsoString,t.buildNavLinkAttrs=r.buildNavLinkAttrs,t.buildSegTimeText=r.buildSegTimeText,t.collectFromHash=r.collectFromHash,t.combineEventUis=r.combineEventUis,t.compareByFieldSpecs=r.compareByFieldSpecs,t.compareNumbers=r.compareNumbers,t.compareObjs=r.compareObjs,t.computeEarliestSegStart=r.computeEarliestSegStart,t.computeEdges=r.computeEdges,t.computeFallbackHeaderFormat=r.computeFallbackHeaderFormat,t.computeInnerRect=r.computeInnerRect,t.computeRect=r.computeRect,t.computeShrinkWidth=r.computeShrinkWidth,t.computeVisibleDayRange=r.computeVisibleDayRange,t.config=r.config,t.constrainPoint=r.constrainPoint,t.createDuration=r.createDuration,t.createEmptyEventStore=r.createEmptyEventStore,t.createEventInstance=r.createEventInstance,t.createEventUi=r.createEventUi,t.createFormatter=r.createFormatter,t.diffDates=r.diffDates,t.diffDayAndTime=r.diffDayAndTime,t.diffDays=r.diffDays,t.diffPoints=r.diffPoints,t.diffWeeks=r.diffWeeks,t.diffWholeDays=r.diffWholeDays,t.diffWholeWeeks=r.diffWholeWeeks,t.disableCursor=r.disableCursor,t.elementClosest=r.elementClosest,t.elementMatches=r.elementMatches,t.enableCursor=r.enableCursor,t.eventTupleToStore=r.eventTupleToStore,t.filterHash=r.filterHash,t.findDirectChildren=r.findDirectChildren,t.findElements=r.findElements,t.flexibleCompare=r.flexibleCompare,t.formatDayString=r.formatDayString,t.formatIsoMonthStr=r.formatIsoMonthStr,t.formatIsoTimeString=r.formatIsoTimeString,t.getAllowYScrolling=r.getAllowYScrolling,t.getCanVGrowWithinCell=r.getCanVGrowWithinCell,t.getClippingParents=r.getClippingParents,t.getDateMeta=r.getDateMeta,t.getDayClassNames=r.getDayClassNames,t.getDefaultEventEnd=r.getDefaultEventEnd,t.getElSeg=r.getElSeg,t.getEntrySpanEnd=r.getEntrySpanEnd,t.getEventTargetViaRoot=r.getEventTargetViaRoot,t.getIsRtlScrollbarOnLeft=r.getIsRtlScrollbarOnLeft,t.getRectCenter=r.getRectCenter,t.getRelevantEvents=r.getRelevantEvents,t.getScrollGridClassNames=r.getScrollGridClassNames,t.getScrollbarWidths=r.getScrollbarWidths,t.getSectionClassNames=r.getSectionClassNames,t.getSectionHasLiquidHeight=r.getSectionHasLiquidHeight,t.getSegAnchorAttrs=r.getSegAnchorAttrs,t.getSegMeta=r.getSegMeta,t.getSlotClassNames=r.getSlotClassNames,t.getStickyFooterScrollbar=r.getStickyFooterScrollbar,t.getStickyHeaderDates=r.getStickyHeaderDates,t.getUniqueDomId=r.getUniqueDomId,t.greatestDurationDenominator=r.greatestDurationDenominator,t.groupIntersectingEntries=r.groupIntersectingEntries,t.guid=r.guid,t.hasBgRendering=r.hasBgRendering,t.hasCustomDayCellContent=r.hasCustomDayCellContent,t.hasShrinkWidth=r.hasShrinkWidth,t.identity=r.identity,t.injectStyles=r.injectStyles,t.interactionSettingsStore=r.interactionSettingsStore,t.interactionSettingsToStore=r.interactionSettingsToStore,t.intersectRanges=r.intersectRanges,t.intersectRects=r.intersectRects,t.intersectSpans=r.intersectSpans,t.isArraysEqual=r.isArraysEqual,t.isColPropsEqual=r.isColPropsEqual,t.isDateSelectionValid=r.isDateSelectionValid,t.isDateSpansEqual=r.isDateSpansEqual,t.isInt=r.isInt,t.isInteractionValid=r.isInteractionValid,t.isMultiDayRange=r.isMultiDayRange,t.isPropsEqual=r.isPropsEqual,t.isPropsValid=r.isPropsValid,t.isValidDate=r.isValidDate,t.mapHash=r.mapHash,t.memoize=r.memoize,t.memoizeArraylike=r.memoizeArraylike,t.memoizeHashlike=r.memoizeHashlike,t.memoizeObjArg=r.memoizeObjArg,t.mergeEventStores=r.mergeEventStores,t.multiplyDuration=r.multiplyDuration,t.padStart=r.padStart,t.parseBusinessHours=r.parseBusinessHours,t.parseClassNames=r.parseClassNames,t.parseDragMeta=r.parseDragMeta,t.parseEventDef=r.parseEventDef,t.parseFieldSpecs=r.parseFieldSpecs,t.parseMarker=r.parse,t.pointInsideRect=r.pointInsideRect,t.preventContextMenu=r.preventContextMenu,t.preventDefault=r.preventDefault,t.preventSelection=r.preventSelection,t.rangeContainsMarker=r.rangeContainsMarker,t.rangeContainsRange=r.rangeContainsRange,t.rangesEqual=r.rangesEqual,t.rangesIntersect=r.rangesIntersect,t.refineEventDef=r.refineEventDef,t.refineProps=r.refineProps,t.removeElement=r.removeElement,t.removeExact=r.removeExact,t.renderChunkContent=r.renderChunkContent,t.renderFill=r.renderFill,t.renderMicroColGroup=r.renderMicroColGroup,t.renderScrollShim=r.renderScrollShim,t.requestJson=r.requestJson,t.sanitizeShrinkWidth=r.sanitizeShrinkWidth,t.setRef=r.setRef,t.sliceEventStore=r.sliceEventStore,t.sortEventSegs=r.sortEventSegs,t.startOfDay=r.startOfDay,t.translateRect=r.translateRect,t.triggerDateSelect=r.triggerDateSelect,t.unpromisify=r.unpromisify,t.whenTransitionDone=r.whenTransitionDone,t.wholeDivideDurations=r.wholeDivideDurations},170:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(400),i=n(748),s=n(873);Object.defineProperty(t,"createPortal",{enumerable:!0,get:function(){return i.createPortal}}),t.createContext=s.createContext,t.flushSync=s.flushSync,Object.keys(r).forEach((function(e){"default"===e||t.hasOwnProperty(e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}))},610:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(553),i=n(957);n(368),n(170);var s=r.createPlugin({name:"@fullcalendar/daygrid",initialView:"dayGridMonth",views:{dayGrid:{component:i.DayGridView,dateProfileGeneratorClass:i.TableDateProfileGenerator},dayGridDay:{type:"dayGrid",duration:{days:1}},dayGridWeek:{type:"dayGrid",duration:{weeks:1}},dayGridMonth:{type:"dayGrid",duration:{months:1},fixedWeekCount:!0},dayGridYear:{type:"dayGrid",duration:{years:1}}}});t.default=s},957:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(368),i=n(170);function s(e,t){let n=[];for(let e=0;e<t;e+=1)n[e]=[];for(let t of e)n[t.row].push(t);return n}function o(e,t){let n=[];for(let e=0;e<t;e+=1)n[e]=[];for(let t of e)n[t.firstCol].push(t);return n}function a(e,t){let n=[];if(e){for(let r=0;r<t;r+=1)n[r]={affectedInstances:e.affectedInstances,isEvent:e.isEvent,segs:[]};for(let t of e.segs)n[t.row].segs.push(t)}else for(let e=0;e<t;e+=1)n[e]=null;return n}r.injectStyles(':root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:"";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:"";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}');const l=r.createFormatter({hour:"numeric",minute:"2-digit",omitZeroMinute:!0,meridiem:"narrow"});function c(e){let{display:t}=e.eventRange.ui;return"list-item"===t||"auto"===t&&!e.eventRange.def.allDay&&e.firstCol===e.lastCol&&e.isStart&&e.isEnd}class d extends r.BaseComponent{render(){let{props:e}=this;return i.createElement(r.StandardEvent,Object.assign({},e,{elClasses:["fc-daygrid-event","fc-daygrid-block-event","fc-h-event"],defaultTimeFormat:l,defaultDisplayEventEnd:e.defaultDisplayEventEnd,disableResizing:!e.seg.eventRange.def.allDay}))}}class u extends r.BaseComponent{render(){let{props:e,context:t}=this,{options:n}=t,{seg:s}=e,o=n.eventTimeFormat||l,a=r.buildSegTimeText(s,o,t,!0,e.defaultDisplayEventEnd);return i.createElement(r.EventContainer,Object.assign({},e,{elTag:"a",elClasses:["fc-daygrid-event","fc-daygrid-dot-event"],elAttrs:r.getSegAnchorAttrs(e.seg,t),defaultGenerator:h,timeText:a,isResizing:!1,isDateSelecting:!1}))}}function h(e){return i.createElement(i.Fragment,null,i.createElement("div",{className:"fc-daygrid-event-dot",style:{borderColor:e.borderColor||e.backgroundColor}}),e.timeText&&i.createElement("div",{className:"fc-event-time"},e.timeText),i.createElement("div",{className:"fc-event-title"},e.event.title||i.createElement(i.Fragment,null," ")))}class f extends r.BaseComponent{constructor(){super(...arguments),this.compileSegs=r.memoize(p)}render(){let{props:e}=this,{allSegs:t,invisibleSegs:n}=this.compileSegs(e.singlePlacements);return i.createElement(r.MoreLinkContainer,{elClasses:["fc-daygrid-more-link"],dateProfile:e.dateProfile,todayRange:e.todayRange,allDayDate:e.allDayDate,moreCnt:e.moreCnt,allSegs:t,hiddenSegs:n,alignmentElRef:e.alignmentElRef,alignGridTop:e.alignGridTop,extraDateSpan:e.extraDateSpan,popoverContent:()=>{let n=(e.eventDrag?e.eventDrag.affectedInstances:null)||(e.eventResize?e.eventResize.affectedInstances:null)||{};return i.createElement(i.Fragment,null,t.map((t=>{let s=t.eventRange.instance.instanceId;return i.createElement("div",{className:"fc-daygrid-event-harness",key:s,style:{visibility:n[s]?"hidden":""}},c(t)?i.createElement(u,Object.assign({seg:t,isDragging:!1,isSelected:s===e.eventSelection,defaultDisplayEventEnd:!1},r.getSegMeta(t,e.todayRange))):i.createElement(d,Object.assign({seg:t,isDragging:!1,isResizing:!1,isDateSelecting:!1,isSelected:s===e.eventSelection,defaultDisplayEventEnd:!1},r.getSegMeta(t,e.todayRange))))})))}})}}function p(e){let t=[],n=[];for(let r of e)t.push(r.seg),r.isVisible||n.push(r.seg);return{allSegs:t,invisibleSegs:n}}const g=r.createFormatter({week:"narrow"});class m extends r.DateComponent{constructor(){super(...arguments),this.rootElRef=i.createRef(),this.state={dayNumberId:r.getUniqueDomId()},this.handleRootEl=e=>{r.setRef(this.rootElRef,e),r.setRef(this.props.elRef,e)}}render(){let{context:e,props:t,state:n,rootElRef:s}=this,{options:o,dateEnv:a}=e,{date:l,dateProfile:c}=t;const d=t.showDayNumber&&function(e,t,n){const{start:i,end:s}=t,o=r.addMs(s,-1),a=n.getYear(i),l=n.getMonth(i),c=n.getYear(o),d=n.getMonth(o);return!(a===c&&l===d)&&Boolean(e.valueOf()===i.valueOf()||1===n.getDay(e)&&e.valueOf()<s.valueOf())}(l,c.currentRange,a);return i.createElement(r.DayCellContainer,{elTag:"td",elRef:this.handleRootEl,elClasses:["fc-daygrid-day",...t.extraClassNames||[]],elAttrs:Object.assign(Object.assign(Object.assign({},t.extraDataAttrs),t.showDayNumber?{"aria-labelledby":n.dayNumberId}:{}),{role:"gridcell"}),defaultGenerator:v,date:l,dateProfile:c,todayRange:t.todayRange,showDayNumber:t.showDayNumber,isMonthStart:d,extraRenderProps:t.extraRenderProps},((a,c)=>i.createElement("div",{ref:t.innerElRef,className:"fc-daygrid-day-frame fc-scrollgrid-sync-inner",style:{minHeight:t.minHeight}},t.showWeekNumber&&i.createElement(r.WeekNumberContainer,{elTag:"a",elClasses:["fc-daygrid-week-number"],elAttrs:r.buildNavLinkAttrs(e,l,"week"),date:l,defaultFormat:g}),!c.isDisabled&&(t.showDayNumber||r.hasCustomDayCellContent(o)||t.forceDayTop)?i.createElement("div",{className:"fc-daygrid-day-top"},i.createElement(a,{elTag:"a",elClasses:["fc-daygrid-day-number",d&&"fc-daygrid-month-start"],elAttrs:Object.assign(Object.assign({},r.buildNavLinkAttrs(e,l)),{id:n.dayNumberId})})):t.showDayNumber?i.createElement("div",{className:"fc-daygrid-day-top",style:{visibility:"hidden"}},i.createElement("a",{className:"fc-daygrid-day-number"}," ")):void 0,i.createElement("div",{className:"fc-daygrid-day-events",ref:t.fgContentElRef},t.fgContent,i.createElement("div",{className:"fc-daygrid-day-bottom",style:{marginTop:t.moreMarginTop}},i.createElement(f,{allDayDate:l,singlePlacements:t.singlePlacements,moreCnt:t.moreCnt,alignmentElRef:s,alignGridTop:!t.showDayNumber,extraDateSpan:t.extraDateSpan,dateProfile:t.dateProfile,eventSelection:t.eventSelection,eventDrag:t.eventDrag,eventResize:t.eventResize,todayRange:t.todayRange}))),i.createElement("div",{className:"fc-daygrid-day-bg"},t.bgContent))))}}function v(e){return e.dayNumberText||i.createElement(i.Fragment,null," ")}function y(e,t,n,i){if(e.firstCol===t&&e.lastCol===n-1)return e;let s=e.eventRange,o=s.range,a=r.intersectRanges(o,{start:i[t].date,end:r.addDays(i[n-1].date,1)});return Object.assign(Object.assign({},e),{firstCol:t,lastCol:n-1,eventRange:{def:s.def,ui:Object.assign(Object.assign({},s.ui),{durationEditable:!1}),instance:s.instance,range:a},isStart:e.isStart&&a.start.valueOf()===o.start.valueOf(),isEnd:e.isEnd&&a.end.valueOf()===o.end.valueOf()})}class _ extends r.SegHierarchy{constructor(){super(...arguments),this.hiddenConsumes=!1,this.forceHidden={}}addSegs(e){const t=super.addSegs(e),{entriesByLevel:n}=this,i=e=>!this.forceHidden[r.buildEntryKey(e)];for(let e=0;e<n.length;e+=1)n[e]=n[e].filter(i);return t}handleInvalidInsertion(e,t,n){const{entriesByLevel:i,forceHidden:s}=this,{touchingEntry:o,touchingLevel:a,touchingLateral:l}=e;if(this.hiddenConsumes&&o){const e=r.buildEntryKey(o);if(!s[e])if(this.allowReslicing){const e=Object.assign(Object.assign({},o),{span:r.intersectSpans(o.span,t.span)});s[r.buildEntryKey(e)]=!0,i[a][l]=e,this.splitEntry(o,t,n)}else s[e]=!0,n.push(o)}return super.handleInvalidInsertion(e,t,n)}}class b extends r.DateComponent{constructor(){super(...arguments),this.cellElRefs=new r.RefMap,this.frameElRefs=new r.RefMap,this.fgElRefs=new r.RefMap,this.segHarnessRefs=new r.RefMap,this.rootElRef=i.createRef(),this.state={framePositions:null,maxContentHeight:null,eventInstanceHeights:{}},this.handleResize=e=>{e&&this.updateSizing(!0)}}render(){let{props:e,state:t,context:n}=this,{options:s}=n,a=e.cells.length,l=o(e.businessHourSegs,a),c=o(e.bgEventSegs,a),d=o(this.getHighlightSegs(),a),u=o(this.getMirrorSegs(),a),{singleColPlacements:h,multiColPlacements:f,moreCnts:p,moreMarginTops:g}=function(e,t,n,r,i,s,o){let a=new _;a.allowReslicing=!0,a.strictOrder=r,!0===t||!0===n?(a.maxCoord=s,a.hiddenConsumes=!0):"number"==typeof t?a.maxStackCnt=t:"number"==typeof n&&(a.maxStackCnt=n,a.hiddenConsumes=!0);let l=[],c=[];for(let t=0;t<e.length;t+=1){let n=e[t],{instanceId:r}=n.eventRange.instance,s=i[r];null!=s?l.push({index:t,thickness:s,span:{start:n.firstCol,end:n.lastCol+1}}):c.push(n)}let d=a.addSegs(l),u=a.toRects(),{singleColPlacements:h,multiColPlacements:f,leftoverMargins:p}=function(e,t,n){let r=function(e,t){let n=[];for(let e=0;e<t;e+=1)n.push([]);for(let t of e)for(let e=t.span.start;e<t.span.end;e+=1)n[e].push(t);return n}(e,n.length),i=[],s=[],o=[];for(let e=0;e<n.length;e+=1){let a=r[e],l=[],c=0,d=0;for(let r of a){let i=t[r.index];l.push({seg:y(i,e,e+1,n),isVisible:!0,isAbsolute:!1,absoluteTop:r.levelCoord,marginTop:r.levelCoord-c}),c=r.levelCoord+r.thickness}let u=[];c=0,d=0;for(let r of a){let i=t[r.index],s=r.span.end-r.span.start>1,o=r.span.start===e;d+=r.levelCoord-c,c=r.levelCoord+r.thickness,s?(d+=r.thickness,o&&u.push({seg:y(i,r.span.start,r.span.end,n),isVisible:!0,isAbsolute:!0,absoluteTop:r.levelCoord,marginTop:0})):o&&(u.push({seg:y(i,r.span.start,r.span.end,n),isVisible:!0,isAbsolute:!1,absoluteTop:r.levelCoord,marginTop:d}),d=0)}i.push(l),s.push(u),o.push(d)}return{singleColPlacements:i,multiColPlacements:s,leftoverMargins:o}}(u,e,o),g=[],m=[];for(let e of c){f[e.firstCol].push({seg:e,isVisible:!1,isAbsolute:!0,absoluteTop:0,marginTop:0});for(let t=e.firstCol;t<=e.lastCol;t+=1)h[t].push({seg:y(e,t,t+1,o),isVisible:!1,isAbsolute:!1,absoluteTop:0,marginTop:0})}for(let e=0;e<o.length;e+=1)g.push(0);for(let t of d){let n=e[t.index],r=t.span;f[r.start].push({seg:y(n,r.start,r.end,o),isVisible:!1,isAbsolute:!0,absoluteTop:0,marginTop:0});for(let e=r.start;e<r.end;e+=1)g[e]+=1,h[e].push({seg:y(n,e,e+1,o),isVisible:!1,isAbsolute:!1,absoluteTop:0,marginTop:0})}for(let e=0;e<o.length;e+=1)m.push(p[e]);return{singleColPlacements:h,multiColPlacements:f,moreCnts:g,moreMarginTops:m}}(r.sortEventSegs(e.fgEventSegs,s.eventOrder),e.dayMaxEvents,e.dayMaxEventRows,s.eventOrderStrict,t.eventInstanceHeights,t.maxContentHeight,e.cells),v=e.eventDrag&&e.eventDrag.affectedInstances||e.eventResize&&e.eventResize.affectedInstances||{};return i.createElement("tr",{ref:this.rootElRef,role:"row"},e.renderIntro&&e.renderIntro(),e.cells.map(((t,n)=>{let r=this.renderFgSegs(n,e.forPrint?h[n]:f[n],e.todayRange,v),s=this.renderFgSegs(n,function(e,t){if(!e.length)return[];let n=function(e){let t={};for(let n of e)for(let e of n)t[e.seg.eventRange.instance.instanceId]=e.absoluteTop;return t}(t);return e.map((e=>({seg:e,isVisible:!0,isAbsolute:!0,absoluteTop:n[e.eventRange.instance.instanceId],marginTop:0})))}(u[n],f),e.todayRange,{},Boolean(e.eventDrag),Boolean(e.eventResize),!1);return i.createElement(m,{key:t.key,elRef:this.cellElRefs.createRef(t.key),innerElRef:this.frameElRefs.createRef(t.key),dateProfile:e.dateProfile,date:t.date,showDayNumber:e.showDayNumbers,showWeekNumber:e.showWeekNumbers&&0===n,forceDayTop:e.showWeekNumbers,todayRange:e.todayRange,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,extraRenderProps:t.extraRenderProps,extraDataAttrs:t.extraDataAttrs,extraClassNames:t.extraClassNames,extraDateSpan:t.extraDateSpan,moreCnt:p[n],moreMarginTop:g[n],singlePlacements:h[n],fgContentElRef:this.fgElRefs.createRef(t.key),fgContent:i.createElement(i.Fragment,null,i.createElement(i.Fragment,null,r),i.createElement(i.Fragment,null,s)),bgContent:i.createElement(i.Fragment,null,this.renderFillSegs(d[n],"highlight"),this.renderFillSegs(l[n],"non-business"),this.renderFillSegs(c[n],"bg-event")),minHeight:e.cellMinHeight})})))}componentDidMount(){this.updateSizing(!0),this.context.addResizeHandler(this.handleResize)}componentDidUpdate(e,t){let n=this.props;this.updateSizing(!r.isPropsEqual(e,n))}componentWillUnmount(){this.context.removeResizeHandler(this.handleResize)}getHighlightSegs(){let{props:e}=this;return e.eventDrag&&e.eventDrag.segs.length?e.eventDrag.segs:e.eventResize&&e.eventResize.segs.length?e.eventResize.segs:e.dateSelectionSegs}getMirrorSegs(){let{props:e}=this;return e.eventResize&&e.eventResize.segs.length?e.eventResize.segs:[]}renderFgSegs(e,t,n,s,o,a,l){let{context:h}=this,{eventSelection:f}=this.props,{framePositions:p}=this.state,g=1===this.props.cells.length,m=o||a||l,v=[];if(p)for(let y of t){let{seg:t}=y,{instanceId:_}=t.eventRange.instance,b=_+":"+e,E=y.isVisible&&!s[_],S=y.isAbsolute,D="",A="";S&&(h.isRtl?(A=0,D=p.lefts[t.lastCol]-p.lefts[t.firstCol]):(D=0,A=p.rights[t.firstCol]-p.rights[t.lastCol])),v.push(i.createElement("div",{className:"fc-daygrid-event-harness"+(S?" fc-daygrid-event-harness-abs":""),key:b,ref:m?null:this.segHarnessRefs.createRef(b),style:{visibility:E?"":"hidden",marginTop:S?"":y.marginTop,top:S?y.absoluteTop:"",left:D,right:A}},c(t)?i.createElement(u,Object.assign({seg:t,isDragging:o,isSelected:_===f,defaultDisplayEventEnd:g},r.getSegMeta(t,n))):i.createElement(d,Object.assign({seg:t,isDragging:o,isResizing:a,isDateSelecting:l,isSelected:_===f,defaultDisplayEventEnd:g},r.getSegMeta(t,n)))))}return v}renderFillSegs(e,t){let{isRtl:n}=this.context,{todayRange:s}=this.props,{framePositions:o}=this.state,a=[];if(o)for(let l of e){let e=n?{right:0,left:o.lefts[l.lastCol]-o.lefts[l.firstCol]}:{left:0,right:o.rights[l.firstCol]-o.rights[l.lastCol]};a.push(i.createElement("div",{key:r.buildEventRangeKey(l.eventRange),className:"fc-daygrid-bg-harness",style:e},"bg-event"===t?i.createElement(r.BgEvent,Object.assign({seg:l},r.getSegMeta(l,s))):r.renderFill(t)))}return i.createElement(i.Fragment,{},...a)}updateSizing(e){let{props:t,state:n,frameElRefs:i}=this;if(!t.forPrint&&null!==t.clientWidth){if(e){let e=t.cells.map((e=>i.currentMap[e.key]));if(e.length){let t=this.rootElRef.current,i=new r.PositionCache(t,e,!0,!1);n.framePositions&&n.framePositions.similarTo(i)||this.setState({framePositions:new r.PositionCache(t,e,!0,!1)})}}const s=this.state.eventInstanceHeights,o=this.queryEventInstanceHeights(),a=!0===t.dayMaxEvents||!0===t.dayMaxEventRows;this.safeSetState({eventInstanceHeights:Object.assign(Object.assign({},s),o),maxContentHeight:a?this.computeMaxContentHeight():null})}}queryEventInstanceHeights(){let e=this.segHarnessRefs.currentMap,t={};for(let n in e){let r=Math.round(e[n].getBoundingClientRect().height),i=n.split(":")[0];t[i]=Math.max(t[i]||0,r)}return t}computeMaxContentHeight(){let e=this.props.cells[0].key,t=this.cellElRefs.currentMap[e],n=this.fgElRefs.currentMap[e];return t.getBoundingClientRect().bottom-n.getBoundingClientRect().top}getCellEls(){let e=this.cellElRefs.currentMap;return this.props.cells.map((t=>e[t.key]))}}b.addStateEquality({eventInstanceHeights:r.isPropsEqual});class E extends r.DateComponent{constructor(){super(...arguments),this.splitBusinessHourSegs=r.memoize(s),this.splitBgEventSegs=r.memoize(s),this.splitFgEventSegs=r.memoize(s),this.splitDateSelectionSegs=r.memoize(s),this.splitEventDrag=r.memoize(a),this.splitEventResize=r.memoize(a),this.rowRefs=new r.RefMap}render(){let{props:e,context:t}=this,n=e.cells.length,s=this.splitBusinessHourSegs(e.businessHourSegs,n),o=this.splitBgEventSegs(e.bgEventSegs,n),a=this.splitFgEventSegs(e.fgEventSegs,n),l=this.splitDateSelectionSegs(e.dateSelectionSegs,n),c=this.splitEventDrag(e.eventDrag,n),d=this.splitEventResize(e.eventResize,n),u=n>=7&&e.clientWidth?e.clientWidth/t.options.aspectRatio/6:null;return i.createElement(r.NowTimer,{unit:"day"},((t,r)=>i.createElement(i.Fragment,null,e.cells.map(((t,h)=>i.createElement(b,{ref:this.rowRefs.createRef(h),key:t.length?t[0].date.toISOString():h,showDayNumbers:n>1,showWeekNumbers:e.showWeekNumbers,todayRange:r,dateProfile:e.dateProfile,cells:t,renderIntro:e.renderRowIntro,businessHourSegs:s[h],eventSelection:e.eventSelection,bgEventSegs:o[h].filter(S),fgEventSegs:a[h],dateSelectionSegs:l[h],eventDrag:c[h],eventResize:d[h],dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,clientWidth:e.clientWidth,clientHeight:e.clientHeight,cellMinHeight:u,forPrint:e.forPrint}))))))}componentDidMount(){const e=this.rowRefs.currentMap[0].getCellEls()[0];this.rootEl=e?e.closest(".fc-daygrid-body"):null,this.rootEl&&this.context.registerInteractiveComponent(this,{el:this.rootEl,isHitComboAllowed:this.props.isHitComboAllowed})}componentWillUnmount(){this.rootEl&&(this.context.unregisterInteractiveComponent(this),this.rootEl=null)}prepareHits(){this.rowPositions=new r.PositionCache(this.rootEl,this.rowRefs.collect().map((e=>e.getCellEls()[0])),!1,!0),this.colPositions=new r.PositionCache(this.rootEl,this.rowRefs.currentMap[0].getCellEls(),!0,!1)}queryHit(e,t){let{colPositions:n,rowPositions:r}=this,i=n.leftToIndex(e),s=r.topToIndex(t);if(null!=s&&null!=i){let e=this.props.cells[s][i];return{dateProfile:this.props.dateProfile,dateSpan:Object.assign({range:this.getCellRange(s,i),allDay:!0},e.extraDateSpan),dayEl:this.getCellEl(s,i),rect:{left:n.lefts[i],right:n.rights[i],top:r.tops[s],bottom:r.bottoms[s]},layer:0}}return null}getCellEl(e,t){return this.rowRefs.currentMap[e].getCellEls()[t]}getCellRange(e,t){let n=this.props.cells[e][t].date;return{start:n,end:r.addDays(n,1)}}}function S(e){return e.eventRange.def.allDay}class D extends r.DateComponent{constructor(){super(...arguments),this.elRef=i.createRef(),this.needsScrollReset=!1}render(){let{props:e}=this,{dayMaxEventRows:t,dayMaxEvents:n,expandRows:r}=e,s=!0===n||!0===t;s&&!r&&(s=!1,t=null,n=null);let o=["fc-daygrid-body",s?"fc-daygrid-body-balanced":"fc-daygrid-body-unbalanced",r?"":"fc-daygrid-body-natural"];return i.createElement("div",{ref:this.elRef,className:o.join(" "),style:{width:e.clientWidth,minWidth:e.tableMinWidth}},i.createElement("table",{role:"presentation",className:"fc-scrollgrid-sync-table",style:{width:e.clientWidth,minWidth:e.tableMinWidth,height:r?e.clientHeight:""}},e.colGroupNode,i.createElement("tbody",{role:"presentation"},i.createElement(E,{dateProfile:e.dateProfile,cells:e.cells,renderRowIntro:e.renderRowIntro,showWeekNumbers:e.showWeekNumbers,clientWidth:e.clientWidth,clientHeight:e.clientHeight,businessHourSegs:e.businessHourSegs,bgEventSegs:e.bgEventSegs,fgEventSegs:e.fgEventSegs,dateSelectionSegs:e.dateSelectionSegs,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,dayMaxEvents:n,dayMaxEventRows:t,forPrint:e.forPrint,isHitComboAllowed:e.isHitComboAllowed}))))}componentDidMount(){this.requestScrollReset()}componentDidUpdate(e){e.dateProfile!==this.props.dateProfile?this.requestScrollReset():this.flushScrollReset()}requestScrollReset(){this.needsScrollReset=!0,this.flushScrollReset()}flushScrollReset(){if(this.needsScrollReset&&this.props.clientWidth){const e=function(e,t){let n;return t.currentRangeUnit.match(/year|month/)&&(n=e.querySelector(`[data-date="${r.formatIsoMonthStr(t.currentDate)}-01"]`)),n||(n=e.querySelector(`[data-date="${r.formatDayString(t.currentDate)}"]`)),n}(this.elRef.current,this.props.dateProfile);if(e){const t=e.closest(".fc-daygrid-body"),n=t.closest(".fc-scroller"),r=e.getBoundingClientRect().top-t.getBoundingClientRect().top;n.scrollTop=r?r+1:0}this.needsScrollReset=!1}}}class A extends r.Slicer{constructor(){super(...arguments),this.forceDayIfListItem=!0}sliceRange(e,t){return t.sliceRange(e)}}class C extends r.DateComponent{constructor(){super(...arguments),this.slicer=new A,this.tableRef=i.createRef()}render(){let{props:e,context:t}=this;return i.createElement(D,Object.assign({ref:this.tableRef},this.slicer.sliceProps(e,e.dateProfile,e.nextDayThreshold,t,e.dayTableModel),{dateProfile:e.dateProfile,cells:e.dayTableModel.cells,colGroupNode:e.colGroupNode,tableMinWidth:e.tableMinWidth,renderRowIntro:e.renderRowIntro,dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,showWeekNumbers:e.showWeekNumbers,expandRows:e.expandRows,headerAlignElRef:e.headerAlignElRef,clientWidth:e.clientWidth,clientHeight:e.clientHeight,forPrint:e.forPrint}))}}class w extends r.DateProfileGenerator{buildRenderRange(e,t,n){let r=super.buildRenderRange(e,t,n),{props:i}=this;return T({currentRange:r,snapToWeek:/^(year|month)$/.test(t),fixedWeekCount:i.fixedWeekCount,dateEnv:i.dateEnv})}}function T(e){let t,{dateEnv:n,currentRange:i}=e,{start:s,end:o}=i;if(e.snapToWeek&&(s=n.startOfWeek(s),t=n.startOfWeek(o),t.valueOf()!==o.valueOf()&&(o=r.addWeeks(t,1))),e.fixedWeekCount){let e=n.startOfWeek(n.startOfMonth(r.addDays(i.end,-1))),t=Math.ceil(r.diffWeeks(e,o));o=r.addWeeks(o,6-t)}return{start:s,end:o}}class R extends r.DateComponent{constructor(){super(...arguments),this.headerElRef=i.createRef()}renderSimpleLayout(e,t){let{props:n,context:s}=this,o=[],a=r.getStickyHeaderDates(s.options);return e&&o.push({type:"header",key:"header",isSticky:a,chunk:{elRef:this.headerElRef,tableClassName:"fc-col-header",rowContent:e}}),o.push({type:"body",key:"body",liquid:!0,chunk:{content:t}}),i.createElement(r.ViewContainer,{elClasses:["fc-daygrid"],viewSpec:s.viewSpec},i.createElement(r.SimpleScrollGrid,{liquid:!n.isHeightAuto&&!n.forPrint,collapsibleWidth:n.forPrint,cols:[],sections:o}))}renderHScrollLayout(e,t,n,s){let o=this.context.pluginHooks.scrollGridImpl;if(!o)throw new Error("No ScrollGrid implementation");let{props:a,context:l}=this,c=!a.forPrint&&r.getStickyHeaderDates(l.options),d=!a.forPrint&&r.getStickyFooterScrollbar(l.options),u=[];return e&&u.push({type:"header",key:"header",isSticky:c,chunks:[{key:"main",elRef:this.headerElRef,tableClassName:"fc-col-header",rowContent:e}]}),u.push({type:"body",key:"body",liquid:!0,chunks:[{key:"main",content:t}]}),d&&u.push({type:"footer",key:"footer",isSticky:!0,chunks:[{key:"main",content:r.renderScrollShim}]}),i.createElement(r.ViewContainer,{elClasses:["fc-daygrid"],viewSpec:l.viewSpec},i.createElement(o,{liquid:!a.isHeightAuto&&!a.forPrint,forPrint:a.forPrint,collapsibleWidth:a.forPrint,colGroups:[{cols:[{span:n,minWidth:s}]}],sections:u}))}}function O(e,t){let n=new r.DaySeriesModel(e.renderRange,t);return new r.DayTableModel(n,/year|month|week/.test(e.currentRangeUnit))}t.DayGridView=class extends R{constructor(){super(...arguments),this.buildDayTableModel=r.memoize(O),this.headerRef=i.createRef(),this.tableRef=i.createRef()}render(){let{options:e,dateProfileGenerator:t}=this.context,{props:n}=this,s=this.buildDayTableModel(n.dateProfile,t),o=e.dayHeaders&&i.createElement(r.DayHeader,{ref:this.headerRef,dateProfile:n.dateProfile,dates:s.headerDates,datesRepDistinctDays:1===s.rowCnt}),a=t=>i.createElement(C,{ref:this.tableRef,dateProfile:n.dateProfile,dayTableModel:s,businessHours:n.businessHours,dateSelection:n.dateSelection,eventStore:n.eventStore,eventUiBases:n.eventUiBases,eventSelection:n.eventSelection,eventDrag:n.eventDrag,eventResize:n.eventResize,nextDayThreshold:e.nextDayThreshold,colGroupNode:t.tableColGroupNode,tableMinWidth:t.tableMinWidth,dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,showWeekNumbers:e.weekNumbers,expandRows:!n.isHeightAuto,headerAlignElRef:this.headerElRef,clientWidth:t.clientWidth,clientHeight:t.clientHeight,forPrint:n.forPrint});return e.dayMinWidth?this.renderHScrollLayout(o,a,s.colCnt,e.dayMinWidth):this.renderSimpleLayout(o,a)}},t.DayTable=C,t.DayTableSlicer=A,t.Table=D,t.TableDateProfileGenerator=w,t.TableRows=E,t.TableView=R,t.buildDayTableModel=O,t.buildDayTableRenderRange=T},790:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(553),i=n(368);i.config.touchMouseIgnoreWait=500;let s=0,o=0,a=!1;class l{constructor(e){this.subjectEl=null,this.selector="",this.handleSelector="",this.shouldIgnoreMove=!1,this.shouldWatchScroll=!0,this.isDragging=!1,this.isTouchDragging=!1,this.wasTouchScroll=!1,this.handleMouseDown=e=>{if(!this.shouldIgnoreMouse()&&function(e){return 0===e.button&&!e.ctrlKey}(e)&&this.tryStart(e)){let t=this.createEventFromMouse(e,!0);this.emitter.trigger("pointerdown",t),this.initScrollWatch(t),this.shouldIgnoreMove||document.addEventListener("mousemove",this.handleMouseMove),document.addEventListener("mouseup",this.handleMouseUp)}},this.handleMouseMove=e=>{let t=this.createEventFromMouse(e);this.recordCoords(t),this.emitter.trigger("pointermove",t)},this.handleMouseUp=e=>{document.removeEventListener("mousemove",this.handleMouseMove),document.removeEventListener("mouseup",this.handleMouseUp),this.emitter.trigger("pointerup",this.createEventFromMouse(e)),this.cleanup()},this.handleTouchStart=e=>{if(this.tryStart(e)){this.isTouchDragging=!0;let t=this.createEventFromTouch(e,!0);this.emitter.trigger("pointerdown",t),this.initScrollWatch(t);let n=e.target;this.shouldIgnoreMove||n.addEventListener("touchmove",this.handleTouchMove),n.addEventListener("touchend",this.handleTouchEnd),n.addEventListener("touchcancel",this.handleTouchEnd),window.addEventListener("scroll",this.handleTouchScroll,!0)}},this.handleTouchMove=e=>{let t=this.createEventFromTouch(e);this.recordCoords(t),this.emitter.trigger("pointermove",t)},this.handleTouchEnd=e=>{if(this.isDragging){let t=e.target;t.removeEventListener("touchmove",this.handleTouchMove),t.removeEventListener("touchend",this.handleTouchEnd),t.removeEventListener("touchcancel",this.handleTouchEnd),window.removeEventListener("scroll",this.handleTouchScroll,!0),this.emitter.trigger("pointerup",this.createEventFromTouch(e)),this.cleanup(),this.isTouchDragging=!1,s+=1,setTimeout((()=>{s-=1}),i.config.touchMouseIgnoreWait)}},this.handleTouchScroll=()=>{this.wasTouchScroll=!0},this.handleScroll=e=>{if(!this.shouldIgnoreMove){let t=window.pageXOffset-this.prevScrollX+this.prevPageX,n=window.pageYOffset-this.prevScrollY+this.prevPageY;this.emitter.trigger("pointermove",{origEvent:e,isTouch:this.isTouchDragging,subjectEl:this.subjectEl,pageX:t,pageY:n,deltaX:t-this.origPageX,deltaY:n-this.origPageY})}},this.containerEl=e,this.emitter=new i.Emitter,e.addEventListener("mousedown",this.handleMouseDown),e.addEventListener("touchstart",this.handleTouchStart,{passive:!0}),o+=1,1===o&&window.addEventListener("touchmove",c,{passive:!1})}destroy(){this.containerEl.removeEventListener("mousedown",this.handleMouseDown),this.containerEl.removeEventListener("touchstart",this.handleTouchStart,{passive:!0}),o-=1,o||window.removeEventListener("touchmove",c,{passive:!1})}tryStart(e){let t=this.querySubjectEl(e),n=e.target;return!(!t||this.handleSelector&&!i.elementClosest(n,this.handleSelector)||(this.subjectEl=t,this.isDragging=!0,this.wasTouchScroll=!1,0))}cleanup(){a=!1,this.isDragging=!1,this.subjectEl=null,this.destroyScrollWatch()}querySubjectEl(e){return this.selector?i.elementClosest(e.target,this.selector):this.containerEl}shouldIgnoreMouse(){return s||this.isTouchDragging}cancelTouchScroll(){this.isDragging&&(a=!0)}initScrollWatch(e){this.shouldWatchScroll&&(this.recordCoords(e),window.addEventListener("scroll",this.handleScroll,!0))}recordCoords(e){this.shouldWatchScroll&&(this.prevPageX=e.pageX,this.prevPageY=e.pageY,this.prevScrollX=window.pageXOffset,this.prevScrollY=window.pageYOffset)}destroyScrollWatch(){this.shouldWatchScroll&&window.removeEventListener("scroll",this.handleScroll,!0)}createEventFromMouse(e,t){let n=0,r=0;return t?(this.origPageX=e.pageX,this.origPageY=e.pageY):(n=e.pageX-this.origPageX,r=e.pageY-this.origPageY),{origEvent:e,isTouch:!1,subjectEl:this.subjectEl,pageX:e.pageX,pageY:e.pageY,deltaX:n,deltaY:r}}createEventFromTouch(e,t){let n,r,i=e.touches,s=0,o=0;return i&&i.length?(n=i[0].pageX,r=i[0].pageY):(n=e.pageX,r=e.pageY),t?(this.origPageX=n,this.origPageY=r):(s=n-this.origPageX,o=r-this.origPageY),{origEvent:e,isTouch:!0,subjectEl:this.subjectEl,pageX:n,pageY:r,deltaX:s,deltaY:o}}}function c(e){a&&e.preventDefault()}class d{constructor(){this.isVisible=!1,this.sourceEl=null,this.mirrorEl=null,this.sourceElRect=null,this.parentNode=document.body,this.zIndex=9999,this.revertDuration=0}start(e,t,n){this.sourceEl=e,this.sourceElRect=this.sourceEl.getBoundingClientRect(),this.origScreenX=t-window.pageXOffset,this.origScreenY=n-window.pageYOffset,this.deltaX=0,this.deltaY=0,this.updateElPosition()}handleMove(e,t){this.deltaX=e-window.pageXOffset-this.origScreenX,this.deltaY=t-window.pageYOffset-this.origScreenY,this.updateElPosition()}setIsVisible(e){e?this.isVisible||(this.mirrorEl&&(this.mirrorEl.style.display=""),this.isVisible=e,this.updateElPosition()):this.isVisible&&(this.mirrorEl&&(this.mirrorEl.style.display="none"),this.isVisible=e)}stop(e,t){let n=()=>{this.cleanup(),t()};e&&this.mirrorEl&&this.isVisible&&this.revertDuration&&(this.deltaX||this.deltaY)?this.doRevertAnimation(n,this.revertDuration):setTimeout(n,0)}doRevertAnimation(e,t){let n=this.mirrorEl,r=this.sourceEl.getBoundingClientRect();n.style.transition="top "+t+"ms,left "+t+"ms",i.applyStyle(n,{left:r.left,top:r.top}),i.whenTransitionDone(n,(()=>{n.style.transition="",e()}))}cleanup(){this.mirrorEl&&(i.removeElement(this.mirrorEl),this.mirrorEl=null),this.sourceEl=null}updateElPosition(){this.sourceEl&&this.isVisible&&i.applyStyle(this.getMirrorEl(),{left:this.sourceElRect.left+this.deltaX,top:this.sourceElRect.top+this.deltaY})}getMirrorEl(){let e=this.sourceElRect,t=this.mirrorEl;return t||(t=this.mirrorEl=this.sourceEl.cloneNode(!0),t.style.userSelect="none",t.classList.add("fc-event-dragging"),i.applyStyle(t,{position:"fixed",zIndex:this.zIndex,visibility:"",boxSizing:"border-box",width:e.right-e.left,height:e.bottom-e.top,right:"auto",bottom:"auto",margin:0}),this.parentNode.appendChild(t)),t}}class u extends i.ScrollController{constructor(e,t){super(),this.handleScroll=()=>{this.scrollTop=this.scrollController.getScrollTop(),this.scrollLeft=this.scrollController.getScrollLeft(),this.handleScrollChange()},this.scrollController=e,this.doesListening=t,this.scrollTop=this.origScrollTop=e.getScrollTop(),this.scrollLeft=this.origScrollLeft=e.getScrollLeft(),this.scrollWidth=e.getScrollWidth(),this.scrollHeight=e.getScrollHeight(),this.clientWidth=e.getClientWidth(),this.clientHeight=e.getClientHeight(),this.clientRect=this.computeClientRect(),this.doesListening&&this.getEventTarget().addEventListener("scroll",this.handleScroll)}destroy(){this.doesListening&&this.getEventTarget().removeEventListener("scroll",this.handleScroll)}getScrollTop(){return this.scrollTop}getScrollLeft(){return this.scrollLeft}setScrollTop(e){this.scrollController.setScrollTop(e),this.doesListening||(this.scrollTop=Math.max(Math.min(e,this.getMaxScrollTop()),0),this.handleScrollChange())}setScrollLeft(e){this.scrollController.setScrollLeft(e),this.doesListening||(this.scrollLeft=Math.max(Math.min(e,this.getMaxScrollLeft()),0),this.handleScrollChange())}getClientWidth(){return this.clientWidth}getClientHeight(){return this.clientHeight}getScrollWidth(){return this.scrollWidth}getScrollHeight(){return this.scrollHeight}handleScrollChange(){}}class h extends u{constructor(e,t){super(new i.ElementScrollController(e),t)}getEventTarget(){return this.scrollController.el}computeClientRect(){return i.computeInnerRect(this.scrollController.el)}}class f extends u{constructor(e){super(new i.WindowScrollController,e)}getEventTarget(){return window}computeClientRect(){return{left:this.scrollLeft,right:this.scrollLeft+this.clientWidth,top:this.scrollTop,bottom:this.scrollTop+this.clientHeight}}handleScrollChange(){this.clientRect=this.computeClientRect()}}const p="function"==typeof performance?performance.now:Date.now;class g{constructor(){this.isEnabled=!0,this.scrollQuery=[window,".fc-scroller"],this.edgeThreshold=50,this.maxVelocity=300,this.pointerScreenX=null,this.pointerScreenY=null,this.isAnimating=!1,this.scrollCaches=null,this.everMovedUp=!1,this.everMovedDown=!1,this.everMovedLeft=!1,this.everMovedRight=!1,this.animate=()=>{if(this.isAnimating){let e=this.computeBestEdge(this.pointerScreenX+window.pageXOffset,this.pointerScreenY+window.pageYOffset);if(e){let t=p();this.handleSide(e,(t-this.msSinceRequest)/1e3),this.requestAnimation(t)}else this.isAnimating=!1}}}start(e,t,n){this.isEnabled&&(this.scrollCaches=this.buildCaches(n),this.pointerScreenX=null,this.pointerScreenY=null,this.everMovedUp=!1,this.everMovedDown=!1,this.everMovedLeft=!1,this.everMovedRight=!1,this.handleMove(e,t))}handleMove(e,t){if(this.isEnabled){let n=e-window.pageXOffset,r=t-window.pageYOffset,i=null===this.pointerScreenY?0:r-this.pointerScreenY,s=null===this.pointerScreenX?0:n-this.pointerScreenX;i<0?this.everMovedUp=!0:i>0&&(this.everMovedDown=!0),s<0?this.everMovedLeft=!0:s>0&&(this.everMovedRight=!0),this.pointerScreenX=n,this.pointerScreenY=r,this.isAnimating||(this.isAnimating=!0,this.requestAnimation(p()))}}stop(){if(this.isEnabled){this.isAnimating=!1;for(let e of this.scrollCaches)e.destroy();this.scrollCaches=null}}requestAnimation(e){this.msSinceRequest=e,requestAnimationFrame(this.animate)}handleSide(e,t){let{scrollCache:n}=e,{edgeThreshold:r}=this,i=r-e.distance,s=i*i/(r*r)*this.maxVelocity*t,o=1;switch(e.name){case"left":o=-1;case"right":n.setScrollLeft(n.getScrollLeft()+s*o);break;case"top":o=-1;case"bottom":n.setScrollTop(n.getScrollTop()+s*o)}}computeBestEdge(e,t){let{edgeThreshold:n}=this,r=null,i=this.scrollCaches||[];for(let s of i){let i=s.clientRect,o=e-i.left,a=i.right-e,l=t-i.top,c=i.bottom-t;o>=0&&a>=0&&l>=0&&c>=0&&(l<=n&&this.everMovedUp&&s.canScrollUp()&&(!r||r.distance>l)&&(r={scrollCache:s,name:"top",distance:l}),c<=n&&this.everMovedDown&&s.canScrollDown()&&(!r||r.distance>c)&&(r={scrollCache:s,name:"bottom",distance:c}),o<=n&&this.everMovedLeft&&s.canScrollLeft()&&(!r||r.distance>o)&&(r={scrollCache:s,name:"left",distance:o}),a<=n&&this.everMovedRight&&s.canScrollRight()&&(!r||r.distance>a)&&(r={scrollCache:s,name:"right",distance:a}))}return r}buildCaches(e){return this.queryScrollEls(e).map((e=>e===window?new f(!1):new h(e,!1)))}queryScrollEls(e){let t=[];for(let n of this.scrollQuery)"object"==typeof n?t.push(n):t.push(...Array.prototype.slice.call(e.getRootNode().querySelectorAll(n)));return t}}class m extends i.ElementDragging{constructor(e,t){super(e),this.containerEl=e,this.delay=null,this.minDistance=0,this.touchScrollAllowed=!0,this.mirrorNeedsRevert=!1,this.isInteracting=!1,this.isDragging=!1,this.isDelayEnded=!1,this.isDistanceSurpassed=!1,this.delayTimeoutId=null,this.onPointerDown=e=>{this.isDragging||(this.isInteracting=!0,this.isDelayEnded=!1,this.isDistanceSurpassed=!1,i.preventSelection(document.body),i.preventContextMenu(document.body),e.isTouch||e.origEvent.preventDefault(),this.emitter.trigger("pointerdown",e),this.isInteracting&&!this.pointer.shouldIgnoreMove&&(this.mirror.setIsVisible(!1),this.mirror.start(e.subjectEl,e.pageX,e.pageY),this.startDelay(e),this.minDistance||this.handleDistanceSurpassed(e)))},this.onPointerMove=e=>{if(this.isInteracting){if(this.emitter.trigger("pointermove",e),!this.isDistanceSurpassed){let t,n=this.minDistance,{deltaX:r,deltaY:i}=e;t=r*r+i*i,t>=n*n&&this.handleDistanceSurpassed(e)}this.isDragging&&("scroll"!==e.origEvent.type&&(this.mirror.handleMove(e.pageX,e.pageY),this.autoScroller.handleMove(e.pageX,e.pageY)),this.emitter.trigger("dragmove",e))}},this.onPointerUp=e=>{this.isInteracting&&(this.isInteracting=!1,i.allowSelection(document.body),i.allowContextMenu(document.body),this.emitter.trigger("pointerup",e),this.isDragging&&(this.autoScroller.stop(),this.tryStopDrag(e)),this.delayTimeoutId&&(clearTimeout(this.delayTimeoutId),this.delayTimeoutId=null))};let n=this.pointer=new l(e);n.emitter.on("pointerdown",this.onPointerDown),n.emitter.on("pointermove",this.onPointerMove),n.emitter.on("pointerup",this.onPointerUp),t&&(n.selector=t),this.mirror=new d,this.autoScroller=new g}destroy(){this.pointer.destroy(),this.onPointerUp({})}startDelay(e){"number"==typeof this.delay?this.delayTimeoutId=setTimeout((()=>{this.delayTimeoutId=null,this.handleDelayEnd(e)}),this.delay):this.handleDelayEnd(e)}handleDelayEnd(e){this.isDelayEnded=!0,this.tryStartDrag(e)}handleDistanceSurpassed(e){this.isDistanceSurpassed=!0,this.tryStartDrag(e)}tryStartDrag(e){this.isDelayEnded&&this.isDistanceSurpassed&&(this.pointer.wasTouchScroll&&!this.touchScrollAllowed||(this.isDragging=!0,this.mirrorNeedsRevert=!1,this.autoScroller.start(e.pageX,e.pageY,this.containerEl),this.emitter.trigger("dragstart",e),!1===this.touchScrollAllowed&&this.pointer.cancelTouchScroll()))}tryStopDrag(e){this.mirror.stop(this.mirrorNeedsRevert,this.stopDrag.bind(this,e))}stopDrag(e){this.isDragging=!1,this.emitter.trigger("dragend",e)}setIgnoreMove(e){this.pointer.shouldIgnoreMove=e}setMirrorIsVisible(e){this.mirror.setIsVisible(e)}setMirrorNeedsRevert(e){this.mirrorNeedsRevert=e}setAutoScrollEnabled(e){this.autoScroller.isEnabled=e}}class v{constructor(e){this.origRect=i.computeRect(e),this.scrollCaches=i.getClippingParents(e).map((e=>new h(e,!0)))}destroy(){for(let e of this.scrollCaches)e.destroy()}computeLeft(){let e=this.origRect.left;for(let t of this.scrollCaches)e+=t.origScrollLeft-t.getScrollLeft();return e}computeTop(){let e=this.origRect.top;for(let t of this.scrollCaches)e+=t.origScrollTop-t.getScrollTop();return e}isWithinClipping(e,t){let n={left:e,top:t};for(let e of this.scrollCaches)if(!y(e.getEventTarget())&&!i.pointInsideRect(n,e.clientRect))return!1;return!0}}function y(e){let t=e.tagName;return"HTML"===t||"BODY"===t}class _{constructor(e,t){this.useSubjectCenter=!1,this.requireInitial=!0,this.initialHit=null,this.movingHit=null,this.finalHit=null,this.handlePointerDown=e=>{let{dragging:t}=this;this.initialHit=null,this.movingHit=null,this.finalHit=null,this.prepareHits(),this.processFirstCoord(e),this.initialHit||!this.requireInitial?(t.setIgnoreMove(!1),this.emitter.trigger("pointerdown",e)):t.setIgnoreMove(!0)},this.handleDragStart=e=>{this.emitter.trigger("dragstart",e),this.handleMove(e,!0)},this.handleDragMove=e=>{this.emitter.trigger("dragmove",e),this.handleMove(e)},this.handlePointerUp=e=>{this.releaseHits(),this.emitter.trigger("pointerup",e)},this.handleDragEnd=e=>{this.movingHit&&this.emitter.trigger("hitupdate",null,!0,e),this.finalHit=this.movingHit,this.movingHit=null,this.emitter.trigger("dragend",e)},this.droppableStore=t,e.emitter.on("pointerdown",this.handlePointerDown),e.emitter.on("dragstart",this.handleDragStart),e.emitter.on("dragmove",this.handleDragMove),e.emitter.on("pointerup",this.handlePointerUp),e.emitter.on("dragend",this.handleDragEnd),this.dragging=e,this.emitter=new i.Emitter}processFirstCoord(e){let t,n={left:e.pageX,top:e.pageY},r=n,s=e.subjectEl;s instanceof HTMLElement&&(t=i.computeRect(s),r=i.constrainPoint(r,t));let o=this.initialHit=this.queryHitForOffset(r.left,r.top);if(o){if(this.useSubjectCenter&&t){let e=i.intersectRects(t,o.rect);e&&(r=i.getRectCenter(e))}this.coordAdjust=i.diffPoints(r,n)}else this.coordAdjust={left:0,top:0}}handleMove(e,t){let n=this.queryHitForOffset(e.pageX+this.coordAdjust.left,e.pageY+this.coordAdjust.top);!t&&b(this.movingHit,n)||(this.movingHit=n,this.emitter.trigger("hitupdate",n,!1,e))}prepareHits(){this.offsetTrackers=i.mapHash(this.droppableStore,(e=>(e.component.prepareHits(),new v(e.el))))}releaseHits(){let{offsetTrackers:e}=this;for(let t in e)e[t].destroy();this.offsetTrackers={}}queryHitForOffset(e,t){let{droppableStore:n,offsetTrackers:r}=this,s=null;for(let o in n){let a=n[o].component,l=r[o];if(l&&l.isWithinClipping(e,t)){let n=l.computeLeft(),r=l.computeTop(),c=e-n,d=t-r,{origRect:u}=l,h=u.right-u.left,f=u.bottom-u.top;if(c>=0&&c<h&&d>=0&&d<f){let e=a.queryHit(c,d,h,f);e&&i.rangeContainsRange(e.dateProfile.activeRange,e.dateSpan.range)&&(!s||e.layer>s.layer)&&(e.componentId=o,e.context=a.context,e.rect.left+=n,e.rect.right+=n,e.rect.top+=r,e.rect.bottom+=r,s=e)}}}return s}}function b(e,t){return!e&&!t||Boolean(e)===Boolean(t)&&i.isDateSpansEqual(e.dateSpan,t.dateSpan)}function E(e,t){let n={};for(let r of t.pluginHooks.datePointTransforms)Object.assign(n,r(e,t));var r,i;return Object.assign(n,(r=e,{date:(i=t.dateEnv).toDate(r.range.start),dateStr:i.formatIso(r.range.start,{omitTime:r.allDay}),allDay:r.allDay})),n}class S extends i.Interaction{constructor(e){super(e),this.handlePointerDown=e=>{let{dragging:t}=this,n=e.origEvent.target;t.setIgnoreMove(!this.component.isValidDateDownEl(n))},this.handleDragEnd=e=>{let{component:t}=this,{pointer:n}=this.dragging;if(!n.wasTouchScroll){let{initialHit:n,finalHit:r}=this.hitDragging;if(n&&r&&b(n,r)){let{context:r}=t,i=Object.assign(Object.assign({},E(n.dateSpan,r)),{dayEl:n.dayEl,jsEvent:e.origEvent,view:r.viewApi||r.calendarApi.view});r.emitter.trigger("dateClick",i)}}},this.dragging=new m(e.el),this.dragging.autoScroller.isEnabled=!1;let t=this.hitDragging=new _(this.dragging,i.interactionSettingsToStore(e));t.emitter.on("pointerdown",this.handlePointerDown),t.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}}class D extends i.Interaction{constructor(e){super(e),this.dragSelection=null,this.handlePointerDown=e=>{let{component:t,dragging:n}=this,{options:r}=t.context,i=r.selectable&&t.isValidDateDownEl(e.origEvent.target);n.setIgnoreMove(!i),n.delay=e.isTouch?function(e){let{options:t}=e.context,n=t.selectLongPressDelay;return null==n&&(n=t.longPressDelay),n}(t):null},this.handleDragStart=e=>{this.component.context.calendarApi.unselect(e)},this.handleHitUpdate=(e,t)=>{let{context:n}=this.component,r=null,s=!1;if(e){let t=this.hitDragging.initialHit;e.componentId===t.componentId&&this.isHitComboAllowed&&!this.isHitComboAllowed(t,e)||(r=function(e,t,n){let r=e.dateSpan,s=t.dateSpan,o=[r.range.start,r.range.end,s.range.start,s.range.end];o.sort(i.compareNumbers);let a={};for(let r of n){let n=r(e,t);if(!1===n)return null;n&&Object.assign(a,n)}return a.range={start:o[0],end:o[3]},a.allDay=r.allDay,a}(t,e,n.pluginHooks.dateSelectionTransformers)),r&&i.isDateSelectionValid(r,e.dateProfile,n)||(s=!0,r=null)}r?n.dispatch({type:"SELECT_DATES",selection:r}):t||n.dispatch({type:"UNSELECT_DATES"}),s?i.disableCursor():i.enableCursor(),t||(this.dragSelection=r)},this.handlePointerUp=e=>{this.dragSelection&&(i.triggerDateSelect(this.dragSelection,e,this.component.context),this.dragSelection=null)};let{component:t}=e,{options:n}=t.context,r=this.dragging=new m(e.el);r.touchScrollAllowed=!1,r.minDistance=n.selectMinDistance||0,r.autoScroller.isEnabled=n.dragScroll;let s=this.hitDragging=new _(this.dragging,i.interactionSettingsToStore(e));s.emitter.on("pointerdown",this.handlePointerDown),s.emitter.on("dragstart",this.handleDragStart),s.emitter.on("hitupdate",this.handleHitUpdate),s.emitter.on("pointerup",this.handlePointerUp)}destroy(){this.dragging.destroy()}}class A extends i.Interaction{constructor(e){super(e),this.subjectEl=null,this.subjectSeg=null,this.isDragging=!1,this.eventRange=null,this.relevantEvents=null,this.receivingContext=null,this.validMutation=null,this.mutatedRelevantEvents=null,this.handlePointerDown=e=>{let t=e.origEvent.target,{component:n,dragging:r}=this,{mirror:s}=r,{options:o}=n.context,a=n.context;this.subjectEl=e.subjectEl;let l=this.subjectSeg=i.getElSeg(e.subjectEl),c=(this.eventRange=l.eventRange).instance.instanceId;this.relevantEvents=i.getRelevantEvents(a.getCurrentData().eventStore,c),r.minDistance=e.isTouch?0:o.eventDragMinDistance,r.delay=e.isTouch&&c!==n.props.eventSelection?function(e){let{options:t}=e.context,n=t.eventLongPressDelay;return null==n&&(n=t.longPressDelay),n}(n):null,o.fixedMirrorParent?s.parentNode=o.fixedMirrorParent:s.parentNode=i.elementClosest(t,".fc"),s.revertDuration=o.dragRevertDuration;let d=n.isValidSegDownEl(t)&&!i.elementClosest(t,".fc-event-resizer");r.setIgnoreMove(!d),this.isDragging=d&&e.subjectEl.classList.contains("fc-event-draggable")},this.handleDragStart=e=>{let t=this.component.context,n=this.eventRange,r=n.instance.instanceId;e.isTouch?r!==this.component.props.eventSelection&&t.dispatch({type:"SELECT_EVENT",eventInstanceId:r}):t.dispatch({type:"UNSELECT_EVENT"}),this.isDragging&&(t.calendarApi.unselect(e),t.emitter.trigger("eventDragStart",{el:this.subjectEl,event:new i.EventImpl(t,n.def,n.instance),jsEvent:e.origEvent,view:t.viewApi}))},this.handleHitUpdate=(e,t)=>{if(!this.isDragging)return;let n=this.relevantEvents,r=this.hitDragging.initialHit,s=this.component.context,o=null,a=null,l=null,c=!1,d={affectedEvents:n,mutatedEvents:i.createEmptyEventStore(),isEvent:!0};if(e){o=e.context;let t=o.options;s===o||t.editable&&t.droppable?(a=function(e,t,n){let r=e.dateSpan,s=t.dateSpan,o=r.range.start,a=s.range.start,l={};r.allDay!==s.allDay&&(l.allDay=s.allDay,l.hasEnd=t.context.options.allDayMaintainDuration,s.allDay&&(o=i.startOfDay(o)));let c=i.diffDates(o,a,e.context.dateEnv,e.componentId===t.componentId?e.largeUnit:null);c.milliseconds&&(l.allDay=!1);let d={datesDelta:c,standardProps:l};for(let r of n)r(d,e,t);return d}(r,e,o.getCurrentData().pluginHooks.eventDragMutationMassagers),a&&(l=i.applyMutationToEventStore(n,o.getCurrentData().eventUiBases,a,o),d.mutatedEvents=l,i.isInteractionValid(d,e.dateProfile,o)||(c=!0,a=null,l=null,d.mutatedEvents=i.createEmptyEventStore()))):o=null}this.displayDrag(o,d),c?i.disableCursor():i.enableCursor(),t||(s===o&&b(r,e)&&(a=null),this.dragging.setMirrorNeedsRevert(!a),this.dragging.setMirrorIsVisible(!e||!this.subjectEl.getRootNode().querySelector(".fc-event-mirror")),this.receivingContext=o,this.validMutation=a,this.mutatedRelevantEvents=l)},this.handlePointerUp=()=>{this.isDragging||this.cleanup()},this.handleDragEnd=e=>{if(this.isDragging){let t=this.component.context,n=t.viewApi,{receivingContext:r,validMutation:s}=this,o=this.eventRange.def,a=this.eventRange.instance,l=new i.EventImpl(t,o,a),c=this.relevantEvents,d=this.mutatedRelevantEvents,{finalHit:u}=this.hitDragging;if(this.clearDrag(),t.emitter.trigger("eventDragStop",{el:this.subjectEl,event:l,jsEvent:e.origEvent,view:n}),s){if(r===t){let r=new i.EventImpl(t,d.defs[o.defId],a?d.instances[a.instanceId]:null);t.dispatch({type:"MERGE_EVENTS",eventStore:d});let u={oldEvent:l,event:r,relatedEvents:i.buildEventApis(d,t,a),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:c})}},h={};for(let e of t.getCurrentData().pluginHooks.eventDropTransformers)Object.assign(h,e(s,t));t.emitter.trigger("eventDrop",Object.assign(Object.assign(Object.assign({},u),h),{el:e.subjectEl,delta:s.datesDelta,jsEvent:e.origEvent,view:n})),t.emitter.trigger("eventChange",u)}else if(r){let s={event:l,relatedEvents:i.buildEventApis(c,t,a),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:c})}};t.emitter.trigger("eventLeave",Object.assign(Object.assign({},s),{draggedEl:e.subjectEl,view:n})),t.dispatch({type:"REMOVE_EVENTS",eventStore:c}),t.emitter.trigger("eventRemove",s);let h=d.defs[o.defId],f=d.instances[a.instanceId],p=new i.EventImpl(r,h,f);r.dispatch({type:"MERGE_EVENTS",eventStore:d});let g={event:p,relatedEvents:i.buildEventApis(d,r,f),revert(){r.dispatch({type:"REMOVE_EVENTS",eventStore:d})}};r.emitter.trigger("eventAdd",g),e.isTouch&&r.dispatch({type:"SELECT_EVENT",eventInstanceId:a.instanceId}),r.emitter.trigger("drop",Object.assign(Object.assign({},E(u.dateSpan,r)),{draggedEl:e.subjectEl,jsEvent:e.origEvent,view:u.context.viewApi})),r.emitter.trigger("eventReceive",Object.assign(Object.assign({},g),{draggedEl:e.subjectEl,view:u.context.viewApi}))}}else t.emitter.trigger("_noEventDrop")}this.cleanup()};let{component:t}=this,{options:n}=t.context,r=this.dragging=new m(e.el);r.pointer.selector=A.SELECTOR,r.touchScrollAllowed=!1,r.autoScroller.isEnabled=n.dragScroll;let s=this.hitDragging=new _(this.dragging,i.interactionSettingsStore);s.useSubjectCenter=e.useEventCenter,s.emitter.on("pointerdown",this.handlePointerDown),s.emitter.on("dragstart",this.handleDragStart),s.emitter.on("hitupdate",this.handleHitUpdate),s.emitter.on("pointerup",this.handlePointerUp),s.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}displayDrag(e,t){let n=this.component.context,r=this.receivingContext;r&&r!==e&&(r===n?r.dispatch({type:"SET_EVENT_DRAG",state:{affectedEvents:t.affectedEvents,mutatedEvents:i.createEmptyEventStore(),isEvent:!0}}):r.dispatch({type:"UNSET_EVENT_DRAG"})),e&&e.dispatch({type:"SET_EVENT_DRAG",state:t})}clearDrag(){let e=this.component.context,{receivingContext:t}=this;t&&t.dispatch({type:"UNSET_EVENT_DRAG"}),e!==t&&e.dispatch({type:"UNSET_EVENT_DRAG"})}cleanup(){this.subjectSeg=null,this.isDragging=!1,this.eventRange=null,this.relevantEvents=null,this.receivingContext=null,this.validMutation=null,this.mutatedRelevantEvents=null}}A.SELECTOR=".fc-event-draggable, .fc-event-resizable";class C extends i.Interaction{constructor(e){super(e),this.draggingSegEl=null,this.draggingSeg=null,this.eventRange=null,this.relevantEvents=null,this.validMutation=null,this.mutatedRelevantEvents=null,this.handlePointerDown=e=>{let{component:t}=this,n=this.querySegEl(e),r=i.getElSeg(n),s=this.eventRange=r.eventRange;this.dragging.minDistance=t.context.options.eventDragMinDistance,this.dragging.setIgnoreMove(!this.component.isValidSegDownEl(e.origEvent.target)||e.isTouch&&this.component.props.eventSelection!==s.instance.instanceId)},this.handleDragStart=e=>{let{context:t}=this.component,n=this.eventRange;this.relevantEvents=i.getRelevantEvents(t.getCurrentData().eventStore,this.eventRange.instance.instanceId);let r=this.querySegEl(e);this.draggingSegEl=r,this.draggingSeg=i.getElSeg(r),t.calendarApi.unselect(),t.emitter.trigger("eventResizeStart",{el:r,event:new i.EventImpl(t,n.def,n.instance),jsEvent:e.origEvent,view:t.viewApi})},this.handleHitUpdate=(e,t,n)=>{let{context:r}=this.component,s=this.relevantEvents,o=this.hitDragging.initialHit,a=this.eventRange.instance,l=null,c=null,d=!1,u={affectedEvents:s,mutatedEvents:i.createEmptyEventStore(),isEvent:!0};e&&(e.componentId===o.componentId&&this.isHitComboAllowed&&!this.isHitComboAllowed(o,e)||(l=function(e,t,n,r){let s=e.context.dateEnv,o=e.dateSpan.range.start,a=t.dateSpan.range.start,l=i.diffDates(o,a,s,e.largeUnit);if(n){if(s.add(r.start,l)<r.end)return{startDelta:l}}else if(s.add(r.end,l)>r.start)return{endDelta:l};return null}(o,e,n.subjectEl.classList.contains("fc-event-resizer-start"),a.range))),l&&(c=i.applyMutationToEventStore(s,r.getCurrentData().eventUiBases,l,r),u.mutatedEvents=c,i.isInteractionValid(u,e.dateProfile,r)||(d=!0,l=null,c=null,u.mutatedEvents=null)),c?r.dispatch({type:"SET_EVENT_RESIZE",state:u}):r.dispatch({type:"UNSET_EVENT_RESIZE"}),d?i.disableCursor():i.enableCursor(),t||(l&&b(o,e)&&(l=null),this.validMutation=l,this.mutatedRelevantEvents=c)},this.handleDragEnd=e=>{let{context:t}=this.component,n=this.eventRange.def,r=this.eventRange.instance,s=new i.EventImpl(t,n,r),o=this.relevantEvents,a=this.mutatedRelevantEvents;if(t.emitter.trigger("eventResizeStop",{el:this.draggingSegEl,event:s,jsEvent:e.origEvent,view:t.viewApi}),this.validMutation){let l=new i.EventImpl(t,a.defs[n.defId],r?a.instances[r.instanceId]:null);t.dispatch({type:"MERGE_EVENTS",eventStore:a});let c={oldEvent:s,event:l,relatedEvents:i.buildEventApis(a,t,r),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:o})}};t.emitter.trigger("eventResize",Object.assign(Object.assign({},c),{el:this.draggingSegEl,startDelta:this.validMutation.startDelta||i.createDuration(0),endDelta:this.validMutation.endDelta||i.createDuration(0),jsEvent:e.origEvent,view:t.viewApi})),t.emitter.trigger("eventChange",c)}else t.emitter.trigger("_noEventResize");this.draggingSeg=null,this.relevantEvents=null,this.validMutation=null};let{component:t}=e,n=this.dragging=new m(e.el);n.pointer.selector=".fc-event-resizer",n.touchScrollAllowed=!1,n.autoScroller.isEnabled=t.context.options.dragScroll;let r=this.hitDragging=new _(this.dragging,i.interactionSettingsToStore(e));r.emitter.on("pointerdown",this.handlePointerDown),r.emitter.on("dragstart",this.handleDragStart),r.emitter.on("hitupdate",this.handleHitUpdate),r.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}querySegEl(e){return i.elementClosest(e.subjectEl,".fc-event")}}const w={fixedMirrorParent:i.identity},T={dateClick:i.identity,eventDragStart:i.identity,eventDragStop:i.identity,eventDrop:i.identity,eventResizeStart:i.identity,eventResizeStop:i.identity,eventResize:i.identity,drop:i.identity,eventReceive:i.identity,eventLeave:i.identity};class R{constructor(e,t){this.receivingContext=null,this.droppableEvent=null,this.suppliedDragMeta=null,this.dragMeta=null,this.handleDragStart=e=>{this.dragMeta=this.buildDragMeta(e.subjectEl)},this.handleHitUpdate=(e,t,n)=>{let{dragging:r}=this.hitDragging,s=null,o=null,a=!1,l={affectedEvents:i.createEmptyEventStore(),mutatedEvents:i.createEmptyEventStore(),isEvent:this.dragMeta.create};e&&(s=e.context,this.canDropElOnCalendar(n.subjectEl,s)&&(o=function(e,t,n){let r=Object.assign({},t.leftoverProps);for(let i of n.pluginHooks.externalDefTransforms)Object.assign(r,i(e,t));let{refined:s,extra:o}=i.refineEventDef(r,n),a=i.parseEventDef(s,o,t.sourceId,e.allDay,n.options.forceEventDuration||Boolean(t.duration),n),l=e.range.start;e.allDay&&t.startTime&&(l=n.dateEnv.add(l,t.startTime));let c=t.duration?n.dateEnv.add(l,t.duration):i.getDefaultEventEnd(e.allDay,l,n);return{def:a,instance:i.createEventInstance(a.defId,{start:l,end:c})}}(e.dateSpan,this.dragMeta,s),l.mutatedEvents=i.eventTupleToStore(o),a=!i.isInteractionValid(l,e.dateProfile,s),a&&(l.mutatedEvents=i.createEmptyEventStore(),o=null))),this.displayDrag(s,l),r.setMirrorIsVisible(t||!o||!document.querySelector(".fc-event-mirror")),a?i.disableCursor():i.enableCursor(),t||(r.setMirrorNeedsRevert(!o),this.receivingContext=s,this.droppableEvent=o)},this.handleDragEnd=e=>{let{receivingContext:t,droppableEvent:n}=this;if(this.clearDrag(),t&&n){let r=this.hitDragging.finalHit,s=r.context.viewApi,o=this.dragMeta;if(t.emitter.trigger("drop",Object.assign(Object.assign({},E(r.dateSpan,t)),{draggedEl:e.subjectEl,jsEvent:e.origEvent,view:s})),o.create){let r=i.eventTupleToStore(n);t.dispatch({type:"MERGE_EVENTS",eventStore:r}),e.isTouch&&t.dispatch({type:"SELECT_EVENT",eventInstanceId:n.instance.instanceId}),t.emitter.trigger("eventReceive",{event:new i.EventImpl(t,n.def,n.instance),relatedEvents:[],revert(){t.dispatch({type:"REMOVE_EVENTS",eventStore:r})},draggedEl:e.subjectEl,view:s})}}this.receivingContext=null,this.droppableEvent=null};let n=this.hitDragging=new _(e,i.interactionSettingsStore);n.requireInitial=!1,n.emitter.on("dragstart",this.handleDragStart),n.emitter.on("hitupdate",this.handleHitUpdate),n.emitter.on("dragend",this.handleDragEnd),this.suppliedDragMeta=t}buildDragMeta(e){return"object"==typeof this.suppliedDragMeta?i.parseDragMeta(this.suppliedDragMeta):"function"==typeof this.suppliedDragMeta?i.parseDragMeta(this.suppliedDragMeta(e)):function(e){let t=function(e,t){let n=i.config.dataAttrPrefix,r=(n?n+"-":"")+"event";return e.getAttribute("data-"+r)||""}(e),n=t?JSON.parse(t):{create:!1};return i.parseDragMeta(n)}(e)}displayDrag(e,t){let n=this.receivingContext;n&&n!==e&&n.dispatch({type:"UNSET_EVENT_DRAG"}),e&&e.dispatch({type:"SET_EVENT_DRAG",state:t})}clearDrag(){this.receivingContext&&this.receivingContext.dispatch({type:"UNSET_EVENT_DRAG"})}canDropElOnCalendar(e,t){let n=t.options.dropAccept;return"function"==typeof n?n.call(t.calendarApi,e):"string"!=typeof n||!n||Boolean(i.elementMatches(e,n))}}i.config.dataAttrPrefix="";class O extends i.ElementDragging{constructor(e){super(e),this.shouldIgnoreMove=!1,this.mirrorSelector="",this.currentMirrorEl=null,this.handlePointerDown=e=>{this.emitter.trigger("pointerdown",e),this.shouldIgnoreMove||this.emitter.trigger("dragstart",e)},this.handlePointerMove=e=>{this.shouldIgnoreMove||this.emitter.trigger("dragmove",e)},this.handlePointerUp=e=>{this.emitter.trigger("pointerup",e),this.shouldIgnoreMove||this.emitter.trigger("dragend",e)};let t=this.pointer=new l(e);t.emitter.on("pointerdown",this.handlePointerDown),t.emitter.on("pointermove",this.handlePointerMove),t.emitter.on("pointerup",this.handlePointerUp)}destroy(){this.pointer.destroy()}setIgnoreMove(e){this.shouldIgnoreMove=e}setMirrorIsVisible(e){if(e)this.currentMirrorEl&&(this.currentMirrorEl.style.visibility="",this.currentMirrorEl=null);else{let e=this.mirrorSelector?document.querySelector(this.mirrorSelector):null;e&&(this.currentMirrorEl=e,e.style.visibility="hidden")}}}var x=r.createPlugin({name:"@fullcalendar/interaction",componentInteractions:[S,D,A,C],calendarInteractions:[class{constructor(e){this.context=e,this.isRecentPointerDateSelect=!1,this.matchesCancel=!1,this.matchesEvent=!1,this.onSelect=e=>{e.jsEvent&&(this.isRecentPointerDateSelect=!0)},this.onDocumentPointerDown=e=>{let t=this.context.options.unselectCancel,n=i.getEventTargetViaRoot(e.origEvent);this.matchesCancel=!!i.elementClosest(n,t),this.matchesEvent=!!i.elementClosest(n,A.SELECTOR)},this.onDocumentPointerUp=e=>{let{context:t}=this,{documentPointer:n}=this,r=t.getCurrentData();if(!n.wasTouchScroll){if(r.dateSelection&&!this.isRecentPointerDateSelect){let n=t.options.unselectAuto;!n||n&&this.matchesCancel||t.calendarApi.unselect(e)}r.eventSelection&&!this.matchesEvent&&t.dispatch({type:"UNSELECT_EVENT"})}this.isRecentPointerDateSelect=!1};let t=this.documentPointer=new l(document);t.shouldIgnoreMove=!0,t.shouldWatchScroll=!1,t.emitter.on("pointerdown",this.onDocumentPointerDown),t.emitter.on("pointerup",this.onDocumentPointerUp),e.emitter.on("select",this.onSelect)}destroy(){this.context.emitter.off("select",this.onSelect),this.documentPointer.destroy()}}],elementDraggingImpl:m,optionRefiners:w,listenerRefiners:T});t.Draggable=class{constructor(e,t={}){this.handlePointerDown=e=>{let{dragging:t}=this,{minDistance:n,longPressDelay:r}=this.settings;t.minDistance=null!=n?n:e.isTouch?0:i.BASE_OPTION_DEFAULTS.eventDragMinDistance,t.delay=e.isTouch?null!=r?r:i.BASE_OPTION_DEFAULTS.longPressDelay:0},this.handleDragStart=e=>{e.isTouch&&this.dragging.delay&&e.subjectEl.classList.contains("fc-event")&&this.dragging.mirror.getMirrorEl().classList.add("fc-event-selected")},this.settings=t;let n=this.dragging=new m(e);n.touchScrollAllowed=!1,null!=t.itemSelector&&(n.pointer.selector=t.itemSelector),null!=t.appendTo&&(n.mirror.parentNode=t.appendTo),n.emitter.on("pointerdown",this.handlePointerDown),n.emitter.on("dragstart",this.handleDragStart),new R(n,t.eventData)}destroy(){this.dragging.destroy()}},t.ThirdPartyDraggable=class{constructor(e,t){let n=document;e===document||e instanceof Element?(n=e,t=t||{}):t=e||{};let r=this.dragging=new O(n);"string"==typeof t.itemSelector?r.pointer.selector=t.itemSelector:n===document&&(r.pointer.selector="[data-event]"),"string"==typeof t.mirrorSelector&&(r.mirrorSelector=t.mirrorSelector),new R(r,t.eventData)}destroy(){this.dragging.destroy()}},t.default=x},684:e=>{e.exports=JSON.parse('{"category":[{"id":"etoh","label":"Alcohol"},{"id":"cn","label":"Cannabis"},{"id":"nic","label":"Nicotine"},{"id":"stim","label":"Stimulants"},{"id":"coc","label":"Cocaine"},{"id":"opi","label":"Opioids"},{"id":"hall","label":"Hallucinogens"},{"id":"diss","label":"Dissociatives"},{"id":"inh","label":"Inhalants"},{"id":"sdh","label":"Sedatives, Hypnotics or Anxiolytics"},{"id":"misc","label":"Miscellaneous"}],"substance":{"etoh":[{"label":"Alcohol","units":["standard drinks"]}],"cn":[{"label":"Smoked Cannabis","type":["Joints","Blunts","Bowls","Bongs"],"units":["joints","blunts","bowls","bongs","grams","milligrams","ounces","hits"]},{"label":"Vaped Cannabis","type":["Vape pen"],"units":["hits"]},{"label":"Spliffs","alt":"Cannabis/Nicotine Joints","units":["spliffs","grams","milligrams","hits"]},{"label":"Oral Cannabis","type":["Edibles","Infused Non-Alcoholic Drinks"],"units":["grams","milligrams","drinks"]},{"label":"Cannabis-Infused Alcohol","units":["standard drinks"]},{"label":"Synthetic Cannabis","alt":"K2","units":["grams","milligrams","ounces"]},{"label":"MJ Concentrates","units":["milligrams"]},{"label":"Tincture","units":["milliliters","drops"]},{"label":"Topical","units":["grams","milligrams","percent"]},{"label":"Other Cannabis","note":"Substance Name"}],"nic":[{"label":"Smoked Tobacco","type":["Cigarettes","Cigars","Pipes","Cigarillos"],"units":["cigarettes","cigars","pipes","cigarillos","hits"]},{"label":"E-Cigarettes","units":["hits"]},{"label":"Hookah","units":["hits"]},{"label":"Smokeless Tobacco","alt:":"Chewing Tobacco, Zyns, Snuff","type":["Chewing Tobacco","Nicotine Pouches","Snuff"],"units":["milligrams","pinches"]},{"label":"Other Nioctine","note":"Substance Name"}],"stim":[{"label":"Stimulant Medications","type":["Ritalin/Concerta","Adderall","Vyvanse"],"units":["tablets","milligrams"]},{"label":"Methamphetamine","type":["Powder/Speed","Ice/Crystal","Pills","Base"],"units":["grams","points"]},{"label":"Other Stimulant","note":"Substance Name"}],"coc":[{"label":"Cocaine","type":["Crack","Powder"],"units":["grams","lines"]}],"opi":[{"label":"Heroin","type":["Injected","Snorted","Smoked"],"units":["caps","grams"]},{"label":"Fentanyl","type":["Injected","Snorted","Smoked","Oral"],"units":["micrograms"]},{"label":"Opioid Medications","type":["Codeine","OxyContin","Vicodin","Percocet"],"units":["tablets","milligrams"],"note":"Substance Name (Not Specified Above)"},{"label":"Lean","alt":"Codeine/Alcohol Drink","units":["milligrams","drinks"]},{"label":"Other Opioid","note":"Substance Name"}],"hall":[{"label":"LSD","alt":"Acid","units":["micrograms","tablets"]},{"label":"Psilocybin","alt":"Mushrooms","units":["grams","mushrooms"]},{"label":"MDMA","alt":"Ecstasy, Molly","units":["milligrams","tablets"]},{"label":"Mescaline","alt":"Peyote","units":["milligrams","tablets","drinks"]},{"label":"Other Hallucinogen","note":"Substance Name"}],"diss":[{"label":"Ketamine","type":["Oral","Snorted","Injected"],"units":["milligrams","bumps","lines"]},{"label":"PCP","type":["Injected","Snorted","Smoked","Oral"],"units":["milligrams","tablets"]},{"label":"Other Dissociative","note":"Substance Name"}],"inh":[{"label":"Nitrous Oxide","alt":"Whippits","units":["cartridges"]},{"label":"Amyl Nitrate","alt":"Poppers","units":["bottles"]},{"label":"Aerosols","type":["Hairspray","Spray Paint"]},{"label":"Solvents","type":["Glue","Paint Thinner"]},{"label":"Other Inhalant","note":"Substance Name"}],"sdh":[{"label":"Benzodiazepines","alt":"Benzos","type":["Xanax","Valium","Ativan","Klonopin","Rohypnol"],"units":["milligrams","tablets"]},{"label":"Barbiturates","type":["Phenobarbital","Butalbital","Secobarbital","Pentobarbital"],"units":["milligrams","tablets"]},{"label":"Sleeping pills","alt":"Z Drugs","type":["Ambien","Lunesta","Sonata"],"units":["milligrams","tablets"]},{"label":"GHB","units":["grams","caps"]},{"label":"Quaaludes","units":["milligrams","tablets"]},{"label":"Other Sedative/Hypnotic/Anxiolytic","note":"Substance Name"}],"misc":[{"label":"Dextromethorphan","alt":"DXM, cough syrup","units":["milligrams"]},{"label":"Anabolic steroids","type":["Injected","Oral","Topical"],"units":["units","tablets"]},{"label":"Other Substance","note":"Substance Name"}]}}')}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,