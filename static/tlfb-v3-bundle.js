(()=>{"use strict";var e={748:(e,t,n)=>{n.r(t),n.d(t,{Children:()=>G,Component:()=>a.Component,Fragment:()=>a.Fragment,PureComponent:()=>L,StrictMode:()=>Re,Suspense:()=>X,SuspenseList:()=>K,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>ye,cloneElement:()=>Se,createContext:()=>a.createContext,createElement:()=>a.createElement,createFactory:()=>be,createPortal:()=>re,createRef:()=>a.createRef,default:()=>Ie,findDOMNode:()=>De,flushSync:()=>we,forwardRef:()=>V,hydrate:()=>ce,isValidElement:()=>_e,lazy:()=>J,memo:()=>U,render:()=>le,startTransition:()=>Te,unmountComponentAtNode:()=>Ae,unstable_batchedUpdates:()=>Ce,useCallback:()=>D,useContext:()=>C,useDebugValue:()=>w,useDeferredValue:()=>Me,useEffect:()=>E,useErrorBoundary:()=>R,useId:()=>T,useImperativeHandle:()=>S,useInsertionEffect:()=>xe,useLayoutEffect:()=>b,useMemo:()=>A,useReducer:()=>y,useRef:()=>_,useState:()=>v,useSyncExternalStore:()=>ke,useTransition:()=>Oe,version:()=>Ee});var r,i,o,s,a=n(400),l=0,c=[],d=[],u=a.options.__b,h=a.options.__r,f=a.options.diffed,p=a.options.__c,g=a.options.unmount;function m(e,t){a.options.__h&&a.options.__h(i,e,l||t),l=0;var n=i.__H||(i.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({__V:d}),n.__[e]}function v(e){return l=1,y(P,e)}function y(e,t,n){var o=m(r++,2);if(o.t=e,!o.__c&&(o.__=[n?n(t):P(void 0,t),function(e){var t=o.__N?o.__N[0]:o.__[0],n=o.t(t,e);t!==n&&(o.__N=[n,o.__[1]],o.__c.setState({}))}],o.__c=i,!i.u)){i.u=!0;var s=i.shouldComponentUpdate;i.shouldComponentUpdate=function(e,t,n){if(!o.__c.__H)return!0;var r=o.__c.__H.__.filter((function(e){return e.__c}));if(r.every((function(e){return!e.__N})))return!s||s.call(this,e,t,n);var i=!1;return r.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(i=!0)}})),!(!i&&o.__c.props===e)&&(!s||s.call(this,e,t,n))}}return o.__N||o.__}function E(e,t){var n=m(r++,3);!a.options.__s&&N(n.__H,t)&&(n.__=e,n.i=t,i.__H.__h.push(n))}function b(e,t){var n=m(r++,4);!a.options.__s&&N(n.__H,t)&&(n.__=e,n.i=t,i.__h.push(n))}function _(e){return l=5,A((function(){return{current:e}}),[])}function S(e,t,n){l=6,b((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function A(e,t){var n=m(r++,7);return N(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function D(e,t){return l=8,A((function(){return e}),t)}function C(e){var t=i.context[e.__c],n=m(r++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(i)),t.props.value):e.__}function w(e,t){a.options.useDebugValue&&a.options.useDebugValue(t?t(e):e)}function R(e){var t=m(r++,10),n=v();return t.__=e,i.componentDidCatch||(i.componentDidCatch=function(e,r){t.__&&t.__(e,r),n[1](e)}),[n[0],function(){n[1](void 0)}]}function T(){var e=m(r++,11);if(!e.__){for(var t=i.__v;null!==t&&!t.__m&&null!==t.__;)t=t.__;var n=t.__m||(t.__m=[0,0]);e.__="P"+n[0]+"-"+n[1]++}return e.__}function M(){for(var e;e=c.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(k),e.__H.__h.forEach(I),e.__H.__h=[]}catch(t){e.__H.__h=[],a.options.__e(t,e.__v)}}a.options.__b=function(e){i=null,u&&u(e)},a.options.__r=function(e){h&&h(e),r=0;var t=(i=e.__c).__H;t&&(o===i?(t.__h=[],i.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=d,e.__N=e.i=void 0}))):(t.__h.forEach(k),t.__h.forEach(I),t.__h=[])),o=i},a.options.diffed=function(e){f&&f(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==c.push(t)&&s===a.options.requestAnimationFrame||((s=a.options.requestAnimationFrame)||x)(M)),t.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==d&&(e.__=e.__V),e.i=void 0,e.__V=d}))),o=i=null},a.options.__c=function(e,t){t.some((function(e){try{e.__h.forEach(k),e.__h=e.__h.filter((function(e){return!e.__||I(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],a.options.__e(n,e.__v)}})),p&&p(e,t)},a.options.unmount=function(e){g&&g(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{k(e)}catch(e){t=e}})),n.__H=void 0,t&&a.options.__e(t,n.__v))};var O="function"==typeof requestAnimationFrame;function x(e){var t,n=function(){clearTimeout(r),O&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);O&&(t=requestAnimationFrame(n))}function k(e){var t=i,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),i=t}function I(e){var t=i;e.__c=e.__(),i=t}function N(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function P(e,t){return"function"==typeof t?t(e):t}function H(e,t){for(var n in t)e[n]=t[n];return e}function B(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var r in t)if("__source"!==r&&e[r]!==t[r])return!0;return!1}function j(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}function L(e){this.props=e}function U(e,t){function n(e){var n=this.props.ref,r=n==e.ref;return!r&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!r:B(this.props,e)}function r(t){return this.shouldComponentUpdate=n,(0,a.createElement)(e,t)}return r.displayName="Memo("+(e.displayName||e.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(L.prototype=new a.Component).isPureReactComponent=!0,L.prototype.shouldComponentUpdate=function(e,t){return B(this.props,e)||B(this.state,t)};var F=a.options.__b;a.options.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),F&&F(e)};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function V(e){function t(t){var n=H({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=z,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var W=function(e,t){return null==e?null:(0,a.toChildArray)((0,a.toChildArray)(e).map(t))},G={map:W,forEach:W,count:function(e){return e?(0,a.toChildArray)(e).length:0},only:function(e){var t=(0,a.toChildArray)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:a.toChildArray},q=a.options.__e;a.options.__e=function(e,t,n,r){if(e.then)for(var i,o=t;o=o.__;)if((i=o.__c)&&i.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),i.__c(e,t);q(e,t,n,r)};var Y=a.options.unmount;function Q(e,t,n){return e&&(e.__c&&e.__c.__H&&(e.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),e.__c.__H=null),null!=(e=H({},e)).__c&&(e.__c.__P===n&&(e.__c.__P=t),e.__c=null),e.__k=e.__k&&e.__k.map((function(e){return Q(e,t,n)}))),e}function Z(e,t,n){return e&&(e.__v=null,e.__k=e.__k&&e.__k.map((function(e){return Z(e,t,n)})),e.__c&&e.__c.__P===t&&(e.__e&&n.insertBefore(e.__e,e.__d),e.__c.__e=!0,e.__c.__P=n)),e}function X(){this.__u=0,this.t=null,this.__b=null}function $(e){var t=e.__.__c;return t&&t.__a&&t.__a(e)}function J(e){var t,n,r;function i(i){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){r=e})),r)throw r;if(!n)throw t;return(0,a.createElement)(n,i)}return i.displayName="Lazy",i.__f=!0,i}function K(){this.u=null,this.o=null}a.options.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&!0===e.__h&&(e.type=null),Y&&Y(e)},(X.prototype=new a.Component).__c=function(e,t){var n=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(n);var i=$(r.__v),o=!1,s=function(){o||(o=!0,n.__R=null,i?i(a):a())};n.__R=s;var a=function(){if(!--r.__u){if(r.state.__a){var e=r.state.__a;r.__v.__k[0]=Z(e,e.__c.__P,e.__c.__O)}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate()}},l=!0===t.__h;r.__u++||l||r.setState({__a:r.__b=r.__v.__k[0]}),e.then(s,s)},X.prototype.componentWillUnmount=function(){this.t=[]},X.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=Q(this.__b,n,r.__O=r.__P)}this.__b=null}var i=t.__a&&(0,a.createElement)(a.Fragment,null,e.fallback);return i&&(i.__h=null),[(0,a.createElement)(a.Fragment,null,t.__a?null:e.children),i]};var ee=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function te(e){return this.getChildContext=function(){return e.context},e.children}function ne(e){var t=this,n=e.i;t.componentWillUnmount=function(){(0,a.render)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),e.__v?(t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,a.render)((0,a.createElement)(te,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function re(e,t){var n=(0,a.createElement)(ne,{__v:e,i:t});return n.containerInfo=t,n}(K.prototype=new a.Component).__a=function(e){var t=this,n=$(t.__v),r=t.o.get(e);return r[0]++,function(i){var o=function(){t.props.revealOrder?(r.push(i),ee(t,e,r)):i()};n?n(o):o()}},K.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,a.toChildArray)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},K.prototype.componentDidUpdate=K.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){ee(e,n,t)}))};var ie="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,oe=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,se="undefined"!=typeof document,ae=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function le(e,t,n){return null==t.__k&&(t.textContent=""),(0,a.render)(e,t),"function"==typeof n&&n(),e?e.__c:null}function ce(e,t,n){return(0,a.hydrate)(e,t),"function"==typeof n&&n(),e?e.__c:null}a.Component.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(a.Component.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var de=a.options.event;function ue(){}function he(){return this.cancelBubble}function fe(){return this.defaultPrevented}a.options.event=function(e){return de&&(e=de(e)),e.persist=ue,e.isPropagationStopped=he,e.isDefaultPrevented=fe,e.nativeEvent=e};var pe,ge={configurable:!0,get:function(){return this.class}},me=a.options.vnode;a.options.vnode=function(e){var t=e.type,n=e.props,r=n;if("string"==typeof t){var i=-1===t.indexOf("-");for(var o in r={},n){var s=n[o];se&&"children"===o&&"noscript"===t||"value"===o&&"defaultValue"in n&&null==s||("defaultValue"===o&&"value"in n&&null==n.value?o="value":"download"===o&&!0===s?s="":/ondoubleclick/i.test(o)?o="ondblclick":/^onchange(textarea|input)/i.test(o+t)&&!ae(n.type)?o="oninput":/^onfocus$/i.test(o)?o="onfocusin":/^onblur$/i.test(o)?o="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o)?o=o.toLowerCase():i&&oe.test(o)?o=o.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===s&&(s=void 0),/^oninput$/i.test(o)&&(o=o.toLowerCase(),r[o]&&(o="oninputCapture")),r[o]=s)}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=-1!=r.value.indexOf(e.props.value)}))),"select"==t&&null!=r.defaultValue&&(r.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=r.multiple?-1!=r.defaultValue.indexOf(e.props.value):r.defaultValue==e.props.value}))),e.props=r,n.class!=n.className&&(ge.enumerable="className"in n,null!=n.className&&(r.class=n.className),Object.defineProperty(r,"className",ge))}e.$$typeof=ie,me&&me(e)};var ve=a.options.__r;a.options.__r=function(e){ve&&ve(e),pe=e.__c};var ye={ReactCurrentDispatcher:{current:{readContext:function(e){return pe.__n[e.__c].props.value}}}},Ee="17.0.2";function be(e){return a.createElement.bind(null,e)}function _e(e){return!!e&&e.$$typeof===ie}function Se(e){return _e(e)?a.cloneElement.apply(null,arguments):e}function Ae(e){return!!e.__k&&((0,a.render)(null,e),!0)}function De(e){return e&&(e.base||1===e.nodeType&&e)||null}var Ce=function(e,t){return e(t)},we=function(e,t){return e(t)},Re=a.Fragment;function Te(e){e()}function Me(e){return e}function Oe(){return[!1,Te]}var xe=b;function ke(e,t){var n=t(),r=v({h:{__:n,v:t}}),i=r[0].h,o=r[1];return b((function(){i.__=n,i.v=t,j(i.__,t())||o({h:i})}),[e,n,t]),E((function(){return j(i.__,i.v())||o({h:i}),e((function(){j(i.__,i.v())||o({h:i})}))}),[e]),n}var Ie={useState:v,useId:T,useReducer:y,useEffect:E,useLayoutEffect:b,useInsertionEffect:xe,useTransition:Oe,useDeferredValue:Me,useSyncExternalStore:ke,startTransition:Te,useRef:_,useImperativeHandle:S,useMemo:A,useCallback:D,useContext:C,useDebugValue:w,version:"17.0.2",Children:G,render:le,hydrate:ce,unmountComponentAtNode:Ae,createPortal:re,createElement:a.createElement,createContext:a.createContext,createFactory:be,cloneElement:Se,createRef:a.createRef,Fragment:a.Fragment,isValidElement:_e,findDOMNode:De,Component:a.Component,PureComponent:L,memo:U,forwardRef:V,flushSync:we,unstable_batchedUpdates:Ce,StrictMode:Re,Suspense:X,SuspenseList:K,lazy:J,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:ye}},400:(e,t,n)=>{n.r(t),n.d(t,{Component:()=>C,Fragment:()=>b,cloneElement:()=>W,createContext:()=>G,createElement:()=>v,createRef:()=>E,h:()=>v,hydrate:()=>V,isValidElement:()=>s,options:()=>i,render:()=>z,toChildArray:()=>I});var r,i,o,s,a,l,c,d,u,h={},f=[],p=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function g(e,t){for(var n in t)e[n]=t[n];return e}function m(e){var t=e.parentNode;t&&t.removeChild(e)}function v(e,t,n){var i,o,s,a={};for(s in t)"key"==s?i=t[s]:"ref"==s?o=t[s]:a[s]=t[s];if(arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(s in e.defaultProps)void 0===a[s]&&(a[s]=e.defaultProps[s]);return y(e,a,i,o,null)}function y(e,t,n,r,s){var a={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++o:s};return null==s&&null!=i.vnode&&i.vnode(a),a}function E(){return{current:null}}function b(e){return e.children}function _(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||p.test(t)?n:n+"px"}function S(e,t,n,r,i){var o;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||_(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||_(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])o=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+o]=n,n?r||e.addEventListener(t,o?D:A,o):e.removeEventListener(t,o?D:A,o);else if("dangerouslySetInnerHTML"!==t){if(i)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&-1==t.indexOf("-")?e.removeAttribute(t):e.setAttribute(t,n))}}function A(e){a=!0;try{return this.l[e.type+!1](i.event?i.event(e):e)}finally{a=!1}}function D(e){a=!0;try{return this.l[e.type+!0](i.event?i.event(e):e)}finally{a=!1}}function C(e,t){this.props=e,this.context=t}function w(e,t){if(null==t)return e.__?w(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?w(e):null}function R(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return R(e)}}function T(e){a?setTimeout(e):d(e)}function M(e){(!e.__d&&(e.__d=!0)&&l.push(e)&&!O.__r++||c!==i.debounceRendering)&&((c=i.debounceRendering)||T)(O)}function O(){var e,t,n,r,i,o,s,a;for(l.sort((function(e,t){return e.__v.__b-t.__v.__b}));e=l.shift();)e.__d&&(t=l.length,r=void 0,i=void 0,s=(o=(n=e).__v).__e,(a=n.__P)&&(r=[],(i=g({},o)).__v=o.__v+1,H(a,o,i,n.__n,void 0!==a.ownerSVGElement,null!=o.__h?[s]:null,r,null==s?w(o):s,o.__h),B(r,o),o.__e!=s&&R(o)),l.length>t&&l.sort((function(e,t){return e.__v.__b-t.__v.__b})));O.__r=0}function x(e,t,n,r,i,o,s,a,l,c){var d,u,p,g,m,v,E,_=r&&r.__k||f,S=_.length;for(n.__k=[],d=0;d<t.length;d++)if(null!=(g=n.__k[d]=null==(g=t[d])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?y(null,g,null,null,g):Array.isArray(g)?y(b,{children:g},null,null,null):g.__b>0?y(g.type,g.props,g.key,g.ref?g.ref:null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(p=_[d])||p&&g.key==p.key&&g.type===p.type)_[d]=void 0;else for(u=0;u<S;u++){if((p=_[u])&&g.key==p.key&&g.type===p.type){_[u]=void 0;break}p=null}H(e,g,p=p||h,i,o,s,a,l,c),m=g.__e,(u=g.ref)&&p.ref!=u&&(E||(E=[]),p.ref&&E.push(p.ref,null,g),E.push(u,g.__c||m,g)),null!=m?(null==v&&(v=m),"function"==typeof g.type&&g.__k===p.__k?g.__d=l=k(g,l,e):l=N(e,g,p,_,m,l),"function"==typeof n.type&&(n.__d=l)):l&&p.__e==l&&l.parentNode!=e&&(l=w(p))}for(n.__e=v,d=S;d--;)null!=_[d]&&("function"==typeof n.type&&null!=_[d].__e&&_[d].__e==n.__d&&(n.__d=P(r).nextSibling),U(_[d],_[d]));if(E)for(d=0;d<E.length;d++)L(E[d],E[++d],E[++d])}function k(e,t,n){for(var r,i=e.__k,o=0;i&&o<i.length;o++)(r=i[o])&&(r.__=e,t="function"==typeof r.type?k(r,t,n):N(n,r,r,i,r.__e,t));return t}function I(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){I(e,t)})):t.push(e)),t}function N(e,t,n,r,i,o){var s,a,l;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||i!=o||null==i.parentNode)e:if(null==o||o.parentNode!==e)e.appendChild(i),s=null;else{for(a=o,l=0;(a=a.nextSibling)&&l<r.length;l+=1)if(a==i)break e;e.insertBefore(i,o),s=o}return void 0!==s?s:i.nextSibling}function P(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=P(n)))return r;return null}function H(e,t,n,r,o,s,a,l,c){var d,u,h,f,p,m,v,y,E,_,S,A,D,w,R,T=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(c=n.__h,l=t.__e=n.__e,t.__h=null,s=[l]),(d=i.__b)&&d(t);try{e:if("function"==typeof T){if(y=t.props,E=(d=T.contextType)&&r[d.__c],_=d?E?E.props.value:d.__:r,n.__c?v=(u=t.__c=n.__c).__=u.__E:("prototype"in T&&T.prototype.render?t.__c=u=new T(y,_):(t.__c=u=new C(y,_),u.constructor=T,u.render=F),E&&E.sub(u),u.props=y,u.state||(u.state={}),u.context=_,u.__n=r,h=u.__d=!0,u.__h=[],u._sb=[]),null==u.__s&&(u.__s=u.state),null!=T.getDerivedStateFromProps&&(u.__s==u.state&&(u.__s=g({},u.__s)),g(u.__s,T.getDerivedStateFromProps(y,u.__s))),f=u.props,p=u.state,u.__v=t,h)null==T.getDerivedStateFromProps&&null!=u.componentWillMount&&u.componentWillMount(),null!=u.componentDidMount&&u.__h.push(u.componentDidMount);else{if(null==T.getDerivedStateFromProps&&y!==f&&null!=u.componentWillReceiveProps&&u.componentWillReceiveProps(y,_),!u.__e&&null!=u.shouldComponentUpdate&&!1===u.shouldComponentUpdate(y,u.__s,_)||t.__v===n.__v){for(t.__v!==n.__v&&(u.props=y,u.state=u.__s,u.__d=!1),t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),S=0;S<u._sb.length;S++)u.__h.push(u._sb[S]);u._sb=[],u.__h.length&&a.push(u);break e}null!=u.componentWillUpdate&&u.componentWillUpdate(y,u.__s,_),null!=u.componentDidUpdate&&u.__h.push((function(){u.componentDidUpdate(f,p,m)}))}if(u.context=_,u.props=y,u.__P=e,A=i.__r,D=0,"prototype"in T&&T.prototype.render){for(u.state=u.__s,u.__d=!1,A&&A(t),d=u.render(u.props,u.state,u.context),w=0;w<u._sb.length;w++)u.__h.push(u._sb[w]);u._sb=[]}else do{u.__d=!1,A&&A(t),d=u.render(u.props,u.state,u.context),u.state=u.__s}while(u.__d&&++D<25);u.state=u.__s,null!=u.getChildContext&&(r=g(g({},r),u.getChildContext())),h||null==u.getSnapshotBeforeUpdate||(m=u.getSnapshotBeforeUpdate(f,p)),R=null!=d&&d.type===b&&null==d.key?d.props.children:d,x(e,Array.isArray(R)?R:[R],t,n,r,o,s,a,l,c),u.base=t.__e,t.__h=null,u.__h.length&&a.push(u),v&&(u.__E=u.__=null),u.__e=!1}else null==s&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=j(n.__e,t,n,r,o,s,a,c);(d=i.diffed)&&d(t)}catch(e){t.__v=null,(c||null!=s)&&(t.__e=l,t.__h=!!c,s[s.indexOf(l)]=null),i.__e(e,t,n)}}function B(e,t){i.__c&&i.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){i.__e(e,t.__v)}}))}function j(e,t,n,i,o,s,a,l){var c,d,u,f=n.props,p=t.props,g=t.type,v=0;if("svg"===g&&(o=!0),null!=s)for(;v<s.length;v++)if((c=s[v])&&"setAttribute"in c==!!g&&(g?c.localName===g:3===c.nodeType)){e=c,s[v]=null;break}if(null==e){if(null===g)return document.createTextNode(p);e=o?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,p.is&&p),s=null,l=!1}if(null===g)f===p||l&&e.data===p||(e.data=p);else{if(s=s&&r.call(e.childNodes),d=(f=n.props||h).dangerouslySetInnerHTML,u=p.dangerouslySetInnerHTML,!l){if(null!=s)for(f={},v=0;v<e.attributes.length;v++)f[e.attributes[v].name]=e.attributes[v].value;(u||d)&&(u&&(d&&u.__html==d.__html||u.__html===e.innerHTML)||(e.innerHTML=u&&u.__html||""))}if(function(e,t,n,r,i){var o;for(o in n)"children"===o||"key"===o||o in t||S(e,o,null,n[o],r);for(o in t)i&&"function"!=typeof t[o]||"children"===o||"key"===o||"value"===o||"checked"===o||n[o]===t[o]||S(e,o,t[o],n[o],r)}(e,p,f,o,l),u)t.__k=[];else if(v=t.props.children,x(e,Array.isArray(v)?v:[v],t,n,i,o&&"foreignObject"!==g,s,a,s?s[0]:n.__k&&w(n,0),l),null!=s)for(v=s.length;v--;)null!=s[v]&&m(s[v]);l||("value"in p&&void 0!==(v=p.value)&&(v!==e.value||"progress"===g&&!v||"option"===g&&v!==f.value)&&S(e,"value",v,f.value,!1),"checked"in p&&void 0!==(v=p.checked)&&v!==e.checked&&S(e,"checked",v,f.checked,!1))}return e}function L(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){i.__e(e,n)}}function U(e,t,n){var r,o;if(i.unmount&&i.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||L(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){i.__e(e,t)}r.base=r.__P=null,e.__c=void 0}if(r=e.__k)for(o=0;o<r.length;o++)r[o]&&U(r[o],t,n||"function"!=typeof e.type);n||null==e.__e||m(e.__e),e.__=e.__e=e.__d=void 0}function F(e,t,n){return this.constructor(e,n)}function z(e,t,n){var o,s,a;i.__&&i.__(e,t),s=(o="function"==typeof n)?null:n&&n.__k||t.__k,a=[],H(t,e=(!o&&n||t).__k=v(b,null,[e]),s||h,h,void 0!==t.ownerSVGElement,!o&&n?[n]:s?null:t.firstChild?r.call(t.childNodes):null,a,!o&&n?n:s?s.__e:t.firstChild,o),B(a,e)}function V(e,t){z(e,t,V)}function W(e,t,n){var i,o,s,a=g({},e.props);for(s in t)"key"==s?i=t[s]:"ref"==s?o=t[s]:a[s]=t[s];return arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):n),y(e.type,a,i||e.key,o||e.ref,null)}function G(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some((function(e){e.__e=!0,M(e)}))},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}r=f.slice,i={__e:function(e,t,n,r){for(var i,o,s;t=t.__;)if((i=t.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(e)),s=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(e,r||{}),s=i.__d),s)return i.__E=i}catch(t){e=t}throw e}},o=0,s=function(e){return null!=e&&void 0===e.constructor},a=!1,C.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=g({},this.state),"function"==typeof e&&(e=e(g({},n),this.props)),e&&g(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),M(this))},C.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),M(this))},C.prototype.render=b,l=[],d="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,O.__r=0,u=0},601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RGX_DATE=t.RGX_WORD=t.RGX_INTEGER=t.COLOR_BROWN=t.COLOR_GREEN=t.COLOR_YELLOW=t.COLOR_ORANGE=t.COLOR_PURPLE=t.COLOR_TEXT=t.COLOR_WHITE=t.CAL_HEIGHT_DIFF=t.CVT_MS_DAY=t.CVT_HR_DAY=t.CVT_MIN_HR=t.CVT_S_MIN=t.CVT_MS_S=void 0,t.CVT_MS_S=1e3,t.CVT_S_MIN=60,t.CVT_MIN_HR=60,t.CVT_HR_DAY=24,t.CVT_MS_DAY=t.CVT_MS_S*t.CVT_S_MIN*t.CVT_MIN_HR*t.CVT_HR_DAY,t.CAL_HEIGHT_DIFF=205,t.COLOR_WHITE="#FFFFFF",t.COLOR_TEXT="#15141A",t.COLOR_PURPLE="#485FC7",t.COLOR_ORANGE="#E67975",t.COLOR_YELLOW="#F7DBA7",t.COLOR_GREEN="#041F1E",t.COLOR_BROWN="#5A352A",t.RGX_INTEGER=/^\d+$/,t.RGX_WORD=/^\w+$/,t.RGX_DATE=/^\d{4}-\d{2}-\d{2}$/},384:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Editor=void 0;var r=n(799),i=n(367),o=function(){function e(e){var t=this;this._copy_buffer=null,this._mode=null,this._calendar=e,this._notification=document.getElementById("mode-notification"),document.querySelectorAll(".tlfb-edit-mode").forEach((function(e){return e.addEventListener("click",(function(e){return t.mode(e)}))})),this._calendar.on("dateClick",(function(e){return t.click_date(e)})),this._calendar.on("eventClick",(function(e){return t.click_event(e)})),this._calendar.on("select",(function(e){return t.select_range(e)})),this._modal_key_event=new r.Modal("modal-key-event"),this._modal_sub_event=new r.Modal("modal-substance-event"),this._modal_confirm=new r.Modal("modal-confirm"),this._event_list=new i.CalendarEventList("2023-04-05","2021-07-16",this._calendar)}return e.prototype.clear=function(){this._mode=null,this._copy_buffer=null,this._notification.innerText="Click the edit menu to begin adding events."},e.prototype.mode=function(e){var t=e.target.id;switch(this.clear(),t){case"edit-mode-key-event":this._mode="add-key",this._notification.innerHTML="Click a date on the calendar to add a <b>key date</b>.";break;case"edit-mode-substance-event":this._mode="add-su",this._notification.innerHTML="Click a date on the calendar to add a <b>substance use event</b>.";break;case"edit-mode-copy":this._mode="copy",this._notification.innerHTML="Click an event on the calendar to <b>copy</b>.";break;case"edit-mode-delete":this._mode="delete",this._notification.innerHTML="Click an event on the calendar to <b>delete</b>.";break;default:throw Error("Edit.mode(): Invalid target received.")}console.log("Edit.mode(): ".concat(this._mode))},e.prototype.click_date=function(e){var t=this;switch(console.log("Edit.click_date(): ".concat(e.dateStr)),this._mode){case"add-key":this._modal_key_event.populateText({".subtitle":e.date.toDateString()}).open((function(n){t._event_list.add(new i.KeyEvent(e.dateStr,n.get("key-text")))}));break;case"add-su":this._modal_sub_event.populateText({".subtitle":e.date.toDateString()}).open((function(n){t._calendar.addEvent({title:n.get("key-text"),start:e.dateStr})}));break;case"copy":if(this._copy_buffer){var n=this._copy_buffer.clone();n.set_date(e.dateStr).set_gid(this._copy_buffer.gid),this._event_list.add(n,!1)}}},e.prototype.select_range=function(e){var t=this;console.log("Edit.select_range(): ".concat(e.startStr," to ").concat(e.endStr));var n=new Date;n.setDate(e.end.getDate()-1);var r=n.toISOString().substring(0,10);"add-key"===this._mode&&this._modal_key_event.populateText({".subtitle":"".concat(e.start.toDateString()," to ").concat(n.toDateString())}).open((function(n){var o=new i.KeyEvent(e.startStr,n.get("key-text"));t._event_list.import_events(o.make_recurrence([1,2,3,4,5,6,7],r))}))},e.prototype.click_event=function(e){switch(console.log("Edit.click_event(): ".concat(e.event.title," (event ").concat(e.event.id," / group ").concat(e.event.groupId,")")),this._mode){case"copy":this._copy_buffer=this._event_list.get_event(Number(e.event.id)),this._notification.innerHTML="Click any date to paste the event called <b>".concat(this._copy_buffer.title,"</b>.");break;case"delete":this.delete_event(Number(e.event.id))}},e.prototype.delete_event=function(e){var t=this,n=this._event_list.get_event(e),r=this._event_list.get_event_siblings(e).length;r>0?this._modal_confirm.populateText({".modal-card-title":"Confirm Deletion of Multiple Events",".content":"<p>The event on <b>".concat(n.date,"</b> titled <i>").concat(n.title,"</i> is related to <b>").concat(r,"</b> other events.</p>")+"<p>Confirm whether you want to delete <u>just this event</u>, or <u>all</u> of the events in the group.</p>"}).setElementClass({"#delete-all-button":["is-hidden",!1]}).open((function(r){console.log(r),r.forEach((function(e,t){return console.log("".concat(e," ").concat(t))})),"single"==r.get("action")?t._event_list.delete_event(e):t._event_list.delete_group(n.gid)})):this._modal_confirm.populateText({".modal-card-title":"Confirm Event Deletion",".content":"<p>Confirm that you want to delete the event on <b>".concat(n.date,"</b> titled <i>").concat(n.title,"</i>.</p>")}).setElementClass({"#delete-all-button":["is-hidden",!0]}).open((function(){t._event_list.delete_event(e)}))},e}();t.Editor=o},519:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(553),l=s(n(610)),c=s(n(790)),d=n(384),u=o(n(882)),h=n(601);function f(e,t){Object.assign(e,t);var n=(new Date(e.end).valueOf()-new Date(e.start).valueOf())/h.CVT_MS_DAY;u.set_inner("calendar-file-title","".concat(e.subject," / ").concat(e.record," at ").concat(e.timepoint)),u.set_inner("calendar-file-subtitle","".concat(e.start," to ").concat(e.end," (").concat(n," Days)"))}document.addEventListener("DOMContentLoaded",(function(){var e={subject:"",record:"",timepoint:"",project:"",start:"",end:""};f(e,{subject:"MX347",record:"10",project:"3456",timepoint:"redcap_arm_1_visit_1",start:"2023-06-18",end:"2023-07-15"}),f(e,function(){for(var e=new URLSearchParams(window.location.search),t={},n=0,r=[{name:"record",to:"record",validator:h.RGX_INTEGER},{name:"pid",to:"project",validator:h.RGX_INTEGER},{name:"event",to:"timepoint",validator:h.RGX_WORD},{name:"subject",to:"subject",validator:h.RGX_WORD},{name:"start",to:"start",validator:h.RGX_DATE},{name:"end",to:"end",validator:h.RGX_DATE}];n<r.length;n++){var i=r[n];e.has(i.name)&&(i.validator.test(e.get(i.name))?t[i.to]=e.get(i.name):alert("".concat(i.name," misspecified in the URL query.")),e.delete(i.name))}return!(t.record||t.project||t.timepoint)||t.record&&t.project&&t.timepoint||alert("Some but not all REDCap parameters received. REDCap may be misconfigured."),e.forEach((function(e,t){return alert("Unknown parameter specified in URL query: ".concat(t))})),console.log("props!",t),t}()),console.log(e);var t=document.getElementById("calendar"),n=new a.Calendar(t,{plugins:[c.default,l.default],initialView:"dayGridMonth",validRange:{start:e.start,end:e.end},headerToolbar:{left:"title",right:"prev,next"},editable:!1,selectable:!0,showNonCurrentDates:!1,fixedWeekCount:!0,height:window.innerHeight-h.CAL_HEIGHT_DIFF});n.render(),new d.Editor(n),window.addEventListener("resize",(function(){n.setOption("height",window.innerHeight-h.CAL_HEIGHT_DIFF)}))}))},799:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Modal=void 0;var n=function(){function e(e){var t,n=this;this._onsubmit=null;var r=document.getElementById(e);if(null==r)throw Error("Modal(): Could not locate DOM element '#".concat(e,"'."));if(!r.classList.contains("modal"))throw Error("Modal(): '#".concat(e,"' is not of class 'modal'."));this._element=r,this._form=this._element.querySelector("form"),this._element.querySelectorAll(".modal-close, .cancel-operation").forEach((function(e){return e.addEventListener("click",(function(){return n.close()}))})),null===(t=this._form)||void 0===t||t.addEventListener("submit",(function(e){e.preventDefault(),n.submit(e)}))}return e.prototype.reset=function(){var e;console.log("Modal.reset(): ".concat(this._element.id)),null===(e=this._form)||void 0===e||e.reset()},e.prototype.submit=function(e){if(console.log("Modal.submit(): ".concat(this._element.id)),!this._form)throw Error("Modal.submit(): Cannot submit modal with no descendant form ".concat(this._element.id,"."));if(!this._onsubmit)throw Error("Modal.submit(): Form submitted but no handler specified.");var t=this.getFormData(),n=e.submitter.value;return n&&t.append("action",n),this._onsubmit(t),this.close()},e.prototype.populateForm=function(e){if(console.log("Modal.populateForm(): ".concat(this._element.id)),!this._form)throw Error("Modal.populateForm(): Cannot populate modal with no descendant form ".concat(this._element.id,"."));for(var t in e){if(!this._form.elements.namedItem(t))throw Error("Modal.populateForm(): Named element '".concat(t,"' not found in form."));this._form.elements.namedItem(t).value=e[t]}return this},e.prototype.populateText=function(e){for(var t in console.log("Modal.populateText(): ".concat(this._element.id)),e){var n=this._element.querySelector(t);if(!n)throw Error("Modal.populateText(): Element not found for '".concat(t,"'."));n.innerHTML=e[t]}return this},e.prototype.setElementClass=function(e){for(var t in console.log("Modal.addElementClass(): ".concat(this._element.id)),e){var n=this._element.querySelector(t);if(!n)throw Error("Modal.addElementClass(): Element not found for '".concat(t,"'."));e[t][1]?n.classList.add(e[t][0]):n.classList.remove(e[t][0])}return this},e.prototype.getFormData=function(){if(console.log("Modal.getFormData(): ".concat(this._element.id)),!this._form)throw Error("Modal.getFormData(): Cannot get form data for modal with no descendant form ".concat(this._element.id,"."));return new FormData(this._form)},e.prototype.open=function(e){return void 0===e&&(e=null),console.log("Modal.open(): ".concat(this._element.id)),this._onsubmit=e,this._element.classList.add("is-active"),this},e.prototype.close=function(){return console.log("Modal.close(): ".concat(this._element.id)),this._element.classList.remove("is-active"),this.reset(),this},e}();t.Modal=n},367:function(e,t,n){var r,i=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarEventList=t.UseEvent=t.KeyEvent=t.CalendarEvent=void 0;var o=n(601),s=function(){function e(e){if(!/^\d{4}-\d{2}-\d{2}$/.test(e))throw new Error("CalendarDate expects a date in 'YYYY-MM-DD' format.");if(this._date=new Date(e),isNaN(this._date.valueOf()))throw new Error("CalanderDate received an invalid date.")}return Object.defineProperty(e.prototype,"Date",{get:function(){return this._date},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"weekday",{get:function(){return this._date.getUTCDay()+1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"day",{get:function(){return this._date.getUTCDate()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"month",{get:function(){return this._date.getUTCMonth()+1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"year",{get:function(){return this._date.getUTCFullYear()},enumerable:!1,configurable:!0}),e.prototype.toString=function(){return this._date.toISOString().substring(0,10)},e.prototype.set_day=function(e){return this._date.setUTCDate(e),this},e.prototype.isSameDay=function(e){return this.year==e.year&&this.month==e.month&&this.day==e.day},e.prototype.isAfter=function(e){return this.year==e.year&&this.month==e.month&&this.day>e.day||this.year==e.year&&this.month>e.month||this.year>e.year},e.prototype.isBefore=function(e){return this.year==e.year&&this.month==e.month&&this.day<e.day||this.year==e.year&&this.month<e.month||this.year<e.year},Object.defineProperty(e.prototype,"next_day",{get:function(){return new e(this.toString()).set_day(this.day+1)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previous_day",{get:function(){return new e(this.toString()).set_day(this.day-1)},enumerable:!1,configurable:!0}),e}(),a=function(){function e(e,t){this._eid=0,this._gid=0,this._title="Uninitialized CalendarEvent",this._date=new s(e),this._type=t}return Object.defineProperty(e.prototype,"eid",{get:function(){return this._eid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"gid",{get:function(){return this._gid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"date",{get:function(){return this._date.toString()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"title",{get:function(){return this._title},enumerable:!1,configurable:!0}),e.prototype.set_eid=function(e){return this._eid=e,this},e.prototype.set_gid=function(e){return this._gid=e,this},e.prototype.set_date=function(e){return this._date=e instanceof s?e:new s(e),this},e.prototype.make_recurrence=function(e,t){for(var n=[],r=this._date;!r.isAfter(new s(t));r=r.next_day)e.includes(r.weekday)&&n.push(this.clone().set_gid(this.gid).set_eid(this.eid).set_date(r));return n},e}();t.CalendarEvent=a;var l=function(e){function t(t,n){var r=e.call(this,t,"key")||this;return r._title=n,r}return i(t,e),t.prototype.clone=function(){return new t(this.date,this._title)},Object.defineProperty(t.prototype,"colors",{get:function(){return[o.COLOR_YELLOW,o.COLOR_TEXT]},enumerable:!1,configurable:!0}),t}(a);t.KeyEvent=l;var c=function(e){function t(t,n){var r=e.call(this,t,"use")||this;return r._category="",r._substance="",r._method="",r._times=0,r._amount=0,r._units="",r._unitsOther="",null!=n&&r.set_properties(n),r}return i(t,e),t.prototype.clone=function(){return new t(this.date,this.properties)},Object.defineProperty(t.prototype,"colors",{get:function(){return[o.COLOR_PURPLE,o.COLOR_WHITE]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"properties",{get:function(){return{category:this._category,substance:this._substance,method:this._method,times:this._times,amount:this._amount,units:this._units,unitsOther:this._unitsOther}},enumerable:!1,configurable:!0}),t.prototype.set_properties=function(e){return this._category=e.category,this._substance=e.substance,this._method=e.method,this._times=e.times,this._amount=e.amount,this._units=e.units,this._unitsOther=e.unitsOther,this.update_title(),this},t.prototype.update_title=function(){this._title=this._category+" ("+this._substance+") "+this._method+" "+this._amount+this._units+" over "+this._times+" occasions"},t}(a);t.UseEvent=c;var d=function(){function e(e,t,n,r){void 0===r&&(r=null),this._next_eid=1,this._next_gid=1,this._events=[],this._fullcalendar=n,this.start_date=new s(e),this.end_date=new s(t),null!=r&&this.import_events(r)}return e.prototype._get_next_eid=function(){var e=this._next_eid;return this._next_eid++,e},e.prototype._get_next_gid=function(){var e=this._next_gid;return this._next_gid++,e},e.prototype.get_event=function(e){var t=this._events.find((function(t){return t.eid==e}));if(null==t)throw Error("CalendarEventList.get_event(): Could not find event ".concat(e,"."));return t},e.prototype.get_event_group=function(e){var t=this._events.filter((function(t){return t.gid==e}));if(t.length<1)throw Error("CalendarEventList.get_event_group(): Could not find events in group ".concat(e,"."));return t},e.prototype.get_event_siblings=function(e){var t=this.get_event(e);return this.get_event_group(t.gid).filter((function(t){return t.eid!=e}))},e.prototype.get_events=function(){return this._events},e.prototype.add=function(e,t){return void 0===t&&(t=!0),this.import_events([e],t),this},e.prototype.delete_event=function(e){var t;return this._events=this._events.filter((function(t){return t.eid!=e})),null===(t=this._fullcalendar.getEventById(e.toString()))||void 0===t||t.remove(),this},e.prototype.delete_group=function(e){return this._events=this._events.filter((function(t){return t.gid!=e})),this._fullcalendar.getEvents().forEach((function(t){t.groupId==e.toString()&&t.remove()})),this},e.prototype.import_events=function(e,t){var n=this;void 0===t&&(t=!0);var r=e.reduce((function(e,t){if(null==t.gid)throw new Error("Event is missing a GID and cannot be imported.");return e.has(t.gid)||e.set(t.gid,n._get_next_gid()),e}),new Map);return this._events=this._events.concat(e.map((function(e){var i=n._get_next_eid(),o=r.get(e.gid);return e.set_eid(i),t&&e.set_gid(o),n._fullcalendar.addEvent({id:e.eid.toString(),groupId:e.gid.toString(),start:e.date,title:e.title,textColor:e.colors[1],backgroundColor:e.colors[0],borderColor:e.colors[0]}),e}))),this},e.prototype.serialize_events=function(e){switch(e){case"csv":alert("CalendarEvents.serialize_events('csv'): Not implemented.");break;case"json":alert("CalendarEvents.serialize_events('json'): Not implemented.")}},e}();t.CalendarEventList=d},882:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.find_parent_modal=t.set_inner=void 0,t.set_inner=function(e,t){var n=document.getElementById(e);if(null==n)throw new Error("Failed to select element #".concat(e,"."));t instanceof NodeList?t.forEach((function(e){return n.appendChild(e)})):n.innerText=t},t.find_parent_modal=function(e){var t=e.closest(".modal");if(null==t)throw Error("find_parent_modal: No modal found in ancestry of ".concat(e,"."));return t}},553:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(873),i=n(400);n(748);const o=[],s={code:"en",week:{dow:0,doy:4},direction:"ltr",buttonText:{prev:"prev",next:"next",prevYear:"prev year",nextYear:"next year",year:"year",today:"today",month:"month",week:"week",day:"day",list:"list"},weekText:"W",weekTextLong:"Week",closeHint:"Close",timeHint:"Time",eventHint:"Event",allDayText:"all-day",moreLinkText:"more",noEventsText:"No events to display"},a=Object.assign(Object.assign({},s),{buttonHints:{prev:"Previous $0",next:"Next $0",today:(e,t)=>"day"===t?"Today":`This ${e}`},viewHint:"$0 view",navLinkHint:"Go to $0",moreLinkHint:e=>`Show ${e} more event${1===e?"":"s"}`});function l(e){let t=e.length>0?e[0].code:"en",n=o.concat(e),r={en:a};for(let e of n)r[e.code]=e;return{map:r,defaultCode:t}}function c(e,t){return"object"!=typeof e||Array.isArray(e)?function(e,t){let n=[].concat(e||[]),r=function(e,t){for(let n=0;n<e.length;n+=1){let r=e[n].toLocaleLowerCase().split("-");for(let e=r.length;e>0;e-=1){let n=r.slice(0,e).join("-");if(t[n])return t[n]}}return null}(n,t)||a;return d(e,n,r)}(e,t):d(e.code,[e.code],e)}function d(e,t,n){let i=r.mergeProps([s,n],["buttonText"]);delete i.code;let{week:o}=i;return delete i.week,{codeArg:e,codes:t,week:o,simpleNumberFormat:new Intl.NumberFormat(e),options:i}}function u(e){return{id:r.guid(),name:e.name,premiumReleaseDate:e.premiumReleaseDate?new Date(e.premiumReleaseDate):void 0,deps:e.deps||[],reducers:e.reducers||[],isLoadingFuncs:e.isLoadingFuncs||[],contextInit:[].concat(e.contextInit||[]),eventRefiners:e.eventRefiners||{},eventDefMemberAdders:e.eventDefMemberAdders||[],eventSourceRefiners:e.eventSourceRefiners||{},isDraggableTransformers:e.isDraggableTransformers||[],eventDragMutationMassagers:e.eventDragMutationMassagers||[],eventDefMutationAppliers:e.eventDefMutationAppliers||[],dateSelectionTransformers:e.dateSelectionTransformers||[],datePointTransforms:e.datePointTransforms||[],dateSpanTransforms:e.dateSpanTransforms||[],views:e.views||{},viewPropsTransformers:e.viewPropsTransformers||[],isPropsValid:e.isPropsValid||null,externalDefTransforms:e.externalDefTransforms||[],viewContainerAppends:e.viewContainerAppends||[],eventDropTransformers:e.eventDropTransformers||[],componentInteractions:e.componentInteractions||[],calendarInteractions:e.calendarInteractions||[],themeClasses:e.themeClasses||{},eventSourceDefs:e.eventSourceDefs||[],cmdFormatter:e.cmdFormatter,recurringTypes:e.recurringTypes||[],namedTimeZonedImpl:e.namedTimeZonedImpl,initialView:e.initialView||"",elementDraggingImpl:e.elementDraggingImpl,optionChangeHandlers:e.optionChangeHandlers||{},scrollGridImpl:e.scrollGridImpl||null,listenerRefiners:e.listenerRefiners||{},optionRefiners:e.optionRefiners||{},propSetHandlers:e.propSetHandlers||{}}}class h extends r.Theme{}function f(e,t,n,r){if(t[e])return t[e];let i=function(e,t,n,r){let i=n[e],o=r[e],s=e=>i&&null!==i[e]?i[e]:o&&null!==o[e]?o[e]:null,a=s("component"),l=s("superType"),c=null;if(l){if(l===e)throw new Error("Can't have a custom view type that references itself");c=f(l,t,n,r)}return!a&&c&&(a=c.component),a?{type:e,component:a,defaults:Object.assign(Object.assign({},c?c.defaults:{}),i?i.rawOptions:{}),overrides:Object.assign(Object.assign({},c?c.overrides:{}),o?o.rawOptions:{})}:null}(e,t,n,r);return i&&(t[e]=i),i}function p(e){return r.mapHash(e,g)}function g(e){let t="function"==typeof e?{component:e}:e,{component:n}=t;return t.content?n=m(t):!n||n.prototype instanceof r.BaseComponent||(n=m(Object.assign(Object.assign({},t),{content:n}))),{superType:t.type,component:n,rawOptions:t}}function m(e){return t=>i.createElement(r.ViewContextType.Consumer,null,(n=>i.createElement(r.ContentContainer,{elTag:"div",elClasses:r.buildViewClassNames(n.viewSpec),renderProps:Object.assign(Object.assign({},t),{nextDayThreshold:n.options.nextDayThreshold}),generatorName:void 0,customGenerator:e.content,classNameGenerator:e.classNames,didMount:e.didMount,willUnmount:e.willUnmount})))}function v(e,t,n,i){let o=p(e),s=p(t.views),a=function(e,t){let n,r={};for(n in e)f(n,r,e,t);for(n in t)f(n,r,e,t);return r}(o,s);return r.mapHash(a,(e=>function(e,t,n,i,o){let s=e.overrides.duration||e.defaults.duration||i.duration||n.duration,a=null,l="",c="",d={};if(s&&(a=function(e){let t=JSON.stringify(e),n=y[t];return void 0===n&&(n=r.createDuration(e),y[t]=n),n}(s),a)){let e=r.greatestDurationDenominator(a);l=e.unit,1===e.value&&(c=l,d=t[l]?t[l].rawOptions:{})}let u=t=>{let n=t.buttonText||{},r=e.defaults.buttonTextKey;return null!=r&&null!=n[r]?n[r]:null!=n[e.type]?n[e.type]:null!=n[c]?n[c]:null},h=t=>{let n=t.buttonHints||{},r=e.defaults.buttonTextKey;return null!=r&&null!=n[r]?n[r]:null!=n[e.type]?n[e.type]:null!=n[c]?n[c]:null};return{type:e.type,component:e.component,duration:a,durationUnit:l,singleUnit:c,optionDefaults:e.defaults,optionOverrides:Object.assign(Object.assign({},d),e.overrides),buttonTextOverride:u(i)||u(n)||e.overrides.buttonText,buttonTextDefault:u(o)||e.defaults.buttonText||u(r.BASE_OPTION_DEFAULTS)||e.type,buttonTitleOverride:h(i)||h(n)||e.overrides.buttonHint,buttonTitleDefault:h(o)||e.defaults.buttonHint||h(r.BASE_OPTION_DEFAULTS)}}(e,s,t,n,i)))}h.prototype.classes={root:"fc-theme-standard",tableCellShaded:"fc-cell-shaded",buttonGroup:"fc-button-group",button:"fc-button fc-button-primary",buttonActive:"fc-button-active"},h.prototype.baseIconClass="fc-icon",h.prototype.iconClasses={close:"fc-icon-x",prev:"fc-icon-chevron-left",next:"fc-icon-chevron-right",prevYear:"fc-icon-chevrons-left",nextYear:"fc-icon-chevrons-right"},h.prototype.rtlIconClasses={prev:"fc-icon-chevron-right",next:"fc-icon-chevron-left",prevYear:"fc-icon-chevrons-right",nextYear:"fc-icon-chevrons-left"},h.prototype.iconOverrideOption="buttonIcons",h.prototype.iconOverrideCustomButtonOption="icon",h.prototype.iconOverridePrefix="fc-icon-";let y={};function E(e){for(let t in e)if(e[t].isFetching)return!0;return!1}function b(e,t,n,r){let i={};for(let e of t)i[e.sourceId]=e;return n&&(i=_(i,n,r)),Object.assign(Object.assign({},e),i)}function _(e,t,n){return S(e,r.filterHash(e,(e=>function(e,t,n){return C(e,n)?!n.options.lazyFetching||!e.fetchRange||e.isFetching||t.start<e.fetchRange.start||t.end>e.fetchRange.end:!e.latestFetchId}(e,t,n))),t,!1,n)}function S(e,t,n,r,i){let o={};for(let s in e){let a=e[s];t[s]?o[s]=A(a,n,r,i):o[s]=a}return o}function A(e,t,n,i){let{options:o,calendarApi:s}=i,a=i.pluginHooks.eventSourceDefs[e.sourceDefId],l=r.guid();return a.fetch({eventSource:e,range:t,isRefetch:n,context:i},(n=>{let{rawEvents:r}=n;o.eventSourceSuccess&&(r=o.eventSourceSuccess.call(s,r,n.response)||r),e.success&&(r=e.success.call(s,r,n.response)||r),i.dispatch({type:"RECEIVE_EVENTS",sourceId:e.sourceId,fetchId:l,fetchRange:t,rawEvents:r})}),(n=>{let r=!1;o.eventSourceFailure&&(o.eventSourceFailure.call(s,n),r=!0),e.failure&&(e.failure(n),r=!0),r||console.warn(n.message,n),i.dispatch({type:"RECEIVE_EVENT_ERROR",sourceId:e.sourceId,fetchId:l,fetchRange:t,error:n})})),Object.assign(Object.assign({},e),{isFetching:!0,latestFetchId:l})}function D(e,t){return r.filterHash(e,(e=>C(e,t)))}function C(e,t){return!t.pluginHooks.eventSourceDefs[e.sourceDefId].ignoreRange}function w(e,t){switch(t.type){case"UNSELECT_DATES":return null;case"SELECT_DATES":return t.selection;default:return e}}function R(e,t){switch(t.type){case"UNSELECT_EVENT":return"";case"SELECT_EVENT":return t.eventInstanceId;default:return e}}function T(e,t){let n;switch(t.type){case"UNSET_EVENT_DRAG":return null;case"SET_EVENT_DRAG":return n=t.state,{affectedEvents:n.affectedEvents,mutatedEvents:n.mutatedEvents,isEvent:n.isEvent};default:return e}}function M(e,t){let n;switch(t.type){case"UNSET_EVENT_RESIZE":return null;case"SET_EVENT_RESIZE":return n=t.state,{affectedEvents:n.affectedEvents,mutatedEvents:n.mutatedEvents,isEvent:n.isEvent};default:return e}}function O(e,t,n,r,i){return{header:e.headerToolbar?x(e.headerToolbar,e,t,n,r,i):null,footer:e.footerToolbar?x(e.footerToolbar,e,t,n,r,i):null}}function x(e,t,n,r,i,o){let s={},a=[],l=!1;for(let c in e){let d=k(e[c],t,n,r,i,o);s[c]=d.widgets,a.push(...d.viewsWithButtons),l=l||d.hasTitle}return{sectionWidgets:s,viewsWithButtons:a,hasTitle:l}}function k(e,t,n,i,o,s){let a="rtl"===t.direction,l=t.customButtons||{},c=n.buttonText||{},d=t.buttonText||{},u=n.buttonHints||{},h=t.buttonHints||{},f=e?e.split(" "):[],p=[],g=!1;return{widgets:f.map((e=>e.split(",").map((e=>{if("title"===e)return g=!0,{buttonName:e};let n,f,m,v,y,E;if(n=l[e])m=e=>{n.click&&n.click.call(e.target,e,e.target)},(v=i.getCustomButtonIconClass(n))||(v=i.getIconClass(e,a))||(y=n.text),E=n.hint||n.text;else if(f=o[e]){p.push(e),m=()=>{s.changeView(e)},(y=f.buttonTextOverride)||(v=i.getIconClass(e,a))||(y=f.buttonTextDefault);let n=f.buttonTextOverride||f.buttonTextDefault;E=r.formatWithOrdinals(f.buttonTitleOverride||f.buttonTitleDefault||t.viewHint,[n,e],n)}else if(s[e])if(m=()=>{s[e]()},(y=c[e])||(v=i.getIconClass(e,a))||(y=d[e]),"prevYear"===e||"nextYear"===e){let t="prevYear"===e?"prev":"next";E=r.formatWithOrdinals(u[t]||h[t],[d.year||"year","year"],d[e])}else E=t=>r.formatWithOrdinals(u[e]||h[e],[d[t]||t,t],d[e]);return{buttonName:e,buttonClick:m,buttonIcon:v,buttonText:y,buttonHint:E}})))),viewsWithButtons:p,hasTitle:g}}class I{constructor(e,t,n){this.type=e,this.getCurrentData=t,this.dateEnv=n}get calendar(){return this.getCurrentData().calendarApi}get title(){return this.getCurrentData().viewTitle}get activeStart(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start)}get activeEnd(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end)}get currentStart(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start)}get currentEnd(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end)}getOption(e){return this.getCurrentData().options[e]}}function N(e,t){let n=r.hashValuesToArray(t.getCurrentData().eventSources);if(1===n.length&&1===e.length&&Array.isArray(n[0]._raw)&&Array.isArray(e[0]))return void t.dispatch({type:"RESET_RAW_EVENTS",sourceId:n[0].sourceId,rawEvents:e[0]});let i=[];for(let t of e){let e=!1;for(let r=0;r<n.length;r+=1)if(n[r]._raw===t){n.splice(r,1),e=!0;break}e||i.push(t)}for(let e of n)t.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:e.sourceId});for(let e of i)t.calendarApi.addEventSource(e)}const P=[u({name:"array-event-source",eventSourceDefs:[{ignoreRange:!0,parseMeta:e=>Array.isArray(e.events)?e.events:null,fetch(e,t){t({rawEvents:e.eventSource.meta})}}]}),u({name:"func-event-source",eventSourceDefs:[{parseMeta:e=>"function"==typeof e.events?e.events:null,fetch(e,t,n){const{dateEnv:i}=e.context,o=e.eventSource.meta;r.unpromisify(o.bind(null,r.buildRangeApiWithTimeZone(e.range,i)),(e=>t({rawEvents:e})),n)}}]}),u({name:"json-event-source",eventSourceRefiners:{method:String,extraParams:r.identity,startParam:String,endParam:String,timeZoneParam:String},eventSourceDefs:[{parseMeta:e=>!e.url||"json"!==e.format&&e.format?null:{url:e.url,format:"json",method:(e.method||"GET").toUpperCase(),extraParams:e.extraParams,startParam:e.startParam,endParam:e.endParam,timeZoneParam:e.timeZoneParam},fetch(e,t,n){const{meta:i}=e.eventSource,o=function(e,t,n){let r,i,o,s,{dateEnv:a,options:l}=n,c={};return r=e.startParam,null==r&&(r=l.startParam),i=e.endParam,null==i&&(i=l.endParam),o=e.timeZoneParam,null==o&&(o=l.timeZoneParam),s="function"==typeof e.extraParams?e.extraParams():e.extraParams||{},Object.assign(c,s),c[r]=a.formatIso(t.start),c[i]=a.formatIso(t.end),"local"!==a.timeZone&&(c[o]=a.timeZone),c}(i,e.range,e.context);r.requestJson(i.method,i.url,o).then((([e,n])=>{t({rawEvents:e,response:n})}),n)}}]}),u({name:"simple-recurring-event",recurringTypes:[{parse(e,t){if(e.daysOfWeek||e.startTime||e.endTime||e.startRecur||e.endRecur){let n,i={daysOfWeek:e.daysOfWeek||null,startTime:e.startTime||null,endTime:e.endTime||null,startRecur:e.startRecur?t.createMarker(e.startRecur):null,endRecur:e.endRecur?t.createMarker(e.endRecur):null};return e.duration&&(n=e.duration),!n&&e.startTime&&e.endTime&&(n=r.subtractDurations(e.endTime,e.startTime)),{allDayGuess:Boolean(!e.startTime&&!e.endTime),duration:n,typeData:i}}return null},expand(e,t,n){let i=r.intersectRanges(t,{start:e.startRecur,end:e.endRecur});return i?function(e,t,n,i){let o=e?r.arrayToHash(e):null,s=r.startOfDay(n.start),a=n.end,l=[];for(;s<a;){let e;o&&!o[s.getUTCDay()]||(e=t?i.add(s,t):s,l.push(e)),s=r.addDays(s,1)}return l}(e.daysOfWeek,e.startTime,i,n):[]}}],eventRefiners:{daysOfWeek:r.identity,startTime:r.createDuration,endTime:r.createDuration,duration:r.createDuration,startRecur:r.identity,endRecur:r.identity}}),u({name:"change-handler",optionChangeHandlers:{events(e,t){N([e],t)},eventSources:N}}),u({name:"misc",isLoadingFuncs:[e=>E(e.eventSources)],propSetHandlers:{dateProfile:function(e,t){t.emitter.trigger("datesSet",Object.assign(Object.assign({},r.buildRangeApiWithTimeZone(e.activeRange,t.dateEnv)),{view:t.viewApi}))},eventStore:function(e,t){let{emitter:n}=t;n.hasHandlers("eventsSet")&&n.trigger("eventsSet",r.buildEventApis(e,t))}}})];class H{constructor(e,t){this.runTaskOption=e,this.drainedOption=t,this.queue=[],this.delayedRunner=new r.DelayedRunner(this.drain.bind(this))}request(e,t){this.queue.push(e),this.delayedRunner.request(t)}pause(e){this.delayedRunner.pause(e)}resume(e,t){this.delayedRunner.resume(e,t)}drain(){let{queue:e}=this;for(;e.length;){let t,n=[];for(;t=e.shift();)this.runTask(t),n.push(t);this.drained(n)}}runTask(e){this.runTaskOption&&this.runTaskOption(e)}drained(e){this.drainedOption&&this.drainedOption(e)}}function B(e,t,n){let i;return i=/^(year|month)$/.test(e.currentRangeUnit)?e.currentRange:e.activeRange,n.formatRange(i.start,i.end,r.createFormatter(t.titleFormat||function(e){let{currentRangeUnit:t}=e;if("year"===t)return{year:"numeric"};if("month"===t)return{year:"numeric",month:"long"};let n=r.diffWholeDays(e.currentRange.start,e.currentRange.end);return null!==n&&n>1?{year:"numeric",month:"short",day:"numeric"}:{year:"numeric",month:"long",day:"numeric"}}(e)),{isEndExclusive:e.isRangeAllDay,defaultSeparator:t.titleRangeSeparator})}class j{constructor(e){this.computeCurrentViewData=r.memoize(this._computeCurrentViewData),this.organizeRawLocales=r.memoize(l),this.buildLocale=r.memoize(c),this.buildPluginHooks=function(){let e,t=[],n=[];return(i,o)=>(e&&r.isArraysEqual(i,t)&&r.isArraysEqual(o,n)||(e=function(e,t){let n={},r={premiumReleaseDate:void 0,reducers:[],isLoadingFuncs:[],contextInit:[],eventRefiners:{},eventDefMemberAdders:[],eventSourceRefiners:{},isDraggableTransformers:[],eventDragMutationMassagers:[],eventDefMutationAppliers:[],dateSelectionTransformers:[],datePointTransforms:[],dateSpanTransforms:[],views:{},viewPropsTransformers:[],isPropsValid:null,externalDefTransforms:[],viewContainerAppends:[],eventDropTransformers:[],componentInteractions:[],calendarInteractions:[],themeClasses:{},eventSourceDefs:[],cmdFormatter:null,recurringTypes:[],namedTimeZonedImpl:null,initialView:"",elementDraggingImpl:null,optionChangeHandlers:{},scrollGridImpl:null,listenerRefiners:{},optionRefiners:{},propSetHandlers:{}};function i(e){for(let l of e){const e=l.name,c=n[e];void 0===c?(n[e]=l.id,i(l.deps),a=l,r={premiumReleaseDate:(t=(s=r).premiumReleaseDate,o=a.premiumReleaseDate,void 0===t?o:void 0===o?t:new Date(Math.max(t.valueOf(),o.valueOf()))),reducers:s.reducers.concat(a.reducers),isLoadingFuncs:s.isLoadingFuncs.concat(a.isLoadingFuncs),contextInit:s.contextInit.concat(a.contextInit),eventRefiners:Object.assign(Object.assign({},s.eventRefiners),a.eventRefiners),eventDefMemberAdders:s.eventDefMemberAdders.concat(a.eventDefMemberAdders),eventSourceRefiners:Object.assign(Object.assign({},s.eventSourceRefiners),a.eventSourceRefiners),isDraggableTransformers:s.isDraggableTransformers.concat(a.isDraggableTransformers),eventDragMutationMassagers:s.eventDragMutationMassagers.concat(a.eventDragMutationMassagers),eventDefMutationAppliers:s.eventDefMutationAppliers.concat(a.eventDefMutationAppliers),dateSelectionTransformers:s.dateSelectionTransformers.concat(a.dateSelectionTransformers),datePointTransforms:s.datePointTransforms.concat(a.datePointTransforms),dateSpanTransforms:s.dateSpanTransforms.concat(a.dateSpanTransforms),views:Object.assign(Object.assign({},s.views),a.views),viewPropsTransformers:s.viewPropsTransformers.concat(a.viewPropsTransformers),isPropsValid:a.isPropsValid||s.isPropsValid,externalDefTransforms:s.externalDefTransforms.concat(a.externalDefTransforms),viewContainerAppends:s.viewContainerAppends.concat(a.viewContainerAppends),eventDropTransformers:s.eventDropTransformers.concat(a.eventDropTransformers),calendarInteractions:s.calendarInteractions.concat(a.calendarInteractions),componentInteractions:s.componentInteractions.concat(a.componentInteractions),themeClasses:Object.assign(Object.assign({},s.themeClasses),a.themeClasses),eventSourceDefs:s.eventSourceDefs.concat(a.eventSourceDefs),cmdFormatter:a.cmdFormatter||s.cmdFormatter,recurringTypes:s.recurringTypes.concat(a.recurringTypes),namedTimeZonedImpl:a.namedTimeZonedImpl||s.namedTimeZonedImpl,initialView:s.initialView||a.initialView,elementDraggingImpl:s.elementDraggingImpl||a.elementDraggingImpl,optionChangeHandlers:Object.assign(Object.assign({},s.optionChangeHandlers),a.optionChangeHandlers),scrollGridImpl:a.scrollGridImpl||s.scrollGridImpl,listenerRefiners:Object.assign(Object.assign({},s.listenerRefiners),a.listenerRefiners),optionRefiners:Object.assign(Object.assign({},s.optionRefiners),a.optionRefiners),propSetHandlers:Object.assign(Object.assign({},s.propSetHandlers),a.propSetHandlers)}):c!==l.id&&console.warn(`Duplicate plugin '${e}'`)}var t,o,s,a}return e&&i(e),i(t),r}(i,o)),t=i,n=o,e)}(),this.buildDateEnv=r.memoize(L),this.buildTheme=r.memoize(U),this.parseToolbars=r.memoize(O),this.buildViewSpecs=r.memoize(v),this.buildDateProfileGenerator=r.memoizeObjArg(F),this.buildViewApi=r.memoize(z),this.buildViewUiProps=r.memoizeObjArg(G),this.buildEventUiBySource=r.memoize(V,r.isPropsEqual),this.buildEventUiBases=r.memoize(W),this.parseContextBusinessHours=r.memoizeObjArg(Y),this.buildTitle=r.memoize(B),this.emitter=new r.Emitter,this.actionRunner=new H(this._handleAction.bind(this),this.updateData.bind(this)),this.currentCalendarOptionsInput={},this.currentCalendarOptionsRefined={},this.currentViewOptionsInput={},this.currentViewOptionsRefined={},this.currentCalendarOptionsRefiners={},this.optionsForRefining=[],this.optionsForHandling=[],this.getCurrentData=()=>this.data,this.dispatch=e=>{this.actionRunner.request(e)},this.props=e,this.actionRunner.pause();let t={},n=this.computeOptionsData(e.optionOverrides,t,e.calendarApi),i=n.calendarOptions.initialView||n.pluginHooks.initialView,o=this.computeCurrentViewData(i,n,e.optionOverrides,t);e.calendarApi.currentDataManager=this,this.emitter.setThisContext(e.calendarApi),this.emitter.setOptions(o.options);let s=r.getInitialDate(n.calendarOptions,n.dateEnv),a=o.dateProfileGenerator.build(s);r.rangeContainsMarker(a.activeRange,s)||(s=a.currentRange.start);let d={dateEnv:n.dateEnv,options:n.calendarOptions,pluginHooks:n.pluginHooks,calendarApi:e.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData};for(let e of n.pluginHooks.contextInit)e(d);let u=function(e,t,n){let i=t?t.activeRange:null;return b({},function(e,t){let n=r.buildEventSourceRefiners(t),i=[].concat(e.eventSources||[]),o=[];e.initialEvents&&i.unshift(e.initialEvents),e.events&&i.unshift(e.events);for(let e of i){let i=r.parseEventSource(e,t,n);i&&o.push(i)}return o}(e,n),i,n)}(n.calendarOptions,a,d),h={dynamicOptionOverrides:t,currentViewType:i,currentDate:s,dateProfile:a,businessHours:this.parseContextBusinessHours(d),eventSources:u,eventUiBases:{},eventStore:r.createEmptyEventStore(),renderableEventStore:r.createEmptyEventStore(),dateSelection:null,eventSelection:"",eventDrag:null,eventResize:null,selectionConfig:this.buildViewUiProps(d).selectionConfig},f=Object.assign(Object.assign({},d),h);for(let e of n.pluginHooks.reducers)Object.assign(h,e(null,null,f));q(h,d)&&this.emitter.trigger("loading",!0),this.state=h,this.updateData(),this.actionRunner.resume()}resetOptions(e,t){let{props:n}=this;void 0===t?n.optionOverrides=e:(n.optionOverrides=Object.assign(Object.assign({},n.optionOverrides||{}),e),this.optionsForRefining.push(...t)),(void 0===t||t.length)&&this.actionRunner.request({type:"NOTHING"})}_handleAction(e){let{props:t,state:n,emitter:i}=this,o=function(e,t){return"SET_OPTION"===t.type?Object.assign(Object.assign({},e),{[t.optionName]:t.rawOptionValue}):e}(n.dynamicOptionOverrides,e),s=this.computeOptionsData(t.optionOverrides,o,t.calendarApi),a=function(e,t){return"CHANGE_VIEW_TYPE"===t.type&&(e=t.viewType),e}(n.currentViewType,e),l=this.computeCurrentViewData(a,s,t.optionOverrides,o);t.calendarApi.currentDataManager=this,i.setThisContext(t.calendarApi),i.setOptions(l.options);let c={dateEnv:s.dateEnv,options:s.calendarOptions,pluginHooks:s.pluginHooks,calendarApi:t.calendarApi,dispatch:this.dispatch,emitter:i,getCurrentData:this.getCurrentData},{currentDate:d,dateProfile:u}=n;this.data&&this.data.dateProfileGenerator!==l.dateProfileGenerator&&(u=l.dateProfileGenerator.build(d)),d=r.reduceCurrentDate(d,e),u=function(e,t,n,r){let i;switch(t.type){case"CHANGE_VIEW_TYPE":return r.build(t.dateMarker||n);case"CHANGE_DATE":return r.build(t.dateMarker);case"PREV":if(i=r.buildPrev(e,n),i.isValid)return i;break;case"NEXT":if(i=r.buildNext(e,n),i.isValid)return i}return e}(u,e,d,l.dateProfileGenerator),"PREV"!==e.type&&"NEXT"!==e.type&&r.rangeContainsMarker(u.currentRange,d)||(d=u.currentRange.start);let h=function(e,t,n,i){let o=n?n.activeRange:null;switch(t.type){case"ADD_EVENT_SOURCES":return b(e,t.sources,o,i);case"REMOVE_EVENT_SOURCE":return s=e,a=t.sourceId,r.filterHash(s,(e=>e.sourceId!==a));case"PREV":case"NEXT":case"CHANGE_DATE":case"CHANGE_VIEW_TYPE":return n?_(e,o,i):e;case"FETCH_EVENT_SOURCES":return S(e,t.sourceIds?r.arrayToHash(t.sourceIds):D(e,i),o,t.isRefetch||!1,i);case"RECEIVE_EVENTS":case"RECEIVE_EVENT_ERROR":return function(e,t,n,r){let i=e[t];return i&&n===i.latestFetchId?Object.assign(Object.assign({},e),{[t]:Object.assign(Object.assign({},i),{isFetching:!1,fetchRange:r})}):e}(e,t.sourceId,t.fetchId,t.fetchRange);case"REMOVE_ALL_EVENT_SOURCES":return{};default:return e}var s,a}(n.eventSources,e,u,c),f=r.reduceEventStore(n.eventStore,e,h,u,c),p=E(h)&&!l.options.progressiveEventRendering&&n.renderableEventStore||f,{eventUiSingleBase:g,selectionConfig:m}=this.buildViewUiProps(c),v=this.buildEventUiBySource(h),y={dynamicOptionOverrides:o,currentViewType:a,currentDate:d,dateProfile:u,eventSources:h,eventStore:f,renderableEventStore:p,selectionConfig:m,eventUiBases:this.buildEventUiBases(p.defs,g,v),businessHours:this.parseContextBusinessHours(c),dateSelection:w(n.dateSelection,e),eventSelection:R(n.eventSelection,e),eventDrag:T(n.eventDrag,e),eventResize:M(n.eventResize,e)},A=Object.assign(Object.assign({},c),y);for(let t of s.pluginHooks.reducers)Object.assign(y,t(n,e,A));let C=q(n,c),O=q(y,c);!C&&O?i.trigger("loading",!0):C&&!O&&i.trigger("loading",!1),this.state=y,t.onAction&&t.onAction(e)}updateData(){let{props:e,state:t}=this,n=this.data,i=this.computeOptionsData(e.optionOverrides,t.dynamicOptionOverrides,e.calendarApi),o=this.computeCurrentViewData(t.currentViewType,i,e.optionOverrides,t.dynamicOptionOverrides),s=this.data=Object.assign(Object.assign(Object.assign({viewTitle:this.buildTitle(t.dateProfile,o.options,i.dateEnv),calendarApi:e.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData},i),o),t),a=i.pluginHooks.optionChangeHandlers,l=n&&n.calendarOptions,c=i.calendarOptions;if(l&&l!==c){l.timeZone!==c.timeZone&&(t.eventSources=s.eventSources=function(e,t,n){let r=t?t.activeRange:null;return S(e,D(e,n),r,!0,n)}(s.eventSources,t.dateProfile,s),t.eventStore=s.eventStore=r.rezoneEventStoreDates(s.eventStore,n.dateEnv,s.dateEnv),t.renderableEventStore=s.renderableEventStore=r.rezoneEventStoreDates(s.renderableEventStore,n.dateEnv,s.dateEnv));for(let e in a)-1===this.optionsForHandling.indexOf(e)&&l[e]===c[e]||a[e](c[e],s)}this.optionsForHandling=[],e.onData&&e.onData(s)}computeOptionsData(e,t,n){if(!this.optionsForRefining.length&&e===this.stableOptionOverrides&&t===this.stableDynamicOptionOverrides)return this.stableCalendarOptionsData;let{refinedOptions:r,pluginHooks:i,localeDefaults:o,availableLocaleData:s,extra:a}=this.processRawCalendarOptions(e,t);Q(a);let l=this.buildDateEnv(r.timeZone,r.locale,r.weekNumberCalculation,r.firstDay,r.weekText,i,s,r.defaultRangeSeparator),c=this.buildViewSpecs(i.views,this.stableOptionOverrides,this.stableDynamicOptionOverrides,o),d=this.buildTheme(r,i),u=this.parseToolbars(r,this.stableOptionOverrides,d,c,n);return this.stableCalendarOptionsData={calendarOptions:r,pluginHooks:i,dateEnv:l,viewSpecs:c,theme:d,toolbarConfig:u,localeDefaults:o,availableRawLocales:s.map}}processRawCalendarOptions(e,t){let{locales:n,locale:i}=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,e,t]),o=this.organizeRawLocales(n),s=o.map,a=this.buildLocale(i||o.defaultCode,s).options,l=this.buildPluginHooks(e.plugins||[],P),c=this.currentCalendarOptionsRefiners=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},r.BASE_OPTION_REFINERS),r.CALENDAR_LISTENER_REFINERS),r.CALENDAR_OPTION_REFINERS),l.listenerRefiners),l.optionRefiners),d={},u=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,a,e,t]),h={},f=this.currentCalendarOptionsInput,p=this.currentCalendarOptionsRefined,g=!1;for(let e in u)-1===this.optionsForRefining.indexOf(e)&&(u[e]===f[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&e in f&&r.COMPLEX_OPTION_COMPARATORS[e](f[e],u[e]))?h[e]=p[e]:c[e]?(h[e]=c[e](u[e]),g=!0):d[e]=f[e];return g&&(this.currentCalendarOptionsInput=u,this.currentCalendarOptionsRefined=h,this.stableOptionOverrides=e,this.stableDynamicOptionOverrides=t),this.optionsForHandling.push(...this.optionsForRefining),this.optionsForRefining=[],{rawOptions:this.currentCalendarOptionsInput,refinedOptions:this.currentCalendarOptionsRefined,pluginHooks:l,availableLocaleData:o,localeDefaults:a,extra:d}}_computeCurrentViewData(e,t,n,r){let i=t.viewSpecs[e];if(!i)throw new Error(`viewType "${e}" is not available. Please make sure you've loaded all neccessary plugins`);let{refinedOptions:o,extra:s}=this.processRawViewOptions(i,t.pluginHooks,t.localeDefaults,n,r);return Q(s),{viewSpec:i,options:o,dateProfileGenerator:this.buildDateProfileGenerator({dateProfileGeneratorClass:i.optionDefaults.dateProfileGeneratorClass,duration:i.duration,durationUnit:i.durationUnit,usesMinMaxTime:i.optionDefaults.usesMinMaxTime,dateEnv:t.dateEnv,calendarApi:this.props.calendarApi,slotMinTime:o.slotMinTime,slotMaxTime:o.slotMaxTime,showNonCurrentDates:o.showNonCurrentDates,dayCount:o.dayCount,dateAlignment:o.dateAlignment,dateIncrement:o.dateIncrement,hiddenDays:o.hiddenDays,weekends:o.weekends,nowInput:o.now,validRangeInput:o.validRange,visibleRangeInput:o.visibleRange,fixedWeekCount:o.fixedWeekCount}),viewApi:this.buildViewApi(e,this.getCurrentData,t.dateEnv)}}processRawViewOptions(e,t,n,i,o){let s=r.mergeRawOptions([r.BASE_OPTION_DEFAULTS,e.optionDefaults,n,i,e.optionOverrides,o]),a=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},r.BASE_OPTION_REFINERS),r.CALENDAR_LISTENER_REFINERS),r.CALENDAR_OPTION_REFINERS),r.VIEW_OPTION_REFINERS),t.listenerRefiners),t.optionRefiners),l={},c=this.currentViewOptionsInput,d=this.currentViewOptionsRefined,u=!1,h={};for(let e in s)s[e]===c[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&r.COMPLEX_OPTION_COMPARATORS[e](s[e],c[e])?l[e]=d[e]:(s[e]===this.currentCalendarOptionsInput[e]||r.COMPLEX_OPTION_COMPARATORS[e]&&r.COMPLEX_OPTION_COMPARATORS[e](s[e],this.currentCalendarOptionsInput[e])?e in this.currentCalendarOptionsRefined&&(l[e]=this.currentCalendarOptionsRefined[e]):a[e]?l[e]=a[e](s[e]):h[e]=s[e],u=!0);return u&&(this.currentViewOptionsInput=s,this.currentViewOptionsRefined=l),{rawOptions:this.currentViewOptionsInput,refinedOptions:this.currentViewOptionsRefined,extra:h}}}function L(e,t,n,i,o,s,a,l){let d=c(t||a.defaultCode,a.map);return new r.DateEnv({calendarSystem:"gregory",timeZone:e,namedTimeZoneImpl:s.namedTimeZonedImpl,locale:d,weekNumberCalculation:n,firstDay:i,weekText:o,cmdFormatter:s.cmdFormatter,defaultSeparator:l})}function U(e,t){return new(t.themeClasses[e.themeSystem]||h)(e)}function F(e){return new(e.dateProfileGeneratorClass||r.DateProfileGenerator)(e)}function z(e,t,n){return new I(e,t,n)}function V(e){return r.mapHash(e,(e=>e.ui))}function W(e,t,n){let r={"":t};for(let t in e){let i=e[t];i.sourceId&&n[i.sourceId]&&(r[t]=n[i.sourceId])}return r}function G(e){let{options:t}=e;return{eventUiSingleBase:r.createEventUi({display:t.eventDisplay,editable:t.editable,startEditable:t.eventStartEditable,durationEditable:t.eventDurationEditable,constraint:t.eventConstraint,overlap:"boolean"==typeof t.eventOverlap?t.eventOverlap:void 0,allow:t.eventAllow,backgroundColor:t.eventBackgroundColor,borderColor:t.eventBorderColor,textColor:t.eventTextColor,color:t.eventColor},e),selectionConfig:r.createEventUi({constraint:t.selectConstraint,overlap:"boolean"==typeof t.selectOverlap?t.selectOverlap:void 0,allow:t.selectAllow},e)}}function q(e,t){for(let n of t.pluginHooks.isLoadingFuncs)if(n(e))return!0;return!1}function Y(e){return r.parseBusinessHours(e.options.businessHours,e)}function Q(e,t){for(let n in e)console.warn(`Unknown option '${n}'`+(t?` for view '${t}'`:""))}class Z extends r.BaseComponent{render(){let e=this.props.widgetGroups.map((e=>this.renderWidgetGroup(e)));return i.createElement("div",{className:"fc-toolbar-chunk"},...e)}renderWidgetGroup(e){let{props:t}=this,{theme:n}=this.context,r=[],o=!0;for(let s of e){let{buttonName:e,buttonClick:a,buttonText:l,buttonIcon:c,buttonHint:d}=s;if("title"===e)o=!1,r.push(i.createElement("h2",{className:"fc-toolbar-title",id:t.titleId},t.title));else{let o=e===t.activeButton,s=!t.isTodayEnabled&&"today"===e||!t.isPrevEnabled&&"prev"===e||!t.isNextEnabled&&"next"===e,u=[`fc-${e}-button`,n.getClass("button")];o&&u.push(n.getClass("buttonActive")),r.push(i.createElement("button",{type:"button",title:"function"==typeof d?d(t.navUnit):d,disabled:s,"aria-pressed":o,className:u.join(" "),onClick:a},l||(c?i.createElement("span",{className:c}):"")))}}if(r.length>1){let e=o&&n.getClass("buttonGroup")||"";return i.createElement("div",{className:e},...r)}return r[0]}}class X extends r.BaseComponent{render(){let e,t,{model:n,extraClassName:r}=this.props,o=!1,s=n.sectionWidgets,a=s.center;s.left?(o=!0,e=s.left):e=s.start,s.right?(o=!0,t=s.right):t=s.end;let l=[r||"","fc-toolbar",o?"fc-toolbar-ltr":""];return i.createElement("div",{className:l.join(" ")},this.renderSection("start",e||[]),this.renderSection("center",a||[]),this.renderSection("end",t||[]))}renderSection(e,t){let{props:n}=this;return i.createElement(Z,{key:e,widgetGroups:t,title:n.title,navUnit:n.navUnit,activeButton:n.activeButton,isTodayEnabled:n.isTodayEnabled,isPrevEnabled:n.isPrevEnabled,isNextEnabled:n.isNextEnabled,titleId:n.titleId})}}class $ extends r.BaseComponent{constructor(){super(...arguments),this.state={availableWidth:null},this.handleEl=e=>{this.el=e,r.setRef(this.props.elRef,e),this.updateAvailableWidth()},this.handleResize=()=>{this.updateAvailableWidth()}}render(){let{props:e,state:t}=this,{aspectRatio:n}=e,r=["fc-view-harness",n||e.liquid||e.height?"fc-view-harness-active":"fc-view-harness-passive"],o="",s="";return n?null!==t.availableWidth?o=t.availableWidth/n:s=1/n*100+"%":o=e.height||"",i.createElement("div",{"aria-labelledby":e.labeledById,ref:this.handleEl,className:r.join(" "),style:{height:o,paddingBottom:s}},e.children)}componentDidMount(){this.context.addResizeHandler(this.handleResize)}componentWillUnmount(){this.context.removeResizeHandler(this.handleResize)}updateAvailableWidth(){this.el&&this.props.aspectRatio&&this.setState({availableWidth:this.el.offsetWidth})}}class J extends r.Interaction{constructor(e){super(e),this.handleSegClick=(e,t)=>{let{component:n}=this,{context:i}=n,o=r.getElSeg(t);if(o&&n.isValidSegDownEl(e.target)){let s=r.elementClosest(e.target,".fc-event-forced-url"),a=s?s.querySelector("a[href]").href:"";i.emitter.trigger("eventClick",{el:t,event:new r.EventImpl(n.context,o.eventRange.def,o.eventRange.instance),jsEvent:e,view:i.viewApi}),a&&!e.defaultPrevented&&(window.location.href=a)}},this.destroy=r.listenBySelector(e.el,"click",".fc-event",this.handleSegClick)}}class K extends r.Interaction{constructor(e){super(e),this.handleEventElRemove=e=>{e===this.currentSegEl&&this.handleSegLeave(null,this.currentSegEl)},this.handleSegEnter=(e,t)=>{r.getElSeg(t)&&(this.currentSegEl=t,this.triggerEvent("eventMouseEnter",e,t))},this.handleSegLeave=(e,t)=>{this.currentSegEl&&(this.currentSegEl=null,this.triggerEvent("eventMouseLeave",e,t))},this.removeHoverListeners=r.listenToHoverBySelector(e.el,".fc-event",this.handleSegEnter,this.handleSegLeave)}destroy(){this.removeHoverListeners()}triggerEvent(e,t,n){let{component:i}=this,{context:o}=i,s=r.getElSeg(n);t&&!i.isValidSegDownEl(t.target)||o.emitter.trigger(e,{el:n,event:new r.EventImpl(o,s.eventRange.def,s.eventRange.instance),jsEvent:t,view:o.viewApi})}}class ee extends r.PureComponent{constructor(){super(...arguments),this.buildViewContext=r.memoize(r.buildViewContext),this.buildViewPropTransformers=r.memoize(ne),this.buildToolbarProps=r.memoize(te),this.headerRef=i.createRef(),this.footerRef=i.createRef(),this.interactionsStore={},this.state={viewLabelId:r.getUniqueDomId()},this.registerInteractiveComponent=(e,t)=>{let n=r.parseInteractionSettings(e,t),i=[J,K].concat(this.props.pluginHooks.componentInteractions).map((e=>new e(n)));this.interactionsStore[e.uid]=i,r.interactionSettingsStore[e.uid]=n},this.unregisterInteractiveComponent=e=>{let t=this.interactionsStore[e.uid];if(t){for(let e of t)e.destroy();delete this.interactionsStore[e.uid]}delete r.interactionSettingsStore[e.uid]},this.resizeRunner=new r.DelayedRunner((()=>{this.props.emitter.trigger("_resize",!0),this.props.emitter.trigger("windowResize",{view:this.props.viewApi})})),this.handleWindowResize=e=>{let{options:t}=this.props;t.handleWindowResize&&e.target===window&&this.resizeRunner.request(t.windowResizeDelay)}}render(){let e,{props:t}=this,{toolbarConfig:n,options:o}=t,s=this.buildToolbarProps(t.viewSpec,t.dateProfile,t.dateProfileGenerator,t.currentDate,r.getNow(t.options.now,t.dateEnv),t.viewTitle),a=!1,l="";t.isHeightAuto||t.forPrint?l="":null!=o.height?a=!0:null!=o.contentHeight?l=o.contentHeight:e=Math.max(o.aspectRatio,.5);let c=this.buildViewContext(t.viewSpec,t.viewApi,t.options,t.dateProfileGenerator,t.dateEnv,t.theme,t.pluginHooks,t.dispatch,t.getCurrentData,t.emitter,t.calendarApi,this.registerInteractiveComponent,this.unregisterInteractiveComponent),d=n.header&&n.header.hasTitle?this.state.viewLabelId:"";return i.createElement(r.ViewContextType.Provider,{value:c},n.header&&i.createElement(X,Object.assign({ref:this.headerRef,extraClassName:"fc-header-toolbar",model:n.header,titleId:d},s)),i.createElement($,{liquid:a,height:l,aspectRatio:e,labeledById:d},this.renderView(t),this.buildAppendContent()),n.footer&&i.createElement(X,Object.assign({ref:this.footerRef,extraClassName:"fc-footer-toolbar",model:n.footer,titleId:""},s)))}componentDidMount(){let{props:e}=this;this.calendarInteractions=e.pluginHooks.calendarInteractions.map((t=>new t(e))),window.addEventListener("resize",this.handleWindowResize);let{propSetHandlers:t}=e.pluginHooks;for(let n in t)t[n](e[n],e)}componentDidUpdate(e){let{props:t}=this,{propSetHandlers:n}=t.pluginHooks;for(let r in n)t[r]!==e[r]&&n[r](t[r],t)}componentWillUnmount(){window.removeEventListener("resize",this.handleWindowResize),this.resizeRunner.clear();for(let e of this.calendarInteractions)e.destroy();this.props.emitter.trigger("_unmount")}buildAppendContent(){let{props:e}=this,t=e.pluginHooks.viewContainerAppends.map((t=>t(e)));return i.createElement(i.Fragment,{},...t)}renderView(e){let{pluginHooks:t}=e,{viewSpec:n}=e,r={dateProfile:e.dateProfile,businessHours:e.businessHours,eventStore:e.renderableEventStore,eventUiBases:e.eventUiBases,dateSelection:e.dateSelection,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,isHeightAuto:e.isHeightAuto,forPrint:e.forPrint},o=this.buildViewPropTransformers(t.viewPropsTransformers);for(let t of o)Object.assign(r,t.transform(r,e));let s=n.component;return i.createElement(s,Object.assign({},r))}}function te(e,t,n,i,o,s){let a=n.build(o,void 0,!1),l=n.buildPrev(t,i,!1),c=n.buildNext(t,i,!1);return{title:s,activeButton:e.type,navUnit:e.singleUnit,isTodayEnabled:a.isValid&&!r.rangeContainsMarker(t.currentRange,o),isPrevEnabled:l.isValid,isNextEnabled:c.isValid}}function ne(e){return e.map((e=>new e))}class re extends r.CalendarImpl{constructor(e,t={}){super(),this.isRendering=!1,this.isRendered=!1,this.currentClassNames=[],this.customContentRenderId=0,this.handleAction=e=>{switch(e.type){case"SET_EVENT_DRAG":case"SET_EVENT_RESIZE":this.renderRunner.tryDrain()}},this.handleData=e=>{this.currentData=e,this.renderRunner.request(e.calendarOptions.rerenderDelay)},this.handleRenderRequest=()=>{if(this.isRendering){this.isRendered=!0;let{currentData:e}=this;r.flushSync((()=>{i.render(i.createElement(r.CalendarRoot,{options:e.calendarOptions,theme:e.theme,emitter:e.emitter},((t,n,o,s)=>(this.setClassNames(t),this.setHeight(n),i.createElement(r.RenderId.Provider,{value:this.customContentRenderId},i.createElement(ee,Object.assign({isHeightAuto:o,forPrint:s},e)))))),this.el)}))}else this.isRendered&&(this.isRendered=!1,i.render(null,this.el),this.setClassNames([]),this.setHeight(""))},r.ensureElHasStyles(e),this.el=e,this.renderRunner=new r.DelayedRunner(this.handleRenderRequest),new j({optionOverrides:t,calendarApi:this,onAction:this.handleAction,onData:this.handleData})}render(){let e=this.isRendering;e?this.customContentRenderId+=1:this.isRendering=!0,this.renderRunner.request(),e&&this.updateSize()}destroy(){this.isRendering&&(this.isRendering=!1,this.renderRunner.request())}updateSize(){r.flushSync((()=>{super.updateSize()}))}batchRendering(e){this.renderRunner.pause("batchRendering"),e(),this.renderRunner.resume("batchRendering")}pauseRendering(){this.renderRunner.pause("pauseRendering")}resumeRendering(){this.renderRunner.resume("pauseRendering",!0)}resetOptions(e,t){this.currentDataManager.resetOptions(e,t)}setClassNames(e){if(!r.isArraysEqual(e,this.currentClassNames)){let{classList:t}=this.el;for(let e of this.currentClassNames)t.remove(e);for(let n of e)t.add(n);this.currentClassNames=e}}setHeight(e){r.applyStyleProp(this.el,"height",e)}}function ie(e){let t=c(e.locale||"en",l([]).map);return new r.DateEnv(Object.assign(Object.assign({timeZone:r.BASE_OPTION_DEFAULTS.timeZone,calendarSystem:"gregory"},e),{locale:t}))}t.JsonRequestError=r.JsonRequestError,t.Calendar=re,t.createPlugin=u,t.formatDate=function(e,t={}){let n=ie(t),i=r.createFormatter(t),o=n.createMarkerMeta(e);return o?n.format(o.marker,i,{forcedTzo:o.forcedTzo}):""},t.formatRange=function(e,t,n){let i=ie("object"==typeof n&&n?n:{}),o=r.createFormatter(n),s=i.createMarkerMeta(e),a=i.createMarkerMeta(t);return s&&a?i.formatRange(s.marker,a.marker,o,{forcedStartTzo:s.forcedTzo,forcedEndTzo:a.forcedTzo,isEndExclusive:n.isEndExclusive,defaultSeparator:r.BASE_OPTION_DEFAULTS.defaultRangeSeparator}):""},t.globalLocales=o,t.globalPlugins=P,t.sliceEvents=function(e,t){return r.sliceEventStore(e.eventStore,e.eventUiBases,e.dateProfile.activeRange,t?e.nextDayThreshold:null).fg},t.version="6.1.8"},873:(e,t,n)=>{var r=n(400),i=n(748);function o(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var s=o(r);const a=[],l=new Map;function c(e){a.push(e),l.forEach((t=>{u(t,e)}))}function d(e){let t=l.get(e);if(!t||!t.isConnected){if(t=e.querySelector("style[data-fullcalendar]"),!t){t=document.createElement("style"),t.setAttribute("data-fullcalendar","");const n=(void 0===h&&(h=function(){const e=document.querySelector('meta[name="csp-nonce"]');if(e&&e.hasAttribute("content"))return e.getAttribute("content");const t=document.querySelector("script[nonce]");return t&&t.nonce||""}()),h);n&&(t.nonce=n);const r=e===document?document.head:e,i=e===document?r.querySelector("script,link[rel=stylesheet],link[as=style],style"):r.firstChild;r.insertBefore(t,i)}l.set(e,t),function(e){for(const t of a)u(e,t)}(t)}}function u(e,t){const{sheet:n}=e,r=n.cssRules.length;t.split("}").forEach(((e,t)=>{(e=e.trim())&&n.insertRule(e+"}",r+t)}))}let h;function f(e){e.parentNode&&e.parentNode.removeChild(e)}function p(e,t){if(e.closest)return e.closest(t);if(!document.documentElement.contains(e))return null;do{if(g(e,t))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType);return null}function g(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector).call(e,t)}function m(e,t){let n=e instanceof HTMLElement?[e]:e,r=[];for(let e=0;e<n.length;e+=1){let i=n[e].querySelectorAll(t);for(let e=0;e<i.length;e+=1)r.push(i[e])}return r}"undefined"!=typeof document&&d(document),c(':root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url("data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=") format("truetype")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:"\\e900"}.fc-icon-chevron-right:before{content:"\\e901"}.fc-icon-chevrons-left:before{content:"\\e902"}.fc-icon-chevrons-right:before{content:"\\e903"}.fc-icon-minus-square:before{content:"\\e904"}.fc-icon-plus-square:before{content:"\\e905"}.fc-icon-x:before{content:"\\e906"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:"";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:"";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}');const v=/(top|left|right|bottom|width|height)$/i;function y(e,t){for(let n in t)E(e,n,t[n])}function E(e,t,n){null==n?e.style[t]="":"number"==typeof n&&v.test(t)?e.style[t]=`${n}px`:e.style[t]=n}function b(e){var t,n;return null!==(n=null===(t=e.composedPath)||void 0===t?void 0:t.call(e)[0])&&void 0!==n?n:e.target}let _=0;function S(){return _+=1,"fc-dom-"+_}function A(e){e.preventDefault()}function D(e,t,n,r){let i=function(e,t){return n=>{let r=p(n.target,e);r&&t.call(r,n,r)}}(n,r);return e.addEventListener(t,i),()=>{e.removeEventListener(t,i)}}const C=["webkitTransitionEnd","otransitionend","oTransitionEnd","msTransitionEnd","transitionend"];function w(e){return Object.assign({onClick:e},R(e))}function R(e){return{tabIndex:0,onKeyDown(t){"Enter"!==t.key&&" "!==t.key||(e(t),t.preventDefault())}}}let T=0;function M(){return T+=1,String(T)}function O(e){let t,n,r=[],i=[];for("string"==typeof e?i=e.split(/\s*,\s*/):"function"==typeof e?i=[e]:Array.isArray(e)&&(i=e),t=0;t<i.length;t+=1)n=i[t],"string"==typeof n?r.push("-"===n.charAt(0)?{field:n.substring(1),order:-1}:{field:n,order:1}):"function"==typeof n&&r.push({func:n});return r}function x(e,t,n){let r,i;for(r=0;r<n.length;r+=1)if(i=k(e,t,n[r]),i)return i;return 0}function k(e,t,n){return n.func?n.func(e,t):I(e[n.field],t[n.field])*(n.order||1)}function I(e,t){return e||t?null==t?-1:null==e?1:"string"==typeof e||"string"==typeof t?String(e).localeCompare(String(t)):e-t:0}function N(e,t){let n=String(e);return"000".substr(0,t-n.length)+n}function P(e,t,n){return"function"==typeof e?e(...t):"string"==typeof e?t.reduce(((e,t,n)=>e.replace("$"+n,t||"")),e):n}function H(e){return e%1==0}function B(e){let t=e.querySelector(".fc-scrollgrid-shrink-frame"),n=e.querySelector(".fc-scrollgrid-shrink-cushion");if(!t)throw new Error("needs fc-scrollgrid-shrink-frame className");if(!n)throw new Error("needs fc-scrollgrid-shrink-cushion className");return e.getBoundingClientRect().width-t.getBoundingClientRect().width+n.getBoundingClientRect().width}const j=["years","months","days","milliseconds"],L=/^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;function U(e,t){return"string"==typeof e?function(e){let t=L.exec(e);if(t){let e=t[1]?-1:1;return{years:0,months:0,days:e*(t[2]?parseInt(t[2],10):0),milliseconds:e*(60*(t[3]?parseInt(t[3],10):0)*60*1e3+60*(t[4]?parseInt(t[4],10):0)*1e3+1e3*(t[5]?parseInt(t[5],10):0)+(t[6]?parseInt(t[6],10):0))}}return null}(e):"object"==typeof e&&e?F(e):"number"==typeof e?F({[t||"milliseconds"]:e}):null}function F(e){let t={years:e.years||e.year||0,months:e.months||e.month||0,days:e.days||e.day||0,milliseconds:60*(e.hours||e.hour||0)*60*1e3+60*(e.minutes||e.minute||0)*1e3+1e3*(e.seconds||e.second||0)+(e.milliseconds||e.millisecond||e.ms||0)},n=e.weeks||e.week;return n&&(t.days+=7*n,t.specifiedWeeks=!0),t}function z(e){return V(e)/864e5}function V(e){return 31536e6*e.years+2592e6*e.months+864e5*e.days+e.milliseconds}function W(e){let t=e.milliseconds;if(t){if(t%1e3!=0)return{unit:"millisecond",value:t};if(t%6e4!=0)return{unit:"second",value:t/1e3};if(t%36e5!=0)return{unit:"minute",value:t/6e4};if(t)return{unit:"hour",value:t/36e5}}return e.days?e.specifiedWeeks&&e.days%7==0?{unit:"week",value:e.days/7}:{unit:"day",value:e.days}:e.months?{unit:"month",value:e.months}:e.years?{unit:"year",value:e.years}:{unit:"millisecond",value:0}}const{hasOwnProperty:G}=Object.prototype;function q(e,t){let n={};if(t)for(let r in t)if(t[r]===Fe){let t=[];for(let i=e.length-1;i>=0;i-=1){let o=e[i][r];if("object"==typeof o&&o)t.unshift(o);else if(void 0!==o){n[r]=o;break}}t.length&&(n[r]=q(t))}for(let t=e.length-1;t>=0;t-=1){let r=e[t];for(let e in r)e in n||(n[e]=r[e])}return n}function Y(e,t){let n={};for(let r in e)t(e[r],r)&&(n[r]=e[r]);return n}function Q(e,t){let n={};for(let r in e)n[r]=t(e[r],r);return n}function Z(e){let t=[];for(let n in e)t.push(e[n]);return t}function X(e,t){if(e===t)return!0;for(let n in e)if(G.call(e,n)&&!(n in t))return!1;for(let n in t)if(G.call(t,n)&&e[n]!==t[n])return!1;return!0}const $=/^on[A-Z]/;function J(e,t){let n=[];for(let r in e)G.call(e,r)&&(r in t||n.push(r));for(let r in t)G.call(t,r)&&e[r]!==t[r]&&n.push(r);return n}function K(e,t,n={}){if(e===t)return!0;for(let s in t)if(!(s in e&&(r=e[s],i=t[s],o=n[s],r===i||!0===o||o&&o(r,i))))return!1;var r,i,o;for(let n in e)if(!(n in t))return!1;return!0}function ee(e,t=0,n,r=1){let i=[];null==n&&(n=Object.keys(e).length);for(let o=t;o<n;o+=r){let t=e[o];void 0!==t&&i.push(t)}return i}function te(e,t,n){if(e===t)return!0;let r,i=e.length;if(i!==t.length)return!1;for(r=0;r<i;r+=1)if(!(n?n(e[r],t[r]):e[r]===t[r]))return!1;return!0}const ne=["sun","mon","tue","wed","thu","fri","sat"];function re(e,t){let n=pe(e);return n[2]+=t,ge(n)}function ie(e,t){let n=pe(e);return n[6]+=t,ge(n)}function oe(e,t){return(t.valueOf()-e.valueOf())/864e5}function se(e,t){let n=ce(e),r=ce(t);return{years:0,months:0,days:Math.round(oe(n,r)),milliseconds:t.valueOf()-r.valueOf()-(e.valueOf()-n.valueOf())}}function ae(e,t){let n=le(e,t);return null!==n&&n%7==0?n/7:null}function le(e,t){return ve(e)===ve(t)?Math.round(oe(e,t)):null}function ce(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()])}function de(e,t,n,r){let i=ge([t,0,1+ue(t,n,r)]),o=ce(e),s=Math.round(oe(i,o));return Math.floor(s/7)+1}function ue(e,t,n){let r=7+t-n;return-(7+ge([e,0,r]).getUTCDay()-t)%7+r-1}function he(e){return[e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()]}function fe(e){return new Date(e[0],e[1]||0,null==e[2]?1:e[2],e[3]||0,e[4]||0,e[5]||0)}function pe(e){return[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()]}function ge(e){return 1===e.length&&(e=e.concat([0])),new Date(Date.UTC(...e))}function me(e){return!isNaN(e.valueOf())}function ve(e){return 1e3*e.getUTCHours()*60*60+1e3*e.getUTCMinutes()*60+1e3*e.getUTCSeconds()+e.getUTCMilliseconds()}function ye(e,t,n=!1){let r=e.toISOString();return r=r.replace(".000",""),n&&(r=r.replace("T00:00:00Z","")),r.length>10&&(null==t?r=r.replace("Z",""):0!==t&&(r=r.replace("Z",be(t,!0)))),r}function Ee(e){return e.toISOString().replace(/T.*$/,"")}function be(e,t=!1){let n=e<0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),o=Math.round(r%60);return t?`${n+N(i,2)}:${N(o,2)}`:`GMT${n}${i}${o?`:${N(o,2)}`:""}`}function _e(e,t,n){let r,i;return function(...o){if(r){if(!te(r,o)){n&&n(i);let r=e.apply(this,o);t&&t(r,i)||(i=r)}}else i=e.apply(this,o);return r=o,i}}function Se(e,t,n){let r,i;return o=>{if(r){if(!X(r,o)){n&&n(i);let r=e.call(this,o);t&&t(r,i)||(i=r)}}else i=e.call(this,o);return r=o,i}}const Ae={week:3,separator:0,omitZeroMinute:0,meridiem:0,omitCommas:0},De={timeZoneName:7,era:6,year:5,month:4,day:2,weekday:2,hour:1,minute:1,second:1},Ce=/\s*([ap])\.?m\.?/i,we=/,/g,Re=/\s+/g,Te=/\u200e/g,Me=/UTC|GMT/;class Oe{constructor(e){let t={},n={},r=0;for(let i in e)i in Ae?(n[i]=e[i],r=Math.max(Ae[i],r)):(t[i]=e[i],i in De&&(r=Math.max(De[i],r)));this.standardDateProps=t,this.extendedSettings=n,this.severity=r,this.buildFormattingFunc=_e(xe)}format(e,t){return this.buildFormattingFunc(this.standardDateProps,this.extendedSettings,t)(e)}formatRange(e,t,n,r){let{standardDateProps:i,extendedSettings:o}=this,s=(a=e.marker,l=t.marker,(c=n.calendarSystem).getMarkerYear(a)!==c.getMarkerYear(l)?5:c.getMarkerMonth(a)!==c.getMarkerMonth(l)?4:c.getMarkerDay(a)!==c.getMarkerDay(l)?2:ve(a)!==ve(l)?1:0);var a,l,c;if(!s)return this.format(e,n);let d=s;!(d>1)||"numeric"!==i.year&&"2-digit"!==i.year||"numeric"!==i.month&&"2-digit"!==i.month||"numeric"!==i.day&&"2-digit"!==i.day||(d=1);let u=this.format(e,n),h=this.format(t,n);if(u===h)return u;let f=xe(function(e,t){let n={};for(let r in e)(!(r in De)||De[r]<=t)&&(n[r]=e[r]);return n}(i,d),o,n),p=f(e),g=f(t),m=function(e,t,n,r){let i=0;for(;i<e.length;){let o=e.indexOf(t,i);if(-1===o)break;let s=e.substr(0,o);i=o+t.length;let a=e.substr(i),l=0;for(;l<n.length;){let e=n.indexOf(r,l);if(-1===e)break;let t=n.substr(0,e);l=e+r.length;let i=n.substr(l);if(s===t&&a===i)return{before:s,after:a}}}return null}(u,p,h,g),v=o.separator||r||n.defaultSeparator||"";return m?m.before+p+v+g+m.after:u+v+h}getLargestUnit(){switch(this.severity){case 7:case 6:case 5:return"year";case 4:return"month";case 3:return"week";case 2:return"day";default:return"time"}}}function xe(e,t,n){let r=Object.keys(e).length;return 1===r&&"short"===e.timeZoneName?e=>be(e.timeZoneOffset):0===r&&t.week?e=>function(e,t,n,r,i){let o=[];return"long"===i?o.push(n):"short"!==i&&"narrow"!==i||o.push(t),"long"!==i&&"short"!==i||o.push(" "),o.push(r.simpleNumberFormat.format(e)),"rtl"===r.options.direction&&o.reverse(),o.join("")}(n.computeWeekNumber(e.marker),n.weekText,n.weekTextLong,n.locale,t.week):function(e,t,n){e=Object.assign({},e),t=Object.assign({},t),function(e,t){e.timeZoneName&&(e.hour||(e.hour="2-digit"),e.minute||(e.minute="2-digit")),"long"===e.timeZoneName&&(e.timeZoneName="short"),t.omitZeroMinute&&(e.second||e.millisecond)&&delete t.omitZeroMinute}(e,t),e.timeZone="UTC";let r,i=new Intl.DateTimeFormat(n.locale.codes,e);if(t.omitZeroMinute){let t=Object.assign({},e);delete t.minute,r=new Intl.DateTimeFormat(n.locale.codes,t)}return o=>{let s,{marker:a}=o;return s=r&&!a.getUTCMinutes()?r:i,function(e,t,n,r,i){return e=e.replace(Te,""),"short"===n.timeZoneName&&(e=function(e,t){let n=!1;return e=e.replace(Me,(()=>(n=!0,t))),n||(e+=` ${t}`),e}(e,"UTC"===i.timeZone||null==t.timeZoneOffset?"UTC":be(t.timeZoneOffset))),r.omitCommas&&(e=e.replace(we,"").trim()),r.omitZeroMinute&&(e=e.replace(":00","")),!1===r.meridiem?e=e.replace(Ce,"").trim():"narrow"===r.meridiem?e=e.replace(Ce,((e,t)=>t.toLocaleLowerCase())):"short"===r.meridiem?e=e.replace(Ce,((e,t)=>`${t.toLocaleLowerCase()}m`)):"lowercase"===r.meridiem&&(e=e.replace(Ce,(e=>e.toLocaleLowerCase()))),e=(e=e.replace(Re," ")).trim()}(s.format(a),o,e,t,n)}}(e,t,n)}function ke(e,t){let n=t.markerToArray(e.marker);return{marker:e.marker,timeZoneOffset:e.timeZoneOffset,array:n,year:n[0],month:n[1],day:n[2],hour:n[3],minute:n[4],second:n[5],millisecond:n[6]}}function Ie(e,t,n,r){let i=ke(e,n.calendarSystem);return{date:i,start:i,end:t?ke(t,n.calendarSystem):null,timeZone:n.timeZone,localeCodes:n.locale.codes,defaultSeparator:r||n.defaultSeparator}}class Ne{constructor(e){this.cmdStr=e}format(e,t,n){return t.cmdFormatter(this.cmdStr,Ie(e,null,t,n))}formatRange(e,t,n,r){return n.cmdFormatter(this.cmdStr,Ie(e,t,n,r))}}class Pe{constructor(e){this.func=e}format(e,t,n){return this.func(Ie(e,null,t,n))}formatRange(e,t,n,r){return this.func(Ie(e,t,n,r))}}function He(e){return"object"==typeof e&&e?new Oe(e):"string"==typeof e?new Ne(e):"function"==typeof e?new Pe(e):null}const Be={navLinkDayClick:Ge,navLinkWeekClick:Ge,duration:U,bootstrapFontAwesome:Ge,buttonIcons:Ge,customButtons:Ge,defaultAllDayEventDuration:U,defaultTimedEventDuration:U,nextDayThreshold:U,scrollTime:U,scrollTimeReset:Boolean,slotMinTime:U,slotMaxTime:U,dayPopoverFormat:He,slotDuration:U,snapDuration:U,headerToolbar:Ge,footerToolbar:Ge,defaultRangeSeparator:String,titleRangeSeparator:String,forceEventDuration:Boolean,dayHeaders:Boolean,dayHeaderFormat:He,dayHeaderClassNames:Ge,dayHeaderContent:Ge,dayHeaderDidMount:Ge,dayHeaderWillUnmount:Ge,dayCellClassNames:Ge,dayCellContent:Ge,dayCellDidMount:Ge,dayCellWillUnmount:Ge,initialView:String,aspectRatio:Number,weekends:Boolean,weekNumberCalculation:Ge,weekNumbers:Boolean,weekNumberClassNames:Ge,weekNumberContent:Ge,weekNumberDidMount:Ge,weekNumberWillUnmount:Ge,editable:Boolean,viewClassNames:Ge,viewDidMount:Ge,viewWillUnmount:Ge,nowIndicator:Boolean,nowIndicatorClassNames:Ge,nowIndicatorContent:Ge,nowIndicatorDidMount:Ge,nowIndicatorWillUnmount:Ge,showNonCurrentDates:Boolean,lazyFetching:Boolean,startParam:String,endParam:String,timeZoneParam:String,timeZone:String,locales:Ge,locale:Ge,themeSystem:String,dragRevertDuration:Number,dragScroll:Boolean,allDayMaintainDuration:Boolean,unselectAuto:Boolean,dropAccept:Ge,eventOrder:O,eventOrderStrict:Boolean,handleWindowResize:Boolean,windowResizeDelay:Number,longPressDelay:Number,eventDragMinDistance:Number,expandRows:Boolean,height:Ge,contentHeight:Ge,direction:String,weekNumberFormat:He,eventResizableFromStart:Boolean,displayEventTime:Boolean,displayEventEnd:Boolean,weekText:String,weekTextLong:String,progressiveEventRendering:Boolean,businessHours:Ge,initialDate:Ge,now:Ge,eventDataTransform:Ge,stickyHeaderDates:Ge,stickyFooterScrollbar:Ge,viewHeight:Ge,defaultAllDay:Boolean,eventSourceFailure:Ge,eventSourceSuccess:Ge,eventDisplay:String,eventStartEditable:Boolean,eventDurationEditable:Boolean,eventOverlap:Ge,eventConstraint:Ge,eventAllow:Ge,eventBackgroundColor:String,eventBorderColor:String,eventTextColor:String,eventColor:String,eventClassNames:Ge,eventContent:Ge,eventDidMount:Ge,eventWillUnmount:Ge,selectConstraint:Ge,selectOverlap:Ge,selectAllow:Ge,droppable:Boolean,unselectCancel:String,slotLabelFormat:Ge,slotLaneClassNames:Ge,slotLaneContent:Ge,slotLaneDidMount:Ge,slotLaneWillUnmount:Ge,slotLabelClassNames:Ge,slotLabelContent:Ge,slotLabelDidMount:Ge,slotLabelWillUnmount:Ge,dayMaxEvents:Ge,dayMaxEventRows:Ge,dayMinWidth:Number,slotLabelInterval:U,allDayText:String,allDayClassNames:Ge,allDayContent:Ge,allDayDidMount:Ge,allDayWillUnmount:Ge,slotMinWidth:Number,navLinks:Boolean,eventTimeFormat:He,rerenderDelay:Number,moreLinkText:Ge,moreLinkHint:Ge,selectMinDistance:Number,selectable:Boolean,selectLongPressDelay:Number,eventLongPressDelay:Number,selectMirror:Boolean,eventMaxStack:Number,eventMinHeight:Number,eventMinWidth:Number,eventShortHeight:Number,slotEventOverlap:Boolean,plugins:Ge,firstDay:Number,dayCount:Number,dateAlignment:String,dateIncrement:U,hiddenDays:Ge,fixedWeekCount:Boolean,validRange:Ge,visibleRange:Ge,titleFormat:Ge,eventInteractive:Boolean,noEventsText:String,viewHint:Ge,navLinkHint:Ge,closeHint:String,timeHint:String,eventHint:String,moreLinkClick:Ge,moreLinkClassNames:Ge,moreLinkContent:Ge,moreLinkDidMount:Ge,moreLinkWillUnmount:Ge,monthStartFormat:He,handleCustomRendering:Ge,customRenderingMetaMap:Ge,customRenderingReplacesEl:Boolean},je={datesSet:Ge,eventsSet:Ge,eventAdd:Ge,eventChange:Ge,eventRemove:Ge,windowResize:Ge,eventClick:Ge,eventMouseEnter:Ge,eventMouseLeave:Ge,select:Ge,unselect:Ge,loading:Ge,_unmount:Ge,_beforeprint:Ge,_afterprint:Ge,_noEventDrop:Ge,_noEventResize:Ge,_resize:Ge,_scrollRequest:Ge},Le={buttonText:Ge,buttonHints:Ge,views:Ge,plugins:Ge,initialEvents:Ge,events:Ge,eventSources:Ge},Ue={headerToolbar:Fe,footerToolbar:Fe,buttonText:Fe,buttonHints:Fe,buttonIcons:Fe,dateIncrement:Fe,plugins:ze,events:ze,eventSources:ze,resources:ze};function Fe(e,t){return"object"==typeof e&&"object"==typeof t&&e&&t?X(e,t):e===t}function ze(e,t){return Array.isArray(e)&&Array.isArray(t)?te(e,t):e===t}const Ve={type:String,component:Ge,buttonText:String,buttonTextKey:String,dateProfileGeneratorClass:Ge,usesMinMaxTime:Boolean,classNames:Ge,content:Ge,didMount:Ge,willUnmount:Ge};function We(e,t){let n={},r={};for(let r in t)r in e&&(n[r]=t[r](e[r]));for(let n in e)n in t||(r[n]=e[n]);return{refined:n,extra:r}}function Ge(e){return e}function qe(e,t,n,r){return{instanceId:M(),defId:e,range:t,forcedStartTzo:null==n?null:n,forcedEndTzo:null==r?null:r}}function Ye(e,t,n){let{dateEnv:r,pluginHooks:i,options:o}=n,{defs:s,instances:a}=e;a=Y(a,(e=>!s[e.defId].recurringDef));for(let e in s){let n=s[e];if(n.recurringDef){let{duration:s}=n.recurringDef;s||(s=n.allDay?o.defaultAllDayEventDuration:o.defaultTimedEventDuration);let l=Qe(n,s,t,r,i.recurringTypes);for(let t of l){let n=qe(e,{start:t,end:r.add(t,s)});a[n.instanceId]=n}}}return{defs:s,instances:a}}function Qe(e,t,n,r,i){let o=i[e.recurringDef.typeId].expand(e.recurringDef.typeData,{start:r.subtract(n.start,t),end:n.end},r);return e.allDay&&(o=o.map(ce)),o}function Ze(e,t,n,r,i,o){let s={defs:{},instances:{}},a=ut(n);for(let l of e){let e=ct(l,t,n,r,a,i,o);e&&Xe(e,s)}return s}function Xe(e,t={defs:{},instances:{}}){return t.defs[e.def.defId]=e.def,e.instance&&(t.instances[e.instance.instanceId]=e.instance),t}function $e(e,t){let n=e.instances[t];if(n){let t=e.defs[n.defId],r=Ke(e,(e=>{return n=t,r=e,Boolean(n.groupId&&n.groupId===r.groupId);var n,r}));return r.defs[t.defId]=t,r.instances[n.instanceId]=n,r}return{defs:{},instances:{}}}function Je(e,t){return{defs:Object.assign(Object.assign({},e.defs),t.defs),instances:Object.assign(Object.assign({},e.instances),t.instances)}}function Ke(e,t){let n=Y(e.defs,t),r=Y(e.instances,(e=>n[e.defId]));return{defs:n,instances:r}}function et(e){return Array.isArray(e)?e:"string"==typeof e?e.split(/\s+/):[]}const tt={display:String,editable:Boolean,startEditable:Boolean,durationEditable:Boolean,constraint:Ge,overlap:Ge,allow:Ge,className:et,classNames:et,color:String,backgroundColor:String,borderColor:String,textColor:String},nt={display:null,startEditable:null,durationEditable:null,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]};function rt(e,t){let n=function(e,t){return Array.isArray(e)?Ze(e,null,t,!0):"object"==typeof e&&e?Ze([e],null,t,!0):null!=e?String(e):null}(e.constraint,t);return{display:e.display||null,startEditable:null!=e.startEditable?e.startEditable:e.editable,durationEditable:null!=e.durationEditable?e.durationEditable:e.editable,constraints:null!=n?[n]:[],overlap:null!=e.overlap?e.overlap:null,allows:null!=e.allow?[e.allow]:[],backgroundColor:e.backgroundColor||e.color||"",borderColor:e.borderColor||e.color||"",textColor:e.textColor||"",classNames:(e.className||[]).concat(e.classNames||[])}}function it(e){return e.reduce(ot,nt)}function ot(e,t){return{display:null!=t.display?t.display:e.display,startEditable:null!=t.startEditable?t.startEditable:e.startEditable,durationEditable:null!=t.durationEditable?t.durationEditable:e.durationEditable,constraints:e.constraints.concat(t.constraints),overlap:"boolean"==typeof t.overlap?t.overlap:e.overlap,allows:e.allows.concat(t.allows),backgroundColor:t.backgroundColor||e.backgroundColor,borderColor:t.borderColor||e.borderColor,textColor:t.textColor||e.textColor,classNames:e.classNames.concat(t.classNames)}}const st={id:String,groupId:String,title:String,url:String,interactive:Boolean},at={start:Ge,end:Ge,date:Ge,allDay:Boolean},lt=Object.assign(Object.assign(Object.assign({},st),at),{extendedProps:Ge});function ct(e,t,n,r,i=ut(n),o,s){let{refined:a,extra:l}=dt(e,n,i),c=function(e,t){let n=null;return e&&(n=e.defaultAllDay),null==n&&(n=t.options.defaultAllDay),n}(t,n),d=function(e,t,n,r){for(let i=0;i<r.length;i+=1){let o=r[i].parse(e,n);if(o){let{allDay:n}=e;return null==n&&(n=t,null==n&&(n=o.allDayGuess,null==n&&(n=!1))),{allDay:n,duration:o.duration,typeData:o.typeData,typeId:i}}}return null}(a,c,n.dateEnv,n.pluginHooks.recurringTypes);if(d){let e=ht(a,l,t?t.sourceId:"",d.allDay,Boolean(d.duration),n,o);return e.recurringDef={typeId:d.typeId,typeData:d.typeData,duration:d.duration},{def:e,instance:null}}let u=function(e,t,n,r){let i,o,{allDay:s}=e,a=null,l=!1,c=null,d=null!=e.start?e.start:e.date;if(i=n.dateEnv.createMarkerMeta(d),i)a=i.marker;else if(!r)return null;return null!=e.end&&(o=n.dateEnv.createMarkerMeta(e.end)),null==s&&(s=null!=t?t:(!i||i.isTimeUnspecified)&&(!o||o.isTimeUnspecified)),s&&a&&(a=ce(a)),o&&(c=o.marker,s&&(c=ce(c)),a&&c<=a&&(c=null)),c?l=!0:r||(l=n.options.forceEventDuration||!1,c=n.dateEnv.add(a,s?n.options.defaultAllDayEventDuration:n.options.defaultTimedEventDuration)),{allDay:s,hasEnd:l,range:{start:a,end:c},forcedStartTzo:i?i.forcedTzo:null,forcedEndTzo:o?o.forcedTzo:null}}(a,c,n,r);if(u){let e=ht(a,l,t?t.sourceId:"",u.allDay,u.hasEnd,n,o),r=qe(e.defId,u.range,u.forcedStartTzo,u.forcedEndTzo);return s&&e.publicId&&s[e.publicId]&&(r.instanceId=s[e.publicId]),{def:e,instance:r}}return null}function dt(e,t,n=ut(t)){return We(e,n)}function ut(e){return Object.assign(Object.assign(Object.assign({},tt),lt),e.pluginHooks.eventRefiners)}function ht(e,t,n,r,i,o,s){let a={title:e.title||"",groupId:e.groupId||"",publicId:e.id||"",url:e.url||"",recurringDef:null,defId:(s&&e.id?s[e.id]:"")||M(),sourceId:n,allDay:r,hasEnd:i,interactive:e.interactive,ui:rt(e,o),extendedProps:Object.assign(Object.assign({},e.extendedProps||{}),t)};for(let t of o.pluginHooks.eventDefMemberAdders)Object.assign(a,t(e));return Object.freeze(a.ui.classNames),Object.freeze(a.extendedProps),a}const ft={startTime:"09:00",endTime:"17:00",daysOfWeek:[1,2,3,4,5],display:"inverse-background",classNames:"fc-non-business",groupId:"_businessHours"};function pt(e){let t=Math.floor(oe(e.start,e.end))||1,n=ce(e.start);return{start:n,end:re(n,t)}}function gt(e,t=U(0)){let n=null,r=null;if(e.end){r=ce(e.end);let n=e.end.valueOf()-r.valueOf();n&&n>=V(t)&&(r=re(r,1))}return e.start&&(n=ce(e.start),r&&r<=n&&(r=re(n,1))),{start:n,end:r}}function mt(e,t,n,r){return"year"===r?U(n.diffWholeYears(e,t),"year"):"month"===r?U(n.diffWholeMonths(e,t),"month"):se(e,t)}function vt(e,t){let n={left:Math.max(e.left,t.left),right:Math.min(e.right,t.right),top:Math.max(e.top,t.top),bottom:Math.min(e.bottom,t.bottom)};return n.left<n.right&&n.top<n.bottom&&n}let yt;function Et(){return null==yt&&(yt=function(){if("undefined"==typeof document)return!0;let e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.innerHTML="<table><tr><td><div></div></td></tr></table>",e.querySelector("table").style.height="100px",e.querySelector("div").style.height="100%",document.body.appendChild(e);let t=e.querySelector("div").offsetHeight>0;return document.body.removeChild(e),t}()),yt}const bt={defs:{},instances:{}};function _t(e,t,n){let r=[];e&&r.push(e),t&&r.push(t);let i={"":it(r)};return n&&Object.assign(i,n),i}function St(e,t){let n,r,i=[],{start:o}=t;for(e.sort(At),n=0;n<e.length;n+=1)r=e[n],r.start>o&&i.push({start:o,end:r.start}),r.end>o&&(o=r.end);return o<t.end&&i.push({start:o,end:t.end}),i}function At(e,t){return e.start.valueOf()-t.start.valueOf()}function Dt(e,t){let{start:n,end:r}=e,i=null;return null!==t.start&&(n=null===n?t.start:new Date(Math.max(n.valueOf(),t.start.valueOf()))),null!=t.end&&(r=null===r?t.end:new Date(Math.min(r.valueOf(),t.end.valueOf()))),(null===n||null===r||n<r)&&(i={start:n,end:r}),i}function Ct(e,t){return(null===e.start?null:e.start.valueOf())===(null===t.start?null:t.start.valueOf())&&(null===e.end?null:e.end.valueOf())===(null===t.end?null:t.end.valueOf())}function wt(e,t){return(null===e.end||null===t.start||e.end>t.start)&&(null===e.start||null===t.end||e.start<t.end)}function Rt(e,t){return(null===e.start||null!==t.start&&t.start>=e.start)&&(null===e.end||null!==t.end&&t.end<=e.end)}function Tt(e,t){return(null===e.start||t>=e.start)&&(null===e.end||t<e.end)}function Mt(e,t,n,r){return{dow:e.getUTCDay(),isDisabled:Boolean(r&&!Tt(r.activeRange,e)),isOther:Boolean(r&&!Tt(r.currentRange,e)),isToday:Boolean(t&&Tt(t,e)),isPast:Boolean(n?e<n:!!t&&e<t.start),isFuture:Boolean(n?e>n:!!t&&e>=t.end)}}function Ot(e,t){let n=["fc-day",`fc-day-${ne[e.dow]}`];return e.isDisabled?n.push("fc-day-disabled"):(e.isToday&&(n.push("fc-day-today"),n.push(t.getClass("today"))),e.isPast&&n.push("fc-day-past"),e.isFuture&&n.push("fc-day-future"),e.isOther&&n.push("fc-day-other")),n}const xt=He({year:"numeric",month:"long",day:"numeric"}),kt=He({week:"long"});function It(e,t,n="day",r=!0){const{dateEnv:i,options:o,calendarApi:s}=e;let a=i.format(t,"week"===n?kt:xt);if(o.navLinks){let e=i.toDate(t);const l=e=>{let r="day"===n?o.navLinkDayClick:"week"===n?o.navLinkWeekClick:null;"function"==typeof r?r.call(s,i.toDate(t),e):("string"==typeof r&&(n=r),s.zoomTo(t,n))};return Object.assign({title:P(o.navLinkHint,[a,e],a),"data-navlink":""},r?w(l):{onClick:l})}return{"aria-label":a}}let Nt,Pt=null;function Ht(){return null===Pt&&(Pt=function(){let e=document.createElement("div");y(e,{position:"absolute",top:-1e3,left:0,border:0,padding:0,overflow:"scroll",direction:"rtl"}),e.innerHTML="<div></div>",document.body.appendChild(e);let t=e.firstChild.getBoundingClientRect().left>e.getBoundingClientRect().left;return f(e),t}()),Pt}function Bt(){return Nt||(Nt=function(){let e=document.createElement("div");e.style.overflow="scroll",e.style.position="absolute",e.style.top="-9999px",e.style.left="-9999px",document.body.appendChild(e);let t=jt(e);return document.body.removeChild(e),t}()),Nt}function jt(e){return{x:e.offsetHeight-e.clientHeight,y:e.offsetWidth-e.clientWidth}}function Lt(e,t=!1){let n=window.getComputedStyle(e),r=parseInt(n.borderLeftWidth,10)||0,i=parseInt(n.borderRightWidth,10)||0,o=parseInt(n.borderTopWidth,10)||0,s=parseInt(n.borderBottomWidth,10)||0,a=jt(e),l=a.y-r-i,c={borderLeft:r,borderRight:i,borderTop:o,borderBottom:s,scrollbarBottom:a.x-o-s,scrollbarLeft:0,scrollbarRight:0};return Ht()&&"rtl"===n.direction?c.scrollbarLeft=l:c.scrollbarRight=l,t&&(c.paddingLeft=parseInt(n.paddingLeft,10)||0,c.paddingRight=parseInt(n.paddingRight,10)||0,c.paddingTop=parseInt(n.paddingTop,10)||0,c.paddingBottom=parseInt(n.paddingBottom,10)||0),c}function Ut(e){let t=e.getBoundingClientRect();return{left:t.left+window.pageXOffset,top:t.top+window.pageYOffset,right:t.right+window.pageXOffset,bottom:t.bottom+window.pageYOffset}}function Ft(e){let t=[];for(;e instanceof HTMLElement;){let n=window.getComputedStyle(e);if("fixed"===n.position)break;/(auto|scroll)/.test(n.overflow+n.overflowY+n.overflowX)&&t.push(e),e=e.parentNode}return t}class zt{constructor(){this.handlers={},this.thisContext=null}setThisContext(e){this.thisContext=e}setOptions(e){this.options=e}on(e,t){!function(e,t,n){(e[t]||(e[t]=[])).push(n)}(this.handlers,e,t)}off(e,t){!function(e,t,n){n?e[t]&&(e[t]=e[t].filter((e=>e!==n))):delete e[t]}(this.handlers,e,t)}trigger(e,...t){let n=this.handlers[e]||[],r=this.options&&this.options[e],i=[].concat(r||[],n);for(let e of i)e.apply(this.thisContext,t)}hasHandlers(e){return Boolean(this.handlers[e]&&this.handlers[e].length||this.options&&this.options[e])}}function Vt(e,t){const n=e.length;if(n!==t.length)return!1;for(let r=0;r<n;r++)if(Math.round(e[r])!==Math.round(t[r]))return!1;return!0}class Wt{getMaxScrollTop(){return this.getScrollHeight()-this.getClientHeight()}getMaxScrollLeft(){return this.getScrollWidth()-this.getClientWidth()}canScrollVertically(){return this.getMaxScrollTop()>0}canScrollHorizontally(){return this.getMaxScrollLeft()>0}canScrollUp(){return this.getScrollTop()>0}canScrollDown(){return this.getScrollTop()<this.getMaxScrollTop()}canScrollLeft(){return this.getScrollLeft()>0}canScrollRight(){return this.getScrollLeft()<this.getMaxScrollLeft()}}class Gt{constructor(e){this.iconOverrideOption&&this.setIconOverride(e[this.iconOverrideOption])}setIconOverride(e){let t,n;if("object"==typeof e&&e){for(n in t=Object.assign({},this.iconClasses),e)t[n]=this.applyIconOverridePrefix(e[n]);this.iconClasses=t}else!1===e&&(this.iconClasses={})}applyIconOverridePrefix(e){let t=this.iconOverridePrefix;return t&&0!==e.indexOf(t)&&(e=t+e),e}getClass(e){return this.classes[e]||""}getIconClass(e,t){let n;return n=t&&this.rtlIconClasses&&this.rtlIconClasses[e]||this.iconClasses[e],n?`${this.baseIconClass} ${n}`:""}getCustomButtonIconClass(e){let t;return this.iconOverrideCustomButtonOption&&(t=e[this.iconOverrideCustomButtonOption],t)?`${this.baseIconClass} ${this.applyIconOverridePrefix(t)}`:""}}Gt.prototype.classes={},Gt.prototype.iconClasses={},Gt.prototype.baseIconClass="",Gt.prototype.iconOverridePrefix="";class qt extends s.Component{render(){return s.createElement("div",{})}componentDidMount(){this.setState({})}}function Yt(e){let t=s.createContext(e),n=t.Provider;return t.Provider=function(){let e=!this.getChildContext,t=n.apply(this,arguments);if(e){let e=[];this.shouldComponentUpdate=t=>{this.props.value!==t.value&&e.forEach((e=>{e.context=t.value,e.forceUpdate()}))},this.sub=t=>{e.push(t);let n=t.componentWillUnmount;t.componentWillUnmount=()=>{e.splice(e.indexOf(t),1),n&&n.call(t)}}}return t},t}class Qt{constructor(e,t,n,r){this.execFunc=e,this.emitter=t,this.scrollTime=n,this.scrollTimeReset=r,this.handleScrollRequest=e=>{this.queuedRequest=Object.assign({},this.queuedRequest||{},e),this.drain()},t.on("_scrollRequest",this.handleScrollRequest),this.fireInitialScroll()}detach(){this.emitter.off("_scrollRequest",this.handleScrollRequest)}update(e){e&&this.scrollTimeReset?this.fireInitialScroll():this.drain()}fireInitialScroll(){this.handleScrollRequest({time:this.scrollTime})}drain(){this.queuedRequest&&this.execFunc(this.queuedRequest)&&(this.queuedRequest=null)}}const Zt=Yt({});class Xt extends r.Component{shouldComponentUpdate(e,t){return this.debug&&console.log(J(e,this.props),J(t,this.state)),!K(this.props,e,this.propEquality)||!K(this.state,t,this.stateEquality)}safeSetState(e){K(this.state,Object.assign(Object.assign({},this.state),e),this.stateEquality)||this.setState(e)}}Xt.addPropsEquality=function(e){let t=Object.create(this.prototype.propEquality);Object.assign(t,e),this.prototype.propEquality=t},Xt.addStateEquality=function(e){let t=Object.create(this.prototype.stateEquality);Object.assign(t,e),this.prototype.stateEquality=t},Xt.contextType=Zt,Xt.prototype.propEquality={},Xt.prototype.stateEquality={};class $t extends Xt{}function Jt(e,t){"function"==typeof e?e(t):e&&(e.current=t)}$t.contextType=Zt;class Kt extends $t{constructor(){super(...arguments),this.uid=M()}prepareHits(){}queryHit(e,t,n,r){return null}isValidSegDownEl(e){return!this.props.eventDrag&&!this.props.eventResize&&!p(e,".fc-event-mirror")}isValidDateDownEl(e){return!(p(e,".fc-event:not(.fc-bg-event)")||p(e,".fc-more-link")||p(e,"a[data-navlink]")||p(e,".fc-popover"))}}function en(e,t){return"function"==typeof e&&(e=e()),null==e?t.createNowMarker():t.createMarker(e)}function tn(e,t,n){n.emitter.trigger("select",Object.assign(Object.assign({},nn(e,n)),{jsEvent:t?t.origEvent:null,view:n.viewApi||n.calendarApi.view}))}function nn(e,t){let n={};for(let r of t.pluginHooks.dateSpanTransforms)Object.assign(n,r(e,t));var r,i;return Object.assign(n,(r=e,i=t.dateEnv,Object.assign(Object.assign({},Dn(r.range,i,r.allDay)),{allDay:r.allDay}))),n}function rn(e,t,n){let{dateEnv:r,options:i}=n,o=t;return e?(o=ce(o),o=r.add(o,i.defaultAllDayEventDuration)):o=r.add(o,i.defaultTimedEventDuration),o}function on(e,t,n,r){let i=pn(e.defs,t),o={defs:{},instances:{}};for(let t in e.defs){let s=e.defs[t];o.defs[t]=sn(s,i[t],n,r)}for(let t in e.instances){let s=e.instances[t],a=o.defs[s.defId];o.instances[t]=an(s,a,i[s.defId],n,r)}return o}function sn(e,t,n,r){let i=n.standardProps||{};null==i.hasEnd&&t.durationEditable&&(n.startDelta||n.endDelta)&&(i.hasEnd=!0);let o=Object.assign(Object.assign(Object.assign({},e),i),{ui:Object.assign(Object.assign({},e.ui),i.ui)});n.extendedProps&&(o.extendedProps=Object.assign(Object.assign({},o.extendedProps),n.extendedProps));for(let e of r.pluginHooks.eventDefMutationAppliers)e(o,n,r);return!o.hasEnd&&r.options.forceEventDuration&&(o.hasEnd=!0),o}function an(e,t,n,r,i){let{dateEnv:o}=i,s=r.standardProps&&!0===r.standardProps.allDay,a=r.standardProps&&!1===r.standardProps.hasEnd,l=Object.assign({},e);return s&&(l.range=pt(l.range)),r.datesDelta&&n.startEditable&&(l.range={start:o.add(l.range.start,r.datesDelta),end:o.add(l.range.end,r.datesDelta)}),r.startDelta&&n.durationEditable&&(l.range={start:o.add(l.range.start,r.startDelta),end:l.range.end}),r.endDelta&&n.durationEditable&&(l.range={start:l.range.start,end:o.add(l.range.end,r.endDelta)}),a&&(l.range={start:l.range.start,end:rn(t.allDay,l.range.start,i)}),t.allDay&&(l.range={start:ce(l.range.start),end:ce(l.range.end)}),l.range.end<l.range.start&&(l.range.end=rn(t.allDay,l.range.start,i)),l}class ln{constructor(e,t){this.context=e,this.internalEventSource=t}remove(){this.context.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:this.internalEventSource.sourceId})}refetch(){this.context.dispatch({type:"FETCH_EVENT_SOURCES",sourceIds:[this.internalEventSource.sourceId],isRefetch:!0})}get id(){return this.internalEventSource.publicId}get url(){return this.internalEventSource.meta.url}get format(){return this.internalEventSource.meta.format}}class cn{constructor(e,t,n){this._context=e,this._def=t,this._instance=n||null}setProp(e,t){if(e in at)console.warn("Could not set date-related prop 'name'. Use one of the date-related methods instead.");else if("id"===e)t=st[e](t),this.mutate({standardProps:{publicId:t}});else if(e in st)t=st[e](t),this.mutate({standardProps:{[e]:t}});else if(e in tt){let n=tt[e](t);n="color"===e?{backgroundColor:t,borderColor:t}:"editable"===e?{startEditable:t,durationEditable:t}:{[e]:t},this.mutate({standardProps:{ui:n}})}else console.warn(`Could not set prop '${e}'. Use setExtendedProp instead.`)}setExtendedProp(e,t){this.mutate({extendedProps:{[e]:t}})}setStart(e,t={}){let{dateEnv:n}=this._context,r=n.createMarker(e);if(r&&this._instance){let e=mt(this._instance.range.start,r,n,t.granularity);t.maintainDuration?this.mutate({datesDelta:e}):this.mutate({startDelta:e})}}setEnd(e,t={}){let n,{dateEnv:r}=this._context;if((null==e||(n=r.createMarker(e),n))&&this._instance)if(n){let e=mt(this._instance.range.end,n,r,t.granularity);this.mutate({endDelta:e})}else this.mutate({standardProps:{hasEnd:!1}})}setDates(e,t,n={}){let r,{dateEnv:i}=this._context,o={allDay:n.allDay},s=i.createMarker(e);var a,l;if(s&&(null==t||(r=i.createMarker(t),r))&&this._instance){let e=this._instance.range;!0===n.allDay&&(e=pt(e));let t=mt(e.start,s,i,n.granularity);if(r){let s=mt(e.end,r,i,n.granularity);l=s,(a=t).years===l.years&&a.months===l.months&&a.days===l.days&&a.milliseconds===l.milliseconds?this.mutate({datesDelta:t,standardProps:o}):this.mutate({startDelta:t,endDelta:s,standardProps:o})}else o.hasEnd=!1,this.mutate({datesDelta:t,standardProps:o})}}moveStart(e){let t=U(e);t&&this.mutate({startDelta:t})}moveEnd(e){let t=U(e);t&&this.mutate({endDelta:t})}moveDates(e){let t=U(e);t&&this.mutate({datesDelta:t})}setAllDay(e,t={}){let n={allDay:e},{maintainDuration:r}=t;null==r&&(r=this._context.options.allDayMaintainDuration),this._def.allDay!==e&&(n.hasEnd=r),this.mutate({standardProps:n})}formatRange(e){let{dateEnv:t}=this._context,n=this._instance,r=He(e);return this._def.hasEnd?t.formatRange(n.range.start,n.range.end,r,{forcedStartTzo:n.forcedStartTzo,forcedEndTzo:n.forcedEndTzo}):t.format(n.range.start,r,{forcedTzo:n.forcedStartTzo})}mutate(e){let t=this._instance;if(t){let n=this._def,r=this._context,{eventStore:i}=r.getCurrentData(),o=$e(i,t.instanceId);o=on(o,{"":{display:"",startEditable:!0,durationEditable:!0,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]}},e,r);let s=new cn(r,n,t);this._def=o.defs[n.defId],this._instance=o.instances[t.instanceId],r.dispatch({type:"MERGE_EVENTS",eventStore:o}),r.emitter.trigger("eventChange",{oldEvent:s,event:this,relatedEvents:un(o,r,t),revert(){r.dispatch({type:"RESET_EVENTS",eventStore:i})}})}}remove(){let e=this._context,t=dn(this);e.dispatch({type:"REMOVE_EVENTS",eventStore:t}),e.emitter.trigger("eventRemove",{event:this,relatedEvents:[],revert(){e.dispatch({type:"MERGE_EVENTS",eventStore:t})}})}get source(){let{sourceId:e}=this._def;return e?new ln(this._context,this._context.getCurrentData().eventSources[e]):null}get start(){return this._instance?this._context.dateEnv.toDate(this._instance.range.start):null}get end(){return this._instance&&this._def.hasEnd?this._context.dateEnv.toDate(this._instance.range.end):null}get startStr(){let e=this._instance;return e?this._context.dateEnv.formatIso(e.range.start,{omitTime:this._def.allDay,forcedTzo:e.forcedStartTzo}):""}get endStr(){let e=this._instance;return e&&this._def.hasEnd?this._context.dateEnv.formatIso(e.range.end,{omitTime:this._def.allDay,forcedTzo:e.forcedEndTzo}):""}get id(){return this._def.publicId}get groupId(){return this._def.groupId}get allDay(){return this._def.allDay}get title(){return this._def.title}get url(){return this._def.url}get display(){return this._def.ui.display||"auto"}get startEditable(){return this._def.ui.startEditable}get durationEditable(){return this._def.ui.durationEditable}get constraint(){return this._def.ui.constraints[0]||null}get overlap(){return this._def.ui.overlap}get allow(){return this._def.ui.allows[0]||null}get backgroundColor(){return this._def.ui.backgroundColor}get borderColor(){return this._def.ui.borderColor}get textColor(){return this._def.ui.textColor}get classNames(){return this._def.ui.classNames}get extendedProps(){return this._def.extendedProps}toPlainObject(e={}){let t=this._def,{ui:n}=t,{startStr:r,endStr:i}=this,o={allDay:t.allDay};return t.title&&(o.title=t.title),r&&(o.start=r),i&&(o.end=i),t.publicId&&(o.id=t.publicId),t.groupId&&(o.groupId=t.groupId),t.url&&(o.url=t.url),n.display&&"auto"!==n.display&&(o.display=n.display),e.collapseColor&&n.backgroundColor&&n.backgroundColor===n.borderColor?o.color=n.backgroundColor:(n.backgroundColor&&(o.backgroundColor=n.backgroundColor),n.borderColor&&(o.borderColor=n.borderColor)),n.textColor&&(o.textColor=n.textColor),n.classNames.length&&(o.classNames=n.classNames),Object.keys(t.extendedProps).length&&(e.collapseExtendedProps?Object.assign(o,t.extendedProps):o.extendedProps=t.extendedProps),o}toJSON(){return this.toPlainObject()}}function dn(e){let t=e._def,n=e._instance;return{defs:{[t.defId]:t},instances:n?{[n.instanceId]:n}:{}}}function un(e,t,n){let{defs:r,instances:i}=e,o=[],s=n?n.instanceId:"";for(let e in i){let n=i[e],a=r[n.defId];n.instanceId!==s&&o.push(new cn(t,a,n))}return o}function hn(e,t,n,r){let i={},o={},s={},a=[],l=[],c=pn(e.defs,t);for(let t in e.defs){let n=e.defs[t];"inverse-background"===c[n.defId].display&&(n.groupId?(i[n.groupId]=[],s[n.groupId]||(s[n.groupId]=n)):o[t]=[])}for(let t in e.instances){let s=e.instances[t],d=e.defs[s.defId],u=c[d.defId],h=s.range,f=!d.allDay&&r?gt(h,r):h,p=Dt(f,n);p&&("inverse-background"===u.display?d.groupId?i[d.groupId].push(p):o[s.defId].push(p):"none"!==u.display&&("background"===u.display?a:l).push({def:d,ui:u,instance:s,range:p,isStart:f.start&&f.start.valueOf()===p.start.valueOf(),isEnd:f.end&&f.end.valueOf()===p.end.valueOf()}))}for(let e in i){let t=St(i[e],n);for(let n of t){let t=s[e],r=c[t.defId];a.push({def:t,ui:r,instance:null,range:n,isStart:!1,isEnd:!1})}}for(let t in o){let r=St(o[t],n);for(let n of r)a.push({def:e.defs[t],ui:c[t],instance:null,range:n,isStart:!1,isEnd:!1})}return{bg:a,fg:l}}function fn(e,t){e.fcSeg=t}function pn(e,t){return Q(e,(e=>gn(e,t)))}function gn(e,t){let n=[];return t[""]&&n.push(t[""]),t[e.defId]&&n.push(t[e.defId]),n.push(e.ui),it(n)}function mn(e){let{eventRange:t}=e,n=t.def,r=t.instance?t.instance.range:t.range,i=r.start?r.start.valueOf():0,o=r.end?r.end.valueOf():0;return Object.assign(Object.assign(Object.assign({},n.extendedProps),n),{id:n.publicId,start:i,end:o,duration:o-i,allDay:Number(n.allDay),_seg:e})}function vn(e,t){let{pluginHooks:n}=t,r=n.isDraggableTransformers,{def:i,ui:o}=e.eventRange,s=o.startEditable;for(let e of r)s=e(s,i,o,t);return s}function yn(e,t){return e.isStart&&e.eventRange.ui.durationEditable&&t.options.eventResizableFromStart}function En(e,t){return e.isEnd&&e.eventRange.ui.durationEditable}function bn(e,t,n,r,i,o,s){let{dateEnv:a,options:l}=n,{displayEventTime:c,displayEventEnd:d}=l,u=e.eventRange.def,h=e.eventRange.instance;null==c&&(c=!1!==r),null==d&&(d=!1!==i);let f=h.range.start,p=h.range.end,g=o||e.start||e.eventRange.range.start,m=s||e.end||e.eventRange.range.end,v=ce(f).valueOf()===ce(g).valueOf(),y=ce(ie(p,-1)).valueOf()===ce(ie(m,-1)).valueOf();return c&&!u.allDay&&(v||y)?(g=v?f:g,m=y?p:m,d&&u.hasEnd?a.formatRange(g,m,t,{forcedStartTzo:o?null:h.forcedStartTzo,forcedEndTzo:s?null:h.forcedEndTzo}):a.format(g,t,{forcedTzo:o?null:h.forcedStartTzo})):""}function _n(e){let t=["fc-event"];return e.isMirror&&t.push("fc-event-mirror"),e.isDraggable&&t.push("fc-event-draggable"),(e.isStartResizable||e.isEndResizable)&&t.push("fc-event-resizable"),e.isDragging&&t.push("fc-event-dragging"),e.isResizing&&t.push("fc-event-resizing"),e.isSelected&&t.push("fc-event-selected"),e.isStart&&t.push("fc-event-start"),e.isEnd&&t.push("fc-event-end"),e.isPast&&t.push("fc-event-past"),e.isToday&&t.push("fc-event-today"),e.isFuture&&t.push("fc-event-future"),t}function Sn(e,t){let{def:n,instance:r}=e.eventRange,{url:i}=n;if(i)return{href:i};let{emitter:o,options:s}=t,{eventInteractive:a}=s;return null==a&&(a=n.interactive,null==a&&(a=Boolean(o.hasHandlers("eventClick")))),a?R((e=>{o.trigger("eventClick",{el:e.target,event:new cn(t,n,r),jsEvent:e,view:t.viewApi})})):{}}const An={start:Ge,end:Ge,allDay:Boolean};function Dn(e,t,n){return{start:t.toDate(e.start),end:t.toDate(e.end),startStr:t.formatIso(e.start,{omitTime:n}),endStr:t.formatIso(e.end,{omitTime:n})}}let Cn={};var wn;wn=class{getMarkerYear(e){return e.getUTCFullYear()}getMarkerMonth(e){return e.getUTCMonth()}getMarkerDay(e){return e.getUTCDate()}arrayToMarker(e){return ge(e)}markerToArray(e){return pe(e)}},Cn.gregory=wn;const Rn=/^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;function Tn(e){let t=Rn.exec(e);if(t){let e=new Date(Date.UTC(Number(t[1]),t[3]?Number(t[3])-1:0,Number(t[5]||1),Number(t[7]||0),Number(t[8]||0),Number(t[10]||0),t[12]?1e3*Number(`0.${t[12]}`):0));if(me(e)){let n=null;return t[13]&&(n=("-"===t[15]?-1:1)*(60*Number(t[16]||0)+Number(t[18]||0))),{marker:e,isTimeUnspecified:!t[6],timeZoneOffset:n}}}return null}function Mn(e){return e.span.end}function On(e){return e.index+":"+e.span.start}function xn(e,t){let n=Math.max(e.start,t.start),r=Math.min(e.end,t.end);return n<r?{start:n,end:r}:null}function kn(e,t,n){e.splice(t,0,n)}function In(e,t,n){let r=0,i=e.length;if(!i||t<n(e[r]))return[0,0];if(t>n(e[i-1]))return[i,0];for(;r<i;){let o=Math.floor(r+(i-r)/2),s=n(e[o]);if(t<s)i=o;else{if(!(t>s))return[o,1];r=o+1}}return[r,0]}const Nn={startTime:U,duration:U,create:Boolean,sourceId:String};function Pn(e,t){return He(!e||t>10?{weekday:"short"}:t>1?{weekday:"short",month:"numeric",day:"numeric",omitCommas:!0}:{weekday:"long"})}const Hn="fc-col-header-cell";function Bn(e){return e.text}class jn extends $t{constructor(){super(...arguments),this.id=M(),this.queuedDomNodes=[],this.currentDomNodes=[],this.handleEl=e=>{this.props.elRef&&Jt(this.props.elRef,e)}}render(){const{props:e,context:t}=this,{options:n}=t,{customGenerator:i,defaultGenerator:o,renderProps:s}=e,a=Un(e);let l,c,d=!1,u=[];if(null!=i){const e="function"==typeof i?i(s,r.createElement):i;if(!0===e)d=!0;else{const t=e&&"object"==typeof e;t&&"html"in e?a.dangerouslySetInnerHTML={__html:e.html}:t&&"domNodes"in e?u=Array.prototype.slice.call(e.domNodes):t||"function"==typeof e?c=e:l=e}}else d=!Ln(e.generatorName,n);return d&&o&&(l=o(s)),this.queuedDomNodes=u,this.currentGeneratorMeta=c,r.createElement(e.elTag,a,l)}componentDidMount(){this.applyQueueudDomNodes(),this.triggerCustomRendering(!0)}componentDidUpdate(){this.applyQueueudDomNodes(),this.triggerCustomRendering(!0)}componentWillUnmount(){this.triggerCustomRendering(!1)}triggerCustomRendering(e){var t;const{props:n,context:r}=this,{handleCustomRendering:i,customRenderingMetaMap:o}=r.options;if(i){const r=null!==(t=this.currentGeneratorMeta)&&void 0!==t?t:null==o?void 0:o[n.generatorName];r&&i(Object.assign(Object.assign({id:this.id,isActive:e,containerEl:this.base,reportNewContainerEl:this.handleEl,generatorMeta:r},n),{elClasses:(n.elClasses||[]).filter(Fn)}))}}applyQueueudDomNodes(){const{queuedDomNodes:e,currentDomNodes:t}=this,n=this.base;if(!te(e,t)){t.forEach(f);for(let t of e)n.appendChild(t);this.currentDomNodes=e}}}function Ln(e,t){var n;return Boolean(t.handleCustomRendering&&e&&(null===(n=t.customRenderingMetaMap)||void 0===n?void 0:n[e]))}function Un(e,t){const n=Object.assign(Object.assign({},e.elAttrs),{ref:e.elRef});return(e.elClasses||t)&&(n.className=(e.elClasses||[]).concat(t||[]).concat(n.className||[]).filter(Boolean).join(" ")),e.elStyle&&(n.style=e.elStyle),n}function Fn(e){return Boolean(e)}jn.addPropsEquality({elClasses:te,elStyle:X,elAttrs:function(e,t){const n=J(e,t);for(let e of n)if(!$.test(e))return!1;return!0},renderProps:X});const zn=Yt(0);class Vn extends r.Component{constructor(){super(...arguments),this.InnerContent=Wn.bind(void 0,this),this.handleRootEl=e=>{this.rootEl=e,this.props.elRef&&Jt(this.props.elRef,e)}}render(){const{props:e}=this,t=function(e,t){const n="function"==typeof e?e(t):e||[];return"string"==typeof n?[n]:n}(e.classNameGenerator,e.renderProps);if(e.children){const n=Un(e,t),i=e.children(this.InnerContent,e.renderProps,n);return e.elTag?r.createElement(e.elTag,n,i):i}return r.createElement(jn,Object.assign(Object.assign({},e),{elRef:this.handleRootEl,elTag:e.elTag||"div",elClasses:(e.elClasses||[]).concat(t),renderId:this.context}))}componentDidMount(){var e,t;null===(t=(e=this.props).didMount)||void 0===t||t.call(e,Object.assign(Object.assign({},this.props.renderProps),{el:this.rootEl||this.base}))}componentWillUnmount(){var e,t;null===(t=(e=this.props).willUnmount)||void 0===t||t.call(e,Object.assign(Object.assign({},this.props.renderProps),{el:this.rootEl||this.base}))}}function Wn(e,t){const n=e.props;return r.createElement(jn,Object.assign({renderProps:n.renderProps,generatorName:n.generatorName,customGenerator:n.customGenerator,defaultGenerator:n.defaultGenerator,renderId:e.context},t))}Vn.contextType=zn;class Gn extends $t{render(){let{dateEnv:e,options:t,theme:n,viewApi:i}=this.context,{props:o}=this,{date:s,dateProfile:a}=o,l=Mt(s,o.todayRange,null,a),c=[Hn].concat(Ot(l,n)),d=e.format(s,o.dayHeaderFormat),u=!l.isDisabled&&o.colCnt>1?It(this.context,s):{},h=Object.assign(Object.assign(Object.assign({date:e.toDate(s),view:i},o.extraRenderProps),{text:d}),l);return r.createElement(Vn,{elTag:"th",elClasses:c,elAttrs:Object.assign({role:"columnheader",colSpan:o.colSpan,"data-date":l.isDisabled?void 0:Ee(s)},o.extraDataAttrs),renderProps:h,generatorName:"dayHeaderContent",customGenerator:t.dayHeaderContent,defaultGenerator:Bn,classNameGenerator:t.dayHeaderClassNames,didMount:t.dayHeaderDidMount,willUnmount:t.dayHeaderWillUnmount},(e=>r.createElement("div",{className:"fc-scrollgrid-sync-inner"},!l.isDisabled&&r.createElement(e,{elTag:"a",elAttrs:u,elClasses:["fc-col-header-cell-cushion",o.isSticky&&"fc-sticky"]}))))}}const qn=He({weekday:"long"});class Yn extends $t{render(){let{props:e}=this,{dateEnv:t,theme:n,viewApi:i,options:o}=this.context,s=re(new Date(2592e5),e.dow),a={dow:e.dow,isDisabled:!1,isFuture:!1,isPast:!1,isToday:!1,isOther:!1},l=t.format(s,e.dayHeaderFormat),c=Object.assign(Object.assign(Object.assign(Object.assign({date:s},a),{view:i}),e.extraRenderProps),{text:l});return r.createElement(Vn,{elTag:"th",elClasses:[Hn,...Ot(a,n),...e.extraClassNames||[]],elAttrs:Object.assign({role:"columnheader",colSpan:e.colSpan},e.extraDataAttrs),renderProps:c,generatorName:"dayHeaderContent",customGenerator:o.dayHeaderContent,defaultGenerator:Bn,classNameGenerator:o.dayHeaderClassNames,didMount:o.dayHeaderDidMount,willUnmount:o.dayHeaderWillUnmount},(n=>r.createElement("div",{className:"fc-scrollgrid-sync-inner"},r.createElement(n,{elTag:"a",elClasses:["fc-col-header-cell-cushion",e.isSticky&&"fc-sticky"],elAttrs:{"aria-label":t.format(s,qn)}}))))}}class Qn extends r.Component{constructor(e,t){super(e,t),this.initialNowDate=en(t.options.now,t.dateEnv),this.initialNowQueriedMs=(new Date).valueOf(),this.state=this.computeTiming().currentState}render(){let{props:e,state:t}=this;return e.children(t.nowDate,t.todayRange)}componentDidMount(){this.setTimeout()}componentDidUpdate(e){e.unit!==this.props.unit&&(this.clearTimeout(),this.setTimeout())}componentWillUnmount(){this.clearTimeout()}computeTiming(){let{props:e,context:t}=this,n=ie(this.initialNowDate,(new Date).valueOf()-this.initialNowQueriedMs),r=t.dateEnv.startOf(n,e.unit),i=t.dateEnv.add(r,U(1,e.unit)),o=i.valueOf()-n.valueOf();return o=Math.min(864e5,o),{currentState:{nowDate:r,todayRange:Zn(r)},nextState:{nowDate:i,todayRange:Zn(i)},waitMs:o}}setTimeout(){let{nextState:e,waitMs:t}=this.computeTiming();this.timeoutId=setTimeout((()=>{this.setState(e,(()=>{this.setTimeout()}))}),t)}clearTimeout(){this.timeoutId&&clearTimeout(this.timeoutId)}}function Zn(e){let t=ce(e);return{start:t,end:re(t,1)}}function Xn(e,t,n){return e||Pn(t,n)}function $n(e,t){let n=e.activeRange;return t?n:{start:ie(n.start,e.slotMinTime.milliseconds),end:ie(n.end,e.slotMaxTime.milliseconds-864e5)}}function Jn(e,t,n){let r=n.options.eventDataTransform,i=t?t.eventDataTransform:null;return i&&(e=Kn(e,i)),r&&(e=Kn(e,r)),e}function Kn(e,t){let n;if(t){n=[];for(let r of e){let e=t(r);e?n.push(e):null==e&&n.push(r)}}else n=e;return n}function er(e,t){return Ke(e,(e=>e.sourceId!==t))}function tr(e,t){let n=t.getCurrentData(),r=Object.assign({businessHours:n.businessHours,dateSelection:"",eventStore:n.eventStore,eventUiBases:n.eventUiBases,eventSelection:"",eventDrag:null,eventResize:null},e);return(t.pluginHooks.isPropsValid||nr)(r,t)}function nr(e,t,n={},r){return!(e.eventDrag&&!function(e,t,n,r){let i=t.getCurrentData(),o=e.eventDrag,s=o.mutatedEvents,a=s.defs,l=s.instances,c=pn(a,o.isEvent?e.eventUiBases:{"":i.selectionConfig});r&&(c=Q(c,r));let d=(p=e.eventStore,g=o.affectedEvents.instances,{defs:p.defs,instances:Y(p.instances,(e=>!g[e.instanceId]))}),u=d.defs,h=d.instances,f=pn(u,e.eventUiBases);var p,g;for(let r in l){let s=l[r],p=s.range,g=c[s.defId],m=a[s.defId];if(!rr(g.constraints,p,d,e.businessHours,t))return!1;let{eventOverlap:v}=t.options,y="function"==typeof v?v:null;for(let e in h){let n=h[e];if(wt(p,n.range)){if(!1===f[n.defId].overlap&&o.isEvent)return!1;if(!1===g.overlap)return!1;if(y&&!y(new cn(t,u[n.defId],n),new cn(t,m,s)))return!1}}let E=i.eventStore;for(let e of g.allows){let i,o=Object.assign(Object.assign({},n),{range:s.range,allDay:m.allDay}),a=E.defs[m.defId],l=E.instances[r];if(i=a?new cn(t,a,l):new cn(t,m),!e(nn(o,t),i))return!1}}return!0}(e,t,n,r)||e.dateSelection&&!function(e,t,n,r){let i=e.eventStore,o=i.defs,s=i.instances,a=e.dateSelection,l=a.range,{selectionConfig:c}=t.getCurrentData();if(r&&(c=r(c)),!rr(c.constraints,l,i,e.businessHours,t))return!1;let{selectOverlap:d}=t.options,u="function"==typeof d?d:null;for(let e in s){let n=s[e];if(wt(l,n.range)){if(!1===c.overlap)return!1;if(u&&!u(new cn(t,o[n.defId],n),null))return!1}}for(let e of c.allows)if(!e(nn(Object.assign(Object.assign({},n),a),t),null))return!1;return!0}(e,t,n,r))}function rr(e,t,n,r,i){for(let o of e)if(!sr(ir(o,t,n,r,i),t))return!1;return!0}function ir(e,t,n,r,i){return"businessHours"===e?or(Ye(r,t,i)):"string"==typeof e?or(Ke(n,(t=>t.groupId===e))):"object"==typeof e&&e?or(Ye(e,t,i)):[]}function or(e){let{instances:t}=e,n=[];for(let e in t)n.push(t[e].range);return n}function sr(e,t){for(let n of e)if(Rt(n,t))return!0;return!1}Qn.contextType=Zt;class ar extends Error{constructor(e,t){super(e),this.response=t}}const lr=/^(visible|hidden)$/;class cr extends $t{constructor(){super(...arguments),this.handleEl=e=>{this.el=e,Jt(this.props.elRef,e)}}render(){let{props:e}=this,{liquid:t,liquidIsAbsolute:n}=e,i=t&&n,o=["fc-scroller"];return t&&(n?o.push("fc-scroller-liquid-absolute"):o.push("fc-scroller-liquid")),r.createElement("div",{ref:this.handleEl,className:o.join(" "),style:{overflowX:e.overflowX,overflowY:e.overflowY,left:i&&-(e.overcomeLeft||0)||"",right:i&&-(e.overcomeRight||0)||"",bottom:i&&-(e.overcomeBottom||0)||"",marginLeft:!i&&-(e.overcomeLeft||0)||"",marginRight:!i&&-(e.overcomeRight||0)||"",marginBottom:!i&&-(e.overcomeBottom||0)||"",maxHeight:e.maxHeight||""}},e.children)}needsXScrolling(){if(lr.test(this.props.overflowX))return!1;let{el:e}=this,t=this.el.getBoundingClientRect().width-this.getYScrollbarWidth(),{children:n}=e;for(let e=0;e<n.length;e+=1)if(n[e].getBoundingClientRect().width>t)return!0;return!1}needsYScrolling(){if(lr.test(this.props.overflowY))return!1;let{el:e}=this,t=this.el.getBoundingClientRect().height-this.getXScrollbarWidth(),{children:n}=e;for(let e=0;e<n.length;e+=1)if(n[e].getBoundingClientRect().height>t)return!0;return!1}getXScrollbarWidth(){return lr.test(this.props.overflowX)?0:this.el.offsetHeight-this.el.clientHeight}getYScrollbarWidth(){return lr.test(this.props.overflowY)?0:this.el.offsetWidth-this.el.clientWidth}}class dr{constructor(e){this.masterCallback=e,this.currentMap={},this.depths={},this.callbackMap={},this.handleValue=(e,t)=>{let{depths:n,currentMap:r}=this,i=!1,o=!1;null!==e?(i=t in r,r[t]=e,n[t]=(n[t]||0)+1,o=!0):(n[t]-=1,n[t]||(delete r[t],delete this.callbackMap[t],i=!0)),this.masterCallback&&(i&&this.masterCallback(null,String(t)),o&&this.masterCallback(e,String(t)))}}createRef(e){let t=this.callbackMap[e];return t||(t=this.callbackMap[e]=t=>{this.handleValue(t,String(e))}),t}collect(e,t,n){return ee(this.currentMap,e,t,n)}getAll(){return Z(this.currentMap)}}function ur(e){let t=m(e,".fc-scrollgrid-shrink"),n=0;for(let e of t)n=Math.max(n,B(e));return Math.ceil(n)}function hr(e,t){return e.liquid&&t.liquid}function fr(e,t){return null!=t.maxHeight||hr(e,t)}function pr(e,t,n,i){let{expandRows:o}=n;return"function"==typeof t.content?t.content(n):r.createElement("table",{role:"presentation",className:[t.tableClassName,e.syncRowHeights?"fc-scrollgrid-sync-table":""].join(" "),style:{minWidth:n.tableMinWidth,width:n.clientWidth,height:o?n.clientHeight:""}},n.tableColGroupNode,r.createElement(i?"thead":"tbody",{role:"presentation"},"function"==typeof t.rowContent?t.rowContent(n):t.rowContent))}function gr(e,t){return te(e,t,X)}function mr(e,t){let n=[];for(let i of e){let e=i.span||1;for(let o=0;o<e;o+=1)n.push(r.createElement("col",{style:{width:"shrink"===i.width?vr(t):i.width||"",minWidth:i.minWidth||""}}))}return r.createElement("colgroup",{},...n)}function vr(e){return null==e?4:e}function yr(e){for(let t of e)if("shrink"===t.width)return!0;return!1}function Er(e,t){let n=["fc-scrollgrid",t.theme.getClass("table")];return e&&n.push("fc-scrollgrid-liquid"),n}function br(e,t){let n=["fc-scrollgrid-section",`fc-scrollgrid-section-${e.type}`,e.className];return t&&e.liquid&&null==e.maxHeight&&n.push("fc-scrollgrid-section-liquid"),e.isSticky&&n.push("fc-scrollgrid-section-sticky"),n}class _r extends $t{constructor(){super(...arguments),this.processCols=_e((e=>e),gr),this.renderMicroColGroup=_e(mr),this.scrollerRefs=new dr,this.scrollerElRefs=new dr(this._handleScrollerEl.bind(this)),this.state={shrinkWidth:null,forceYScrollbars:!1,scrollerClientWidths:{},scrollerClientHeights:{}},this.handleSizing=()=>{this.safeSetState(Object.assign({shrinkWidth:this.computeShrinkWidth()},this.computeScrollerDims()))}}render(){let{props:e,state:t,context:n}=this,i=e.sections||[],o=this.processCols(e.cols),s=this.renderMicroColGroup(o,t.shrinkWidth),a=Er(e.liquid,n);e.collapsibleWidth&&a.push("fc-scrollgrid-collapsible");let l,c=i.length,d=0,u=[],h=[],f=[];for(;d<c&&"header"===(l=i[d]).type;)u.push(this.renderSection(l,s,!0)),d+=1;for(;d<c&&"body"===(l=i[d]).type;)h.push(this.renderSection(l,s,!1)),d+=1;for(;d<c&&"footer"===(l=i[d]).type;)f.push(this.renderSection(l,s,!0)),d+=1;let p=!Et();const g={role:"rowgroup"};return r.createElement("table",{role:"grid",className:a.join(" "),style:{height:e.height}},Boolean(!p&&u.length)&&r.createElement("thead",g,...u),Boolean(!p&&h.length)&&r.createElement("tbody",g,...h),Boolean(!p&&f.length)&&r.createElement("tfoot",g,...f),p&&r.createElement("tbody",g,...u,...h,...f))}renderSection(e,t,n){return"outerContent"in e?r.createElement(r.Fragment,{key:e.key},e.outerContent):r.createElement("tr",{key:e.key,role:"presentation",className:br(e,this.props.liquid).join(" ")},this.renderChunkTd(e,t,e.chunk,n))}renderChunkTd(e,t,n,i){if("outerContent"in n)return n.outerContent;let{props:o}=this,{forceYScrollbars:s,scrollerClientWidths:a,scrollerClientHeights:l}=this.state,c=fr(o,e),d=hr(o,e),u=o.liquid?s?"scroll":c?"auto":"hidden":"visible",h=e.key,f=pr(e,n,{tableColGroupNode:t,tableMinWidth:"",clientWidth:o.collapsibleWidth||void 0===a[h]?null:a[h],clientHeight:void 0!==l[h]?l[h]:null,expandRows:e.expandRows,syncRowHeights:!1,rowSyncHeights:[],reportRowHeightChange:()=>{}},i);return r.createElement(i?"th":"td",{ref:n.elRef,role:"presentation"},r.createElement("div",{className:"fc-scroller-harness"+(d?" fc-scroller-harness-liquid":"")},r.createElement(cr,{ref:this.scrollerRefs.createRef(h),elRef:this.scrollerElRefs.createRef(h),overflowY:u,overflowX:o.liquid?"hidden":"visible",maxHeight:e.maxHeight,liquid:d,liquidIsAbsolute:!0},f)))}_handleScrollerEl(e,t){let n=function(e,t){for(let n of e)if(n.key===t)return n;return null}(this.props.sections,t);n&&Jt(n.chunk.scrollerElRef,e)}componentDidMount(){this.handleSizing(),this.context.addResizeHandler(this.handleSizing)}componentDidUpdate(){this.handleSizing()}componentWillUnmount(){this.context.removeResizeHandler(this.handleSizing)}computeShrinkWidth(){return yr(this.props.cols)?ur(this.scrollerElRefs.getAll()):0}computeScrollerDims(){let e=Bt(),{scrollerRefs:t,scrollerElRefs:n}=this,r=!1,i={},o={};for(let e in t.currentMap){let n=t.currentMap[e];if(n&&n.needsYScrolling()){r=!0;break}}for(let t of this.props.sections){let s=t.key,a=n.currentMap[s];if(a){let t=a.parentNode;i[s]=Math.floor(t.getBoundingClientRect().width-(r?e.y:0)),o[s]=Math.floor(t.getBoundingClientRect().height)}}return{forceYScrollbars:r,scrollerClientWidths:i,scrollerClientHeights:o}}}_r.addStateEquality({scrollerClientWidths:X,scrollerClientHeights:X});class Sr extends $t{constructor(){super(...arguments),this.handleEl=e=>{this.el=e,e&&fn(e,this.props.seg)}}render(){const{props:e,context:t}=this,{options:n}=t,{seg:i}=e,{eventRange:o}=i,{ui:s}=o,a={event:new cn(t,o.def,o.instance),view:t.viewApi,timeText:e.timeText,textColor:s.textColor,backgroundColor:s.backgroundColor,borderColor:s.borderColor,isDraggable:!e.disableDragging&&vn(i,t),isStartResizable:!e.disableResizing&&yn(i,t),isEndResizable:!e.disableResizing&&En(i),isMirror:Boolean(e.isDragging||e.isResizing||e.isDateSelecting),isStart:Boolean(i.isStart),isEnd:Boolean(i.isEnd),isPast:Boolean(e.isPast),isFuture:Boolean(e.isFuture),isToday:Boolean(e.isToday),isSelected:Boolean(e.isSelected),isDragging:Boolean(e.isDragging),isResizing:Boolean(e.isResizing)};return r.createElement(Vn,Object.assign({},e,{elRef:this.handleEl,elClasses:[..._n(a),...i.eventRange.ui.classNames,...e.elClasses||[]],renderProps:a,generatorName:"eventContent",customGenerator:n.eventContent,defaultGenerator:e.defaultGenerator,classNameGenerator:n.eventClassNames,didMount:n.eventDidMount,willUnmount:n.eventWillUnmount}))}componentDidUpdate(e){this.el&&this.props.seg!==e.seg&&fn(this.el,this.props.seg)}}function Ar(e){return r.createElement("div",{className:"fc-event-main-frame"},e.timeText&&r.createElement("div",{className:"fc-event-time"},e.timeText),r.createElement("div",{className:"fc-event-title-container"},r.createElement("div",{className:"fc-event-title fc-sticky"},e.event.title||r.createElement(r.Fragment,null," "))))}const Dr=He({day:"numeric"});class Cr extends $t{constructor(){super(...arguments),this.refineRenderProps=Se(Rr)}render(){let{props:e,context:t}=this,{options:n}=t,i=this.refineRenderProps({date:e.date,dateProfile:e.dateProfile,todayRange:e.todayRange,isMonthStart:e.isMonthStart||!1,showDayNumber:e.showDayNumber,extraRenderProps:e.extraRenderProps,viewApi:t.viewApi,dateEnv:t.dateEnv,monthStartFormat:n.monthStartFormat});return r.createElement(Vn,Object.assign({},e,{elClasses:[...Ot(i,t.theme),...e.elClasses||[]],elAttrs:Object.assign(Object.assign({},e.elAttrs),i.isDisabled?{}:{"data-date":Ee(e.date)}),renderProps:i,generatorName:"dayCellContent",customGenerator:n.dayCellContent,defaultGenerator:e.defaultGenerator,classNameGenerator:i.isDisabled?void 0:n.dayCellClassNames,didMount:n.dayCellDidMount,willUnmount:n.dayCellWillUnmount}))}}function wr(e){return Boolean(e.dayCellContent||Ln("dayCellContent",e))}function Rr(e){let{date:t,dateEnv:n,dateProfile:r,isMonthStart:i}=e,o=Mt(t,e.todayRange,null,r),s=e.showDayNumber?n.format(t,i?e.monthStartFormat:Dr):"";return Object.assign(Object.assign(Object.assign({date:n.toDate(t),view:e.viewApi},o),{isMonthStart:i,dayNumberText:s}),e.extraRenderProps)}function Tr(e){let{title:t}=e.event;return t&&r.createElement("div",{className:"fc-event-title"},e.event.title)}function Mr(e){return e.text}class Or extends $t{constructor(){super(...arguments),this.state={titleId:S()},this.handleRootEl=e=>{this.rootEl=e,this.props.elRef&&Jt(this.props.elRef,e)},this.handleDocumentMouseDown=e=>{const t=b(e);this.rootEl.contains(t)||this.handleCloseClick()},this.handleDocumentKeyDown=e=>{"Escape"===e.key&&this.handleCloseClick()},this.handleCloseClick=()=>{let{onClose:e}=this.props;e&&e()}}render(){let{theme:e,options:t}=this.context,{props:n,state:o}=this,s=["fc-popover",e.getClass("popover")].concat(n.extraClassNames||[]);return i.createPortal(r.createElement("div",Object.assign({},n.extraAttrs,{id:n.id,className:s.join(" "),"aria-labelledby":o.titleId,ref:this.handleRootEl}),r.createElement("div",{className:"fc-popover-header "+e.getClass("popoverHeader")},r.createElement("span",{className:"fc-popover-title",id:o.titleId},n.title),r.createElement("span",{className:"fc-popover-close "+e.getIconClass("close"),title:t.closeHint,onClick:this.handleCloseClick})),r.createElement("div",{className:"fc-popover-body "+e.getClass("popoverContent")},n.children)),n.parentEl)}componentDidMount(){document.addEventListener("mousedown",this.handleDocumentMouseDown),document.addEventListener("keydown",this.handleDocumentKeyDown),this.updateSize()}componentWillUnmount(){document.removeEventListener("mousedown",this.handleDocumentMouseDown),document.removeEventListener("keydown",this.handleDocumentKeyDown)}updateSize(){let{isRtl:e}=this.context,{alignmentEl:t,alignGridTop:n}=this.props,{rootEl:r}=this,i=function(e){let t=Ft(e),n=e.getBoundingClientRect();for(let e of t){let t=vt(n,e.getBoundingClientRect());if(!t)return null;n=t}return n}(t);if(i){let o=r.getBoundingClientRect(),s=n?p(t,".fc-scrollgrid").getBoundingClientRect().top:i.top,a=e?i.right-o.width:i.left;s=Math.max(s,10),a=Math.min(a,document.documentElement.clientWidth-10-o.width),a=Math.max(a,10);let l=r.offsetParent.getBoundingClientRect();y(r,{top:s-l.top,left:a-l.left})}}}class xr extends Kt{constructor(){super(...arguments),this.handleRootEl=e=>{this.rootEl=e,e?this.context.registerInteractiveComponent(this,{el:e,useEventCenter:!1}):this.context.unregisterInteractiveComponent(this)}}render(){let{options:e,dateEnv:t}=this.context,{props:n}=this,{startDate:i,todayRange:o,dateProfile:s}=n,a=t.format(i,e.dayPopoverFormat);return r.createElement(Cr,{elRef:this.handleRootEl,date:i,dateProfile:s,todayRange:o},((t,i,o)=>r.createElement(Or,{elRef:o.ref,id:n.id,title:a,extraClassNames:["fc-more-popover"].concat(o.className||[]),extraAttrs:o,parentEl:n.parentEl,alignmentEl:n.alignmentEl,alignGridTop:n.alignGridTop,onClose:n.onClose},wr(e)&&r.createElement(t,{elTag:"div",elClasses:["fc-more-popover-misc"]}),n.children)))}queryHit(e,t,n,r){let{rootEl:i,props:o}=this;return e>=0&&e<n&&t>=0&&t<r?{dateProfile:o.dateProfile,dateSpan:Object.assign({allDay:!o.forceTimed,range:{start:o.startDate,end:o.endDate}},o.extraDateSpan),dayEl:i,rect:{left:0,top:0,right:n,bottom:r},layer:1}:null}}function kr(e){return e.text}function Ir(e){if(e.allDayDate)return{start:e.allDayDate,end:re(e.allDayDate,1)};let{hiddenSegs:t}=e;return{start:Nr(t),end:(n=t,n.reduce(Hr).eventRange.range.end)};var n}function Nr(e){return e.reduce(Pr).eventRange.range.start}function Pr(e,t){return e.eventRange.range.start<t.eventRange.range.start?e:t}function Hr(e,t){return e.eventRange.range.end>t.eventRange.range.end?e:t}function Br(e){return[`fc-${e.type}-view`,"fc-view"]}const jr={id:String,defaultAllDay:Boolean,url:String,format:String,events:Ge,eventDataTransform:Ge,success:Ge,failure:Ge};function Lr(e,t,n=Ur(t)){let r;if("string"==typeof e?r={url:e}:"function"==typeof e||Array.isArray(e)?r={events:e}:"object"==typeof e&&e&&(r=e),r){let{refined:i,extra:o}=We(r,n),s=function(e,t){let n=t.pluginHooks.eventSourceDefs;for(let t=n.length-1;t>=0;t-=1){let r=n[t].parseMeta(e);if(r)return{sourceDefId:t,meta:r}}return null}(i,t);if(s)return{_raw:e,isFetching:!1,latestFetchId:"",fetchRange:null,defaultAllDay:i.defaultAllDay,eventDataTransform:i.eventDataTransform,success:i.success,failure:i.failure,publicId:i.id||"",sourceId:M(),sourceDefId:s.sourceDefId,meta:s.meta,ui:rt(i,t),extendedProps:o}}return null}function Ur(e){return Object.assign(Object.assign(Object.assign({},tt),jr),e.pluginHooks.eventSourceRefiners)}class Fr{constructor(){this.handlers=[]}set(e){this.currentValue=e;for(let t of this.handlers)t(e)}subscribe(e){this.handlers.push(e),void 0!==this.currentValue&&e(this.currentValue)}}t.BASE_OPTION_DEFAULTS={eventDisplay:"auto",defaultRangeSeparator:" - ",titleRangeSeparator:" – ",defaultTimedEventDuration:"01:00:00",defaultAllDayEventDuration:{day:1},forceEventDuration:!1,nextDayThreshold:"00:00:00",dayHeaders:!0,initialView:"",aspectRatio:1.35,headerToolbar:{start:"title",center:"",end:"today prev,next"},weekends:!0,weekNumbers:!1,weekNumberCalculation:"local",editable:!1,nowIndicator:!1,scrollTime:"06:00:00",scrollTimeReset:!0,slotMinTime:"00:00:00",slotMaxTime:"24:00:00",showNonCurrentDates:!0,lazyFetching:!0,startParam:"start",endParam:"end",timeZoneParam:"timeZone",timeZone:"local",locales:[],locale:"",themeSystem:"standard",dragRevertDuration:500,dragScroll:!0,allDayMaintainDuration:!1,unselectAuto:!0,dropAccept:"*",eventOrder:"start,-duration,allDay,title",dayPopoverFormat:{month:"long",day:"numeric",year:"numeric"},handleWindowResize:!0,windowResizeDelay:100,longPressDelay:1e3,eventDragMinDistance:5,expandRows:!1,navLinks:!1,selectable:!1,eventMinHeight:15,eventMinWidth:30,eventShortHeight:30,monthStartFormat:{month:"long",day:"numeric"}},t.BASE_OPTION_REFINERS=Be,t.BaseComponent=$t,t.BgEvent=class extends $t{render(){let{props:e}=this,{seg:t}=e;return r.createElement(Sr,{elTag:"div",elClasses:["fc-bg-event"],elStyle:{backgroundColor:t.eventRange.ui.backgroundColor},defaultGenerator:Tr,seg:t,timeText:"",isDragging:!1,isResizing:!1,isDateSelecting:!1,isSelected:!1,isPast:e.isPast,isFuture:e.isFuture,isToday:e.isToday,disableDragging:!0,disableResizing:!0})}},t.CALENDAR_LISTENER_REFINERS=je,t.CALENDAR_OPTION_REFINERS=Le,t.COMPLEX_OPTION_COMPARATORS=Ue,t.CalendarImpl=class{getCurrentData(){return this.currentDataManager.getCurrentData()}dispatch(e){this.currentDataManager.dispatch(e)}get view(){return this.getCurrentData().viewApi}batchRendering(e){e()}updateSize(){this.trigger("_resize",!0)}setOption(e,t){this.dispatch({type:"SET_OPTION",optionName:e,rawOptionValue:t})}getOption(e){return this.currentDataManager.currentCalendarOptionsInput[e]}getAvailableLocaleCodes(){return Object.keys(this.getCurrentData().availableRawLocales)}on(e,t){let{currentDataManager:n}=this;n.currentCalendarOptionsRefiners[e]?n.emitter.on(e,t):console.warn(`Unknown listener name '${e}'`)}off(e,t){this.currentDataManager.emitter.off(e,t)}trigger(e,...t){this.currentDataManager.emitter.trigger(e,...t)}changeView(e,t){this.batchRendering((()=>{if(this.unselect(),t)if(t.start&&t.end)this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e}),this.dispatch({type:"SET_OPTION",optionName:"visibleRange",rawOptionValue:t});else{let{dateEnv:n}=this.getCurrentData();this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e,dateMarker:n.createMarker(t)})}else this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:e})}))}zoomTo(e,t){let n;t=t||"day",n=this.getCurrentData().viewSpecs[t]||this.getUnitViewSpec(t),this.unselect(),n?this.dispatch({type:"CHANGE_VIEW_TYPE",viewType:n.type,dateMarker:e}):this.dispatch({type:"CHANGE_DATE",dateMarker:e})}getUnitViewSpec(e){let t,n,{viewSpecs:r,toolbarConfig:i}=this.getCurrentData(),o=[].concat(i.header?i.header.viewsWithButtons:[],i.footer?i.footer.viewsWithButtons:[]);for(let e in r)o.push(e);for(t=0;t<o.length;t+=1)if(n=r[o[t]],n&&n.singleUnit===e)return n;return null}prev(){this.unselect(),this.dispatch({type:"PREV"})}next(){this.unselect(),this.dispatch({type:"NEXT"})}prevYear(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:e.dateEnv.addYears(e.currentDate,-1)})}nextYear(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:e.dateEnv.addYears(e.currentDate,1)})}today(){let e=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:en(e.calendarOptions.now,e.dateEnv)})}gotoDate(e){let t=this.getCurrentData();this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:t.dateEnv.createMarker(e)})}incrementDate(e){let t=this.getCurrentData(),n=U(e);n&&(this.unselect(),this.dispatch({type:"CHANGE_DATE",dateMarker:t.dateEnv.add(t.currentDate,n)}))}getDate(){let e=this.getCurrentData();return e.dateEnv.toDate(e.currentDate)}formatDate(e,t){let{dateEnv:n}=this.getCurrentData();return n.format(n.createMarker(e),He(t))}formatRange(e,t,n){let{dateEnv:r}=this.getCurrentData();return r.formatRange(r.createMarker(e),r.createMarker(t),He(n),n)}formatIso(e,t){let{dateEnv:n}=this.getCurrentData();return n.formatIso(n.createMarker(e),{omitTime:t})}select(e,t){let n;n=null==t?null!=e.start?e:{start:e,end:null}:{start:e,end:t};let r=this.getCurrentData(),i=function(e,t,n){let r=function(e,t){let{refined:n,extra:r}=We(e,An),i=n.start?t.createMarkerMeta(n.start):null,o=n.end?t.createMarkerMeta(n.end):null,{allDay:s}=n;return null==s&&(s=i&&i.isTimeUnspecified&&(!o||o.isTimeUnspecified)),Object.assign({range:{start:i?i.marker:null,end:o?o.marker:null},allDay:s},r)}(e,t),{range:i}=r;if(!i.start)return null;if(!i.end){if(null==n)return null;i.end=t.add(i.start,n)}return r}(n,r.dateEnv,U({days:1}));i&&(this.dispatch({type:"SELECT_DATES",selection:i}),tn(i,null,r))}unselect(e){let t=this.getCurrentData();t.dateSelection&&(this.dispatch({type:"UNSELECT_DATES"}),function(e,t){t.emitter.trigger("unselect",{jsEvent:e?e.origEvent:null,view:t.viewApi||t.calendarApi.view})}(e,t))}addEvent(e,t){if(e instanceof cn){let t=e._def,n=e._instance;return this.getCurrentData().eventStore.defs[t.defId]||(this.dispatch({type:"ADD_EVENTS",eventStore:Xe({def:t,instance:n})}),this.triggerEventAdd(e)),e}let n,r=this.getCurrentData();if(t instanceof ln)n=t.internalEventSource;else if("boolean"==typeof t)t&&([n]=Z(r.eventSources));else if(null!=t){let e=this.getEventSourceById(t);if(!e)return console.warn(`Could not find an event source with ID "${t}"`),null;n=e.internalEventSource}let i=ct(e,n,r,!1);if(i){let e=new cn(r,i.def,i.def.recurringDef?null:i.instance);return this.dispatch({type:"ADD_EVENTS",eventStore:Xe(i)}),this.triggerEventAdd(e),e}return null}triggerEventAdd(e){let{emitter:t}=this.getCurrentData();t.trigger("eventAdd",{event:e,relatedEvents:[],revert:()=>{this.dispatch({type:"REMOVE_EVENTS",eventStore:dn(e)})}})}getEventById(e){let t=this.getCurrentData(),{defs:n,instances:r}=t.eventStore;e=String(e);for(let i in n){let o=n[i];if(o.publicId===e){if(o.recurringDef)return new cn(t,o,null);for(let e in r){let n=r[e];if(n.defId===o.defId)return new cn(t,o,n)}}}return null}getEvents(){let e=this.getCurrentData();return un(e.eventStore,e)}removeAllEvents(){this.dispatch({type:"REMOVE_ALL_EVENTS"})}getEventSources(){let e=this.getCurrentData(),t=e.eventSources,n=[];for(let r in t)n.push(new ln(e,t[r]));return n}getEventSourceById(e){let t=this.getCurrentData(),n=t.eventSources;e=String(e);for(let r in n)if(n[r].publicId===e)return new ln(t,n[r]);return null}addEventSource(e){let t=this.getCurrentData();if(e instanceof ln)return t.eventSources[e.internalEventSource.sourceId]||this.dispatch({type:"ADD_EVENT_SOURCES",sources:[e.internalEventSource]}),e;let n=Lr(e,t);return n?(this.dispatch({type:"ADD_EVENT_SOURCES",sources:[n]}),new ln(t,n)):null}removeAllEventSources(){this.dispatch({type:"REMOVE_ALL_EVENT_SOURCES"})}refetchEvents(){this.dispatch({type:"FETCH_EVENT_SOURCES",isRefetch:!0})}scrollToTime(e){let t=U(e);t&&this.trigger("_scrollRequest",{time:t})}},t.CalendarRoot=class extends $t{constructor(){super(...arguments),this.state={forPrint:!1},this.handleBeforePrint=()=>{this.setState({forPrint:!0})},this.handleAfterPrint=()=>{this.setState({forPrint:!1})}}render(){let{props:e}=this,{options:t}=e,{forPrint:n}=this.state,r=n||"auto"===t.height||"auto"===t.contentHeight,i=r||null==t.height?"":t.height,o=["fc",n?"fc-media-print":"fc-media-screen",`fc-direction-${t.direction}`,e.theme.getClass("root")];return Et()||o.push("fc-liquid-hack"),e.children(o,i,r,n)}componentDidMount(){let{emitter:e}=this.props;e.on("_beforeprint",this.handleBeforePrint),e.on("_afterprint",this.handleAfterPrint)}componentWillUnmount(){let{emitter:e}=this.props;e.off("_beforeprint",this.handleBeforePrint),e.off("_afterprint",this.handleAfterPrint)}},t.ContentContainer=Vn,t.CustomRenderingStore=class extends Fr{constructor(){super(...arguments),this.map=new Map}handle(e){const{map:t}=this;let n=!1;e.isActive?(t.set(e.id,e),n=!0):t.has(e.id)&&(t.delete(e.id),n=!0),n&&this.set(t)}},t.DateComponent=Kt,t.DateEnv=class{constructor(e){let t=this.timeZone=e.timeZone,n="local"!==t&&"UTC"!==t;e.namedTimeZoneImpl&&n&&(this.namedTimeZoneImpl=new e.namedTimeZoneImpl(t)),this.canComputeOffset=Boolean(!n||this.namedTimeZoneImpl),this.calendarSystem=function(e){return new Cn[e]}(e.calendarSystem),this.locale=e.locale,this.weekDow=e.locale.week.dow,this.weekDoy=e.locale.week.doy,"ISO"===e.weekNumberCalculation&&(this.weekDow=1,this.weekDoy=4),"number"==typeof e.firstDay&&(this.weekDow=e.firstDay),"function"==typeof e.weekNumberCalculation&&(this.weekNumberFunc=e.weekNumberCalculation),this.weekText=null!=e.weekText?e.weekText:e.locale.options.weekText,this.weekTextLong=(null!=e.weekTextLong?e.weekTextLong:e.locale.options.weekTextLong)||this.weekText,this.cmdFormatter=e.cmdFormatter,this.defaultSeparator=e.defaultSeparator}createMarker(e){let t=this.createMarkerMeta(e);return null===t?null:t.marker}createNowMarker(){return this.canComputeOffset?this.timestampToMarker((new Date).valueOf()):ge(he(new Date))}createMarkerMeta(e){if("string"==typeof e)return this.parse(e);let t=null;return"number"==typeof e?t=this.timestampToMarker(e):e instanceof Date?(e=e.valueOf(),isNaN(e)||(t=this.timestampToMarker(e))):Array.isArray(e)&&(t=ge(e)),null!==t&&me(t)?{marker:t,isTimeUnspecified:!1,forcedTzo:null}:null}parse(e){let t=Tn(e);if(null===t)return null;let{marker:n}=t,r=null;return null!==t.timeZoneOffset&&(this.canComputeOffset?n=this.timestampToMarker(n.valueOf()-60*t.timeZoneOffset*1e3):r=t.timeZoneOffset),{marker:n,isTimeUnspecified:t.isTimeUnspecified,forcedTzo:r}}getYear(e){return this.calendarSystem.getMarkerYear(e)}getMonth(e){return this.calendarSystem.getMarkerMonth(e)}getDay(e){return this.calendarSystem.getMarkerDay(e)}add(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]+=t.years,n[1]+=t.months,n[2]+=t.days,n[6]+=t.milliseconds,this.calendarSystem.arrayToMarker(n)}subtract(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]-=t.years,n[1]-=t.months,n[2]-=t.days,n[6]-=t.milliseconds,this.calendarSystem.arrayToMarker(n)}addYears(e,t){let n=this.calendarSystem.markerToArray(e);return n[0]+=t,this.calendarSystem.arrayToMarker(n)}addMonths(e,t){let n=this.calendarSystem.markerToArray(e);return n[1]+=t,this.calendarSystem.arrayToMarker(n)}diffWholeYears(e,t){let{calendarSystem:n}=this;return ve(e)===ve(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)&&n.getMarkerMonth(e)===n.getMarkerMonth(t)?n.getMarkerYear(t)-n.getMarkerYear(e):null}diffWholeMonths(e,t){let{calendarSystem:n}=this;return ve(e)===ve(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)?n.getMarkerMonth(t)-n.getMarkerMonth(e)+12*(n.getMarkerYear(t)-n.getMarkerYear(e)):null}greatestWholeUnit(e,t){let n=this.diffWholeYears(e,t);return null!==n?{unit:"year",value:n}:(n=this.diffWholeMonths(e,t),null!==n?{unit:"month",value:n}:(n=ae(e,t),null!==n?{unit:"week",value:n}:(n=le(e,t),null!==n?{unit:"day",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/36e5}(e,t),H(n)?{unit:"hour",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/6e4}(e,t),H(n)?{unit:"minute",value:n}:(n=function(e,t){return(t.valueOf()-e.valueOf())/1e3}(e,t),H(n)?{unit:"second",value:n}:{unit:"millisecond",value:t.valueOf()-e.valueOf()}))))))}countDurationsBetween(e,t,n){let r;return n.years&&(r=this.diffWholeYears(e,t),null!==r)?r/(z(n)/365):n.months&&(r=this.diffWholeMonths(e,t),null!==r)?r/(z(n)/30):n.days&&(r=le(e,t),null!==r)?r/z(n):(t.valueOf()-e.valueOf())/V(n)}startOf(e,t){return"year"===t?this.startOfYear(e):"month"===t?this.startOfMonth(e):"week"===t?this.startOfWeek(e):"day"===t?ce(e):"hour"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours()])}(e):"minute"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes()])}(e):"second"===t?function(e){return ge([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds()])}(e):null}startOfYear(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e)])}startOfMonth(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e)])}startOfWeek(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e),e.getUTCDate()-(e.getUTCDay()-this.weekDow+7)%7])}computeWeekNumber(e){return this.weekNumberFunc?this.weekNumberFunc(this.toDate(e)):function(e,t,n){let r=e.getUTCFullYear(),i=de(e,r,t,n);if(i<1)return de(e,r-1,t,n);let o=de(e,r+1,t,n);return o>=1?Math.min(i,o):i}(e,this.weekDow,this.weekDoy)}format(e,t,n={}){return t.format({marker:e,timeZoneOffset:null!=n.forcedTzo?n.forcedTzo:this.offsetForMarker(e)},this)}formatRange(e,t,n,r={}){return r.isEndExclusive&&(t=ie(t,-1)),n.formatRange({marker:e,timeZoneOffset:null!=r.forcedStartTzo?r.forcedStartTzo:this.offsetForMarker(e)},{marker:t,timeZoneOffset:null!=r.forcedEndTzo?r.forcedEndTzo:this.offsetForMarker(t)},this,r.defaultSeparator)}formatIso(e,t={}){let n=null;return t.omitTimeZoneOffset||(n=null!=t.forcedTzo?t.forcedTzo:this.offsetForMarker(e)),ye(e,n,t.omitTime)}timestampToMarker(e){return"local"===this.timeZone?ge(he(new Date(e))):"UTC"!==this.timeZone&&this.namedTimeZoneImpl?ge(this.namedTimeZoneImpl.timestampToArray(e)):new Date(e)}offsetForMarker(e){return"local"===this.timeZone?-fe(pe(e)).getTimezoneOffset():"UTC"===this.timeZone?0:this.namedTimeZoneImpl?this.namedTimeZoneImpl.offsetForArray(pe(e)):null}toDate(e,t){return"local"===this.timeZone?fe(pe(e)):"UTC"===this.timeZone?new Date(e.valueOf()):this.namedTimeZoneImpl?new Date(e.valueOf()-1e3*this.namedTimeZoneImpl.offsetForArray(pe(e))*60):new Date(e.valueOf()-(t||0))}},t.DateProfileGenerator=class{constructor(e){this.props=e,this.nowDate=en(e.nowInput,e.dateEnv),this.initHiddenDays()}buildPrev(e,t,n){let{dateEnv:r}=this.props,i=r.subtract(r.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(i,-1,n)}buildNext(e,t,n){let{dateEnv:r}=this.props,i=r.add(r.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(i,1,n)}build(e,t,n=!0){let r,i,o,s,a,l,{props:c}=this;var d,u;return r=this.buildValidRange(),r=this.trimHiddenDays(r),n&&(d=e,e=null!=(u=r).start&&d<u.start?u.start:null!=u.end&&d>=u.end?new Date(u.end.valueOf()-1):d),i=this.buildCurrentRangeInfo(e,t),o=/^(year|month|week|day)$/.test(i.unit),s=this.buildRenderRange(this.trimHiddenDays(i.range),i.unit,o),s=this.trimHiddenDays(s),a=s,c.showNonCurrentDates||(a=Dt(a,i.range)),a=this.adjustActiveRange(a),a=Dt(a,r),l=wt(i.range,r),Tt(s,e)||(e=s.start),{currentDate:e,validRange:r,currentRange:i.range,currentRangeUnit:i.unit,isRangeAllDay:o,activeRange:a,renderRange:s,slotMinTime:c.slotMinTime,slotMaxTime:c.slotMaxTime,isValid:l,dateIncrement:this.buildDateIncrement(i.duration)}}buildValidRange(){let e=this.props.validRangeInput,t="function"==typeof e?e.call(this.props.calendarApi,this.nowDate):e;return this.refineRange(t)||{start:null,end:null}}buildCurrentRangeInfo(e,t){let n,{props:r}=this,i=null,o=null,s=null;return r.duration?(i=r.duration,o=r.durationUnit,s=this.buildRangeFromDuration(e,t,i,o)):(n=this.props.dayCount)?(o="day",s=this.buildRangeFromDayCount(e,t,n)):(s=this.buildCustomVisibleRange(e))?o=r.dateEnv.greatestWholeUnit(s.start,s.end).unit:(i=this.getFallbackDuration(),o=W(i).unit,s=this.buildRangeFromDuration(e,t,i,o)),{duration:i,unit:o,range:s}}getFallbackDuration(){return U({day:1})}adjustActiveRange(e){let{dateEnv:t,usesMinMaxTime:n,slotMinTime:r,slotMaxTime:i}=this.props,{start:o,end:s}=e;return n&&(z(r)<0&&(o=ce(o),o=t.add(o,r)),z(i)>1&&(s=ce(s),s=re(s,-1),s=t.add(s,i))),{start:o,end:s}}buildRangeFromDuration(e,t,n,r){let i,o,s,{dateEnv:a,dateAlignment:l}=this.props;if(!l){let{dateIncrement:e}=this.props;l=e&&V(e)<V(n)?W(e).unit:r}function c(){i=a.startOf(e,l),o=a.add(i,n),s={start:i,end:o}}return z(n)<=1&&this.isHiddenDay(i)&&(i=this.skipHiddenDays(i,t),i=ce(i)),c(),this.trimHiddenDays(s)||(e=this.skipHiddenDays(e,t),c()),s}buildRangeFromDayCount(e,t,n){let r,{dateEnv:i,dateAlignment:o}=this.props,s=0,a=e;o&&(a=i.startOf(a,o)),a=ce(a),a=this.skipHiddenDays(a,t),r=a;do{r=re(r,1),this.isHiddenDay(r)||(s+=1)}while(s<n);return{start:a,end:r}}buildCustomVisibleRange(e){let{props:t}=this,n=t.visibleRangeInput,r="function"==typeof n?n.call(t.calendarApi,t.dateEnv.toDate(e)):n,i=this.refineRange(r);return!i||null!=i.start&&null!=i.end?i:null}buildRenderRange(e,t,n){return e}buildDateIncrement(e){let t,{dateIncrement:n}=this.props;return n||((t=this.props.dateAlignment)?U(1,t):e||U({days:1}))}refineRange(e){if(e){let t=function(e,t){let n=null,r=null;return e.start&&(n=t.createMarker(e.start)),e.end&&(r=t.createMarker(e.end)),n||r?n&&r&&r<n?null:{start:n,end:r}:null}(e,this.props.dateEnv);return t&&(t=gt(t)),t}return null}initHiddenDays(){let e,t=this.props.hiddenDays||[],n=[],r=0;for(!1===this.props.weekends&&t.push(0,6),e=0;e<7;e+=1)(n[e]=-1!==t.indexOf(e))||(r+=1);if(!r)throw new Error("invalid hiddenDays");this.isHiddenDayHash=n}trimHiddenDays(e){let{start:t,end:n}=e;return t&&(t=this.skipHiddenDays(t)),n&&(n=this.skipHiddenDays(n,-1,!0)),null==t||null==n||t<n?{start:t,end:n}:null}isHiddenDay(e){return e instanceof Date&&(e=e.getUTCDay()),this.isHiddenDayHash[e]}skipHiddenDays(e,t=1,n=!1){for(;this.isHiddenDayHash[(e.getUTCDay()+(n?t:0)+7)%7];)e=re(e,t);return e}},t.DayCellContainer=Cr,t.DayHeader=class extends $t{constructor(){super(...arguments),this.createDayHeaderFormatter=_e(Xn)}render(){let{context:e}=this,{dates:t,dateProfile:n,datesRepDistinctDays:i,renderIntro:o}=this.props,s=this.createDayHeaderFormatter(e.options.dayHeaderFormat,i,t.length);return r.createElement(Qn,{unit:"day"},((e,a)=>r.createElement("tr",{role:"row"},o&&o("day"),t.map((e=>i?r.createElement(Gn,{key:e.toISOString(),date:e,dateProfile:n,todayRange:a,colCnt:t.length,dayHeaderFormat:s}):r.createElement(Yn,{key:e.getUTCDay(),dow:e.getUTCDay(),dayHeaderFormat:s}))))))}},t.DaySeriesModel=class{constructor(e,t){let n=e.start,{end:r}=e,i=[],o=[],s=-1;for(;n<r;)t.isHiddenDay(n)?i.push(s+.5):(s+=1,i.push(s),o.push(n)),n=re(n,1);this.dates=o,this.indices=i,this.cnt=o.length}sliceRange(e){let t=this.getDateDayIndex(e.start),n=this.getDateDayIndex(re(e.end,-1)),r=Math.max(0,t),i=Math.min(this.cnt-1,n);return r=Math.ceil(r),i=Math.floor(i),r<=i?{firstIndex:r,lastIndex:i,isStart:t===r,isEnd:n===i}:null}getDateDayIndex(e){let{indices:t}=this,n=Math.floor(oe(this.dates[0],e));return n<0?t[0]-1:n>=t.length?t[t.length-1]+1:t[n]}},t.DayTableModel=class{constructor(e,t){let n,r,i,{dates:o}=e;if(t){for(r=o[0].getUTCDay(),n=1;n<o.length&&o[n].getUTCDay()!==r;n+=1);i=Math.ceil(o.length/n)}else i=1,n=o.length;this.rowCnt=i,this.colCnt=n,this.daySeries=e,this.cells=this.buildCells(),this.headerDates=this.buildHeaderDates()}buildCells(){let e=[];for(let t=0;t<this.rowCnt;t+=1){let n=[];for(let e=0;e<this.colCnt;e+=1)n.push(this.buildCell(t,e));e.push(n)}return e}buildCell(e,t){let n=this.daySeries.dates[e*this.colCnt+t];return{key:n.toISOString(),date:n}}buildHeaderDates(){let e=[];for(let t=0;t<this.colCnt;t+=1)e.push(this.cells[0][t].date);return e}sliceRange(e){let{colCnt:t}=this,n=this.daySeries.sliceRange(e),r=[];if(n){let{firstIndex:e,lastIndex:i}=n,o=e;for(;o<=i;){let s=Math.floor(o/t),a=Math.min((s+1)*t,i+1);r.push({row:s,firstCol:o%t,lastCol:(a-1)%t,isStart:n.isStart&&o===e,isEnd:n.isEnd&&a-1===i}),o=a}}return r}},t.DelayedRunner=class{constructor(e){this.drainedOption=e,this.isRunning=!1,this.isDirty=!1,this.pauseDepths={},this.timeoutId=0}request(e){this.isDirty=!0,this.isPaused()||(this.clearTimeout(),null==e?this.tryDrain():this.timeoutId=setTimeout(this.tryDrain.bind(this),e))}pause(e=""){let{pauseDepths:t}=this;t[e]=(t[e]||0)+1,this.clearTimeout()}resume(e="",t){let{pauseDepths:n}=this;e in n&&(t?delete n[e]:(n[e]-=1,n[e]<=0&&delete n[e]),this.tryDrain())}isPaused(){return Object.keys(this.pauseDepths).length}tryDrain(){if(!this.isRunning&&!this.isPaused()){for(this.isRunning=!0;this.isDirty;)this.isDirty=!1,this.drained();this.isRunning=!1}}clear(){this.clearTimeout(),this.isDirty=!1,this.pauseDepths={}}clearTimeout(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=0)}drained(){this.drainedOption&&this.drainedOption()}},t.ElementDragging=class{constructor(e,t){this.emitter=new zt}destroy(){}setMirrorIsVisible(e){}setMirrorNeedsRevert(e){}setAutoScrollEnabled(e){}},t.ElementScrollController=class extends Wt{constructor(e){super(),this.el=e}getScrollTop(){return this.el.scrollTop}getScrollLeft(){return this.el.scrollLeft}setScrollTop(e){this.el.scrollTop=e}setScrollLeft(e){this.el.scrollLeft=e}getScrollWidth(){return this.el.scrollWidth}getScrollHeight(){return this.el.scrollHeight}getClientHeight(){return this.el.clientHeight}getClientWidth(){return this.el.clientWidth}},t.Emitter=zt,t.EventContainer=Sr,t.EventImpl=cn,t.Interaction=class{constructor(e){this.component=e.component,this.isHitComboAllowed=e.isHitComboAllowed||null}destroy(){}},t.JsonRequestError=ar,t.MoreLinkContainer=class extends $t{constructor(){super(...arguments),this.state={isPopoverOpen:!1,popoverId:S()},this.handleLinkEl=e=>{this.linkEl=e,this.props.elRef&&Jt(this.props.elRef,e)},this.handleClick=e=>{let{props:t,context:n}=this,{moreLinkClick:r}=n.options,i=Ir(t).start;function o(e){let{def:t,instance:r,range:i}=e.eventRange;return{event:new cn(n,t,r),start:n.dateEnv.toDate(i.start),end:n.dateEnv.toDate(i.end),isStart:e.isStart,isEnd:e.isEnd}}"function"==typeof r&&(r=r({date:i,allDay:Boolean(t.allDayDate),allSegs:t.allSegs.map(o),hiddenSegs:t.hiddenSegs.map(o),jsEvent:e,view:n.viewApi})),r&&"popover"!==r?"string"==typeof r&&n.calendarApi.zoomTo(i,r):this.setState({isPopoverOpen:!0})},this.handlePopoverClose=()=>{this.setState({isPopoverOpen:!1})}}render(){let{props:e,state:t}=this;return r.createElement(Zt.Consumer,null,(n=>{let{viewApi:i,options:o,calendarApi:s}=n,{moreLinkText:a}=o,{moreCnt:l}=e,c=Ir(e),d="function"==typeof a?a.call(s,l):`+${l} ${a}`,u=P(o.moreLinkHint,[l],d),h={num:l,shortText:`+${l}`,text:d,view:i};return r.createElement(r.Fragment,null,Boolean(e.moreCnt)&&r.createElement(Vn,{elTag:e.elTag||"a",elRef:this.handleLinkEl,elClasses:[...e.elClasses||[],"fc-more-link"],elStyle:e.elStyle,elAttrs:Object.assign(Object.assign(Object.assign({},e.elAttrs),w(this.handleClick)),{title:u,"aria-expanded":t.isPopoverOpen,"aria-controls":t.isPopoverOpen?t.popoverId:""}),renderProps:h,generatorName:"moreLinkContent",customGenerator:o.moreLinkContent,defaultGenerator:e.defaultGenerator||kr,classNameGenerator:o.moreLinkClassNames,didMount:o.moreLinkDidMount,willUnmount:o.moreLinkWillUnmount},e.children),t.isPopoverOpen&&r.createElement(xr,{id:t.popoverId,startDate:c.start,endDate:c.end,dateProfile:e.dateProfile,todayRange:e.todayRange,extraDateSpan:e.extraDateSpan,parentEl:this.parentEl,alignmentEl:e.alignmentElRef?e.alignmentElRef.current:this.linkEl,alignGridTop:e.alignGridTop,forceTimed:e.forceTimed,onClose:this.handlePopoverClose},e.popoverContent()))}))}componentDidMount(){this.updateParentEl()}componentDidUpdate(){this.updateParentEl()}updateParentEl(){this.linkEl&&(this.parentEl=p(this.linkEl,".fc-view-harness"))}},t.NamedTimeZoneImpl=class{constructor(e){this.timeZoneName=e}},t.NowIndicatorContainer=e=>r.createElement(Zt.Consumer,null,(t=>{let{options:n}=t,i={isAxis:e.isAxis,date:t.dateEnv.toDate(e.date),view:t.viewApi};return r.createElement(Vn,Object.assign({},e,{elTag:e.elTag||"div",renderProps:i,generatorName:"nowIndicatorContent",customGenerator:n.nowIndicatorContent,classNameGenerator:n.nowIndicatorClassNames,didMount:n.nowIndicatorDidMount,willUnmount:n.nowIndicatorWillUnmount}))})),t.NowTimer=Qn,t.PositionCache=class{constructor(e,t,n,r){this.els=t;let i=this.originClientRect=e.getBoundingClientRect();n&&this.buildElHorizontals(i.left),r&&this.buildElVerticals(i.top)}buildElHorizontals(e){let t=[],n=[];for(let r of this.els){let i=r.getBoundingClientRect();t.push(i.left-e),n.push(i.right-e)}this.lefts=t,this.rights=n}buildElVerticals(e){let t=[],n=[];for(let r of this.els){let i=r.getBoundingClientRect();t.push(i.top-e),n.push(i.bottom-e)}this.tops=t,this.bottoms=n}leftToIndex(e){let t,{lefts:n,rights:r}=this,i=n.length;for(t=0;t<i;t+=1)if(e>=n[t]&&e<r[t])return t}topToIndex(e){let t,{tops:n,bottoms:r}=this,i=n.length;for(t=0;t<i;t+=1)if(e>=n[t]&&e<r[t])return t}getWidth(e){return this.rights[e]-this.lefts[e]}getHeight(e){return this.bottoms[e]-this.tops[e]}similarTo(e){return Vt(this.tops||[],e.tops||[])&&Vt(this.bottoms||[],e.bottoms||[])&&Vt(this.lefts||[],e.lefts||[])&&Vt(this.rights||[],e.rights||[])}},t.PureComponent=Xt,t.RefMap=dr,t.RenderId=zn,t.ScrollController=Wt,t.ScrollResponder=Qt,t.Scroller=cr,t.SegHierarchy=class{constructor(){this.strictOrder=!1,this.allowReslicing=!1,this.maxCoord=-1,this.maxStackCnt=-1,this.levelCoords=[],this.entriesByLevel=[],this.stackCnts={}}addSegs(e){let t=[];for(let n of e)this.insertEntry(n,t);return t}insertEntry(e,t){let n=this.findInsertion(e);return this.isInsertionValid(n,e)?(this.insertEntryAt(e,n),1):this.handleInvalidInsertion(n,e,t)}isInsertionValid(e,t){return(-1===this.maxCoord||e.levelCoord+t.thickness<=this.maxCoord)&&(-1===this.maxStackCnt||e.stackCnt<this.maxStackCnt)}handleInvalidInsertion(e,t,n){return this.allowReslicing&&e.touchingEntry?this.splitEntry(t,e.touchingEntry,n):(n.push(t),0)}splitEntry(e,t,n){let r=0,i=[],o=e.span,s=t.span;return o.start<s.start&&(r+=this.insertEntry({index:e.index,thickness:e.thickness,span:{start:o.start,end:s.start}},i)),o.end>s.end&&(r+=this.insertEntry({index:e.index,thickness:e.thickness,span:{start:s.end,end:o.end}},i)),r?(n.push({index:e.index,thickness:e.thickness,span:xn(s,o)},...i),r):(n.push(e),0)}insertEntryAt(e,t){let{entriesByLevel:n,levelCoords:r}=this;-1===t.lateral?(kn(r,t.level,t.levelCoord),kn(n,t.level,[e])):kn(n[t.level],t.lateral,e),this.stackCnts[On(e)]=t.stackCnt}findInsertion(e){let{levelCoords:t,entriesByLevel:n,strictOrder:r,stackCnts:i}=this,o=t.length,s=0,a=-1,l=-1,c=null,d=0;for(let u=0;u<o;u+=1){let o=t[u];if(!r&&o>=s+e.thickness)break;let h,f=n[u],p=In(f,e.span.start,Mn),g=p[0]+p[1];for(;(h=f[g])&&h.span.start<e.span.end;){let e=o+h.thickness;e>s&&(s=e,c=h,a=u,l=g),e===s&&(d=Math.max(d,i[On(h)]+1)),g+=1}}let u=0;if(c)for(u=a+1;u<o&&t[u]<s;)u+=1;let h=-1;return u<o&&t[u]===s&&(h=In(n[u],e.span.end,Mn)[0]),{touchingLevel:a,touchingLateral:l,touchingEntry:c,stackCnt:d,levelCoord:s,level:u,lateral:h}}toRects(){let{entriesByLevel:e,levelCoords:t}=this,n=e.length,r=[];for(let i=0;i<n;i+=1){let n=e[i],o=t[i];for(let e of n)r.push(Object.assign(Object.assign({},e),{levelCoord:o}))}return r}},t.SimpleScrollGrid=_r,t.Slicer=class{constructor(){this.sliceBusinessHours=_e(this._sliceBusinessHours),this.sliceDateSelection=_e(this._sliceDateSpan),this.sliceEventStore=_e(this._sliceEventStore),this.sliceEventDrag=_e(this._sliceInteraction),this.sliceEventResize=_e(this._sliceInteraction),this.forceDayIfListItem=!1}sliceProps(e,t,n,r,...i){let{eventUiBases:o}=e,s=this.sliceEventStore(e.eventStore,o,t,n,...i);return{dateSelectionSegs:this.sliceDateSelection(e.dateSelection,t,n,o,r,...i),businessHourSegs:this.sliceBusinessHours(e.businessHours,t,n,r,...i),fgEventSegs:s.fg,bgEventSegs:s.bg,eventDrag:this.sliceEventDrag(e.eventDrag,o,t,n,...i),eventResize:this.sliceEventResize(e.eventResize,o,t,n,...i),eventSelection:e.eventSelection}}sliceNowDate(e,t,n,r,...i){return this._sliceDateSpan({range:{start:e,end:ie(e,1)},allDay:!1},t,n,{},r,...i)}_sliceBusinessHours(e,t,n,r,...i){return e?this._sliceEventStore(Ye(e,$n(t,Boolean(n)),r),{},t,n,...i).bg:[]}_sliceEventStore(e,t,n,r,...i){if(e){let o=hn(e,t,$n(n,Boolean(r)),r);return{bg:this.sliceEventRanges(o.bg,i),fg:this.sliceEventRanges(o.fg,i)}}return{bg:[],fg:[]}}_sliceInteraction(e,t,n,r,...i){if(!e)return null;let o=hn(e.mutatedEvents,t,$n(n,Boolean(r)),r);return{segs:this.sliceEventRanges(o.fg,i),affectedInstances:e.affectedEvents.instances,isEvent:e.isEvent}}_sliceDateSpan(e,t,n,r,i,...o){if(!e)return[];let s=$n(t,Boolean(n)),a=Dt(e.range,s);if(a){let t=function(e,t,n){let r=dt({editable:!1},n),i=ht(r.refined,r.extra,"",e.allDay,!0,n);return{def:i,ui:gn(i,t),instance:qe(i.defId,e.range),range:e.range,isStart:!0,isEnd:!0}}(e=Object.assign(Object.assign({},e),{range:a}),r,i),n=this.sliceRange(e.range,...o);for(let e of n)e.eventRange=t;return n}return[]}sliceEventRanges(e,t){let n=[];for(let r of e)n.push(...this.sliceEventRange(r,t));return n}sliceEventRange(e,t){let n=e.range;this.forceDayIfListItem&&"list-item"===e.ui.display&&(n={start:n.start,end:re(n.start,1)});let r=this.sliceRange(n,...t);for(let t of r)t.eventRange=e,t.isStart=e.isStart&&t.isStart,t.isEnd=e.isEnd&&t.isEnd;return r}},t.Splitter=class{constructor(){this.getKeysForEventDefs=_e(this._getKeysForEventDefs),this.splitDateSelection=_e(this._splitDateSpan),this.splitEventStore=_e(this._splitEventStore),this.splitIndividualUi=_e(this._splitIndividualUi),this.splitEventDrag=_e(this._splitInteraction),this.splitEventResize=_e(this._splitInteraction),this.eventUiBuilders={}}splitProps(e){let t=this.getKeyInfo(e),n=this.getKeysForEventDefs(e.eventStore),r=this.splitDateSelection(e.dateSelection),i=this.splitIndividualUi(e.eventUiBases,n),o=this.splitEventStore(e.eventStore,n),s=this.splitEventDrag(e.eventDrag),a=this.splitEventResize(e.eventResize),l={};this.eventUiBuilders=Q(t,((e,t)=>this.eventUiBuilders[t]||_e(_t)));for(let n in t){let c=t[n],d=o[n]||bt,u=this.eventUiBuilders[n];l[n]={businessHours:c.businessHours||e.businessHours,dateSelection:r[n]||null,eventStore:d,eventUiBases:u(e.eventUiBases[""],c.ui,i[n]),eventSelection:d.instances[e.eventSelection]?e.eventSelection:"",eventDrag:s[n]||null,eventResize:a[n]||null}}return l}_splitDateSpan(e){let t={};if(e){let n=this.getKeysForDateSpan(e);for(let r of n)t[r]=e}return t}_getKeysForEventDefs(e){return Q(e.defs,(e=>this.getKeysForEventDef(e)))}_splitEventStore(e,t){let{defs:n,instances:r}=e,i={};for(let e in n)for(let r of t[e])i[r]||(i[r]={defs:{},instances:{}}),i[r].defs[e]=n[e];for(let e in r){let n=r[e];for(let r of t[n.defId])i[r]&&(i[r].instances[e]=n)}return i}_splitIndividualUi(e,t){let n={};for(let r in e)if(r)for(let i of t[r])n[i]||(n[i]={}),n[i][r]=e[r];return n}_splitInteraction(e){let t={};if(e){let n=this._splitEventStore(e.affectedEvents,this._getKeysForEventDefs(e.affectedEvents)),r=this._getKeysForEventDefs(e.mutatedEvents),i=this._splitEventStore(e.mutatedEvents,r),o=r=>{t[r]||(t[r]={affectedEvents:n[r]||bt,mutatedEvents:i[r]||bt,isEvent:e.isEvent})};for(let e in n)o(e);for(let e in i)o(e)}return t}},t.StandardEvent=class extends $t{render(){let{props:e,context:t}=this,{options:n}=t,{seg:i}=e,{ui:o}=i.eventRange,s=bn(i,n.eventTimeFormat||e.defaultTimeFormat,t,e.defaultDisplayEventTime,e.defaultDisplayEventEnd);return r.createElement(Sr,Object.assign({},e,{elTag:"a",elStyle:{borderColor:o.borderColor,backgroundColor:o.backgroundColor},elAttrs:Sn(i,t),defaultGenerator:Ar,timeText:s}),((e,t)=>r.createElement(r.Fragment,null,r.createElement(e,{elTag:"div",elClasses:["fc-event-main"],elStyle:{color:t.textColor}}),Boolean(t.isStartResizable)&&r.createElement("div",{className:"fc-event-resizer fc-event-resizer-start"}),Boolean(t.isEndResizable)&&r.createElement("div",{className:"fc-event-resizer fc-event-resizer-end"}))))}},t.TableDateCell=Gn,t.TableDowCell=Yn,t.Theme=Gt,t.VIEW_OPTION_REFINERS=Ve,t.ViewContainer=class extends $t{render(){let{props:e,context:t}=this,{options:n}=t,i={view:t.viewApi};return r.createElement(Vn,Object.assign({},e,{elTag:e.elTag||"div",elClasses:[...Br(e.viewSpec),...e.elClasses||[]],renderProps:i,classNameGenerator:n.viewClassNames,generatorName:void 0,didMount:n.viewDidMount,willUnmount:n.viewWillUnmount}),(()=>e.children))}},t.ViewContextType=Zt,t.WeekNumberContainer=e=>r.createElement(Zt.Consumer,null,(t=>{let{dateEnv:n,options:i}=t,{date:o}=e,s=i.weekNumberFormat||e.defaultFormat,a={num:n.computeWeekNumber(o),text:n.format(o,s),date:o};return r.createElement(Vn,Object.assign({},e,{renderProps:a,generatorName:"weekNumberContent",customGenerator:i.weekNumberContent,defaultGenerator:Mr,classNameGenerator:i.weekNumberClassNames,didMount:i.weekNumberDidMount,willUnmount:i.weekNumberWillUnmount}))})),t.WindowScrollController=class extends Wt{getScrollTop(){return window.pageYOffset}getScrollLeft(){return window.pageXOffset}setScrollTop(e){window.scroll(window.pageXOffset,e)}setScrollLeft(e){window.scroll(e,window.pageYOffset)}getScrollWidth(){return document.documentElement.scrollWidth}getScrollHeight(){return document.documentElement.scrollHeight}getClientHeight(){return document.documentElement.clientHeight}getClientWidth(){return document.documentElement.clientWidth}},t.addDays=re,t.addDurations=function(e,t){return{years:e.years+t.years,months:e.months+t.months,days:e.days+t.days,milliseconds:e.milliseconds+t.milliseconds}},t.addMs=ie,t.addWeeks=function(e,t){let n=pe(e);return n[2]+=7*t,ge(n)},t.allowContextMenu=function(e){e.removeEventListener("contextmenu",A)},t.allowSelection=function(e){e.style.userSelect="",e.removeEventListener("selectstart",A)},t.applyMutationToEventStore=on,t.applyStyle=y,t.applyStyleProp=E,t.arrayToHash=function(e){let t={};for(let n of e)t[n]=!0;return t},t.asCleanDays=function(e){return e.years||e.months||e.milliseconds?0:e.days},t.asRoughMinutes=function(e){return V(e)/6e4},t.asRoughMs=V,t.asRoughSeconds=function(e){return V(e)/1e3},t.binarySearch=In,t.buildElAttrs=Un,t.buildEntryKey=On,t.buildEventApis=un,t.buildEventRangeKey=function(e){return e.instance?e.instance.instanceId:`${e.def.defId}:${e.range.start.toISOString()}`},t.buildEventSourceRefiners=Ur,t.buildIsoString=ye,t.buildNavLinkAttrs=It,t.buildRangeApiWithTimeZone=function(e,t,n){return Object.assign(Object.assign({},Dn(e,t,n)),{timeZone:t.timeZone})},t.buildSegTimeText=bn,t.buildViewClassNames=Br,t.buildViewContext=function(e,t,n,r,i,o,s,a,l,c,d,u,h){return{dateEnv:i,options:n,pluginHooks:s,emitter:c,dispatch:a,getCurrentData:l,calendarApi:d,viewSpec:e,viewApi:t,dateProfileGenerator:r,theme:o,isRtl:"rtl"===n.direction,addResizeHandler(e){c.on("_resize",e)},removeResizeHandler(e){c.off("_resize",e)},createScrollResponder:e=>new Qt(e,c,U(n.scrollTime),n.scrollTimeReset),registerInteractiveComponent:u,unregisterInteractiveComponent:h}},t.collectFromHash=ee,t.combineEventUis=it,t.compareByFieldSpecs=x,t.compareNumbers=function(e,t){return e-t},t.compareObjs=K,t.computeEarliestSegStart=Nr,t.computeEdges=Lt,t.computeFallbackHeaderFormat=Pn,t.computeInnerRect=function(e,t=!1,n){let r=n?e.getBoundingClientRect():Ut(e),i=Lt(e,t),o={left:r.left+i.borderLeft+i.scrollbarLeft,right:r.right-i.borderRight-i.scrollbarRight,top:r.top+i.borderTop,bottom:r.bottom-i.borderBottom-i.scrollbarBottom};return t&&(o.left+=i.paddingLeft,o.right-=i.paddingRight,o.top+=i.paddingTop,o.bottom-=i.paddingBottom),o},t.computeRect=Ut,t.computeShrinkWidth=ur,t.computeVisibleDayRange=gt,t.config={},t.constrainPoint=function(e,t){return{left:Math.min(Math.max(e.left,t.left),t.right),top:Math.min(Math.max(e.top,t.top),t.bottom)}},t.createContext=Yt,t.createDuration=U,t.createEmptyEventStore=function(){return{defs:{},instances:{}}},t.createEventInstance=qe,t.createEventUi=rt,t.createFormatter=He,t.diffDates=mt,t.diffDayAndTime=se,t.diffDays=oe,t.diffPoints=function(e,t){return{left:e.left-t.left,top:e.top-t.top}},t.diffWeeks=function(e,t){return oe(e,t)/7},t.diffWholeDays=le,t.diffWholeWeeks=ae,t.disableCursor=function(){document.body.classList.add("fc-not-allowed")},t.elementClosest=p,t.elementMatches=g,t.enableCursor=function(){document.body.classList.remove("fc-not-allowed")},t.ensureElHasStyles=function(e){e.isConnected&&d(e.getRootNode())},t.eventTupleToStore=Xe,t.filterHash=Y,t.findDirectChildren=function(e,t){let n=e instanceof HTMLElement?[e]:e,r=[];for(let e=0;e<n.length;e+=1){let i=n[e].children;for(let e=0;e<i.length;e+=1){let n=i[e];t&&!g(n,t)||r.push(n)}}return r},t.findElements=m,t.flexibleCompare=I,t.flushSync=function(e){e();let t=s.options.debounceRendering,n=[];for(s.options.debounceRendering=function(e){n.push(e)},s.render(s.createElement(qt,{}),document.createElement("div"));n.length;)n.shift()();s.options.debounceRendering=t},t.formatDayString=Ee,t.formatIsoMonthStr=function(e){return e.toISOString().match(/^\d{4}-\d{2}/)[0]},t.formatIsoTimeString=function(e){return N(e.getUTCHours(),2)+":"+N(e.getUTCMinutes(),2)+":"+N(e.getUTCSeconds(),2)},t.formatWithOrdinals=P,t.getAllowYScrolling=fr,t.getCanVGrowWithinCell=Et,t.getClippingParents=Ft,t.getDateMeta=Mt,t.getDayClassNames=Ot,t.getDefaultEventEnd=rn,t.getElSeg=function(e){return e.fcSeg||e.parentNode.fcSeg||null},t.getEntrySpanEnd=Mn,t.getEventTargetViaRoot=b,t.getInitialDate=function(e,t){let n=e.initialDate;return null!=n?t.createMarker(n):en(e.now,t)},t.getIsRtlScrollbarOnLeft=Ht,t.getNow=en,t.getRectCenter=function(e){return{left:(e.left+e.right)/2,top:(e.top+e.bottom)/2}},t.getRelevantEvents=$e,t.getScrollGridClassNames=Er,t.getScrollbarWidths=Bt,t.getSectionClassNames=br,t.getSectionHasLiquidHeight=hr,t.getSegAnchorAttrs=Sn,t.getSegMeta=function(e,t,n){let r=e.eventRange.range;return{isPast:r.end<(n||t.start),isFuture:r.start>=(n||t.end),isToday:t&&Tt(t,r.start)}},t.getSlotClassNames=function(e,t){let n=["fc-slot",`fc-slot-${ne[e.dow]}`];return e.isDisabled?n.push("fc-slot-disabled"):(e.isToday&&(n.push("fc-slot-today"),n.push(t.getClass("today"))),e.isPast&&n.push("fc-slot-past"),e.isFuture&&n.push("fc-slot-future")),n},t.getStickyFooterScrollbar=function(e){let{stickyFooterScrollbar:t}=e;return null!=t&&"auto"!==t||(t="auto"===e.height||"auto"===e.viewHeight),t},t.getStickyHeaderDates=function(e){let{stickyHeaderDates:t}=e;return null!=t&&"auto"!==t||(t="auto"===e.height||"auto"===e.viewHeight),t},t.getUniqueDomId=S,t.greatestDurationDenominator=W,t.groupIntersectingEntries=function(e){let t=[];for(let i of e){let e=[],o={span:i.span,entries:[i]};for(let i of t)xn(i.span,o.span)?o={entries:i.entries.concat(o.entries),span:(n=i.span,r=o.span,{start:Math.min(n.start,r.start),end:Math.max(n.end,r.end)})}:e.push(i);e.push(o),t=e}var n,r;return t},t.guid=M,t.hasBgRendering=function(e){return"background"===e.ui.display||"inverse-background"===e.ui.display},t.hasCustomDayCellContent=wr,t.hasShrinkWidth=yr,t.hashValuesToArray=Z,t.identity=Ge,t.injectStyles=c,t.interactionSettingsStore={},t.interactionSettingsToStore=function(e){return{[e.component.uid]:e}},t.intersectRanges=Dt,t.intersectRects=vt,t.intersectSpans=xn,t.isArraysEqual=te,t.isColPropsEqual=gr,t.isDateSelectionValid=function(e,t,n){return!!Rt(t.validRange,e.range)&&tr({dateSelection:e},n)},t.isDateSpansEqual=function(e,t){return Ct(e.range,t.range)&&e.allDay===t.allDay&&function(e,t){for(let n in t)if("range"!==n&&"allDay"!==n&&e[n]!==t[n])return!1;for(let n in e)if(!(n in t))return!1;return!0}(e,t)},t.isInt=H,t.isInteractionValid=function(e,t,n){let{instances:r}=e.mutatedEvents;for(let e in r)if(!Rt(t.validRange,r[e].range))return!1;return tr({eventDrag:e},n)},t.isMultiDayRange=function(e){let t=gt(e);return oe(t.start,t.end)>1},t.isPropsEqual=X,t.isPropsValid=nr,t.isValidDate=me,t.listenBySelector=D,t.listenToHoverBySelector=function(e,t,n,r){let i;return D(e,"mouseover",t,((e,t)=>{if(t!==i){i=t,n(e,t);let o=e=>{i=null,r(e,t),t.removeEventListener("mouseleave",o)};t.addEventListener("mouseleave",o)}}))},t.mapHash=Q,t.memoize=_e,t.memoizeArraylike=function(e,t,n){let r=[],i=[];return o=>{let s=r.length,a=o.length,l=0;for(;l<s;l+=1)if(o[l]){if(!te(r[l],o[l])){n&&n(i[l]);let r=e.apply(this,o[l]);t&&t(r,i[l])||(i[l]=r)}}else n&&n(i[l]);for(;l<a;l+=1)i[l]=e.apply(this,o[l]);return r=o,i.splice(a),i}},t.memoizeHashlike=function(e,t,n){let r={},i={};return o=>{let s={};for(let a in o)if(i[a])if(te(r[a],o[a]))s[a]=i[a];else{n&&n(i[a]);let r=e.apply(this,o[a]);s[a]=t&&t(r,i[a])?i[a]:r}else s[a]=e.apply(this,o[a]);return r=o,i=s,s}},t.memoizeObjArg=Se,t.mergeEventStores=Je,t.mergeProps=q,t.mergeRawOptions=function(e){return q(e,Ue)},t.multiplyDuration=function(e,t){return{years:e.years*t,months:e.months*t,days:e.days*t,milliseconds:e.milliseconds*t}},t.padStart=N,t.parse=Tn,t.parseBusinessHours=function(e,t){return Ze(function(e){let t;return t=!0===e?[{}]:Array.isArray(e)?e.filter((e=>e.daysOfWeek)):"object"==typeof e&&e?[e]:[],t=t.map((e=>Object.assign(Object.assign({},ft),e))),t}(e),null,t)},t.parseClassNames=et,t.parseDragMeta=function(e){let{refined:t,extra:n}=We(e,Nn);return{startTime:t.startTime||null,duration:t.duration||null,create:null==t.create||t.create,sourceId:t.sourceId,leftoverProps:n}},t.parseEventDef=ht,t.parseEventSource=Lr,t.parseFieldSpecs=O,t.parseInteractionSettings=function(e,t){return{component:e,el:t.el,useEventCenter:null==t.useEventCenter||t.useEventCenter,isHitComboAllowed:t.isHitComboAllowed||null}},t.pointInsideRect=function(e,t){return e.left>=t.left&&e.left<t.right&&e.top>=t.top&&e.top<t.bottom},t.preventContextMenu=function(e){e.addEventListener("contextmenu",A)},t.preventDefault=A,t.preventSelection=function(e){e.style.userSelect="none",e.addEventListener("selectstart",A)},t.rangeContainsMarker=Tt,t.rangeContainsRange=Rt,t.rangesEqual=Ct,t.rangesIntersect=wt,t.reduceCurrentDate=function(e,t){return"CHANGE_DATE"===t.type?t.dateMarker:e},t.reduceEventStore=function(e,t,n,r,i){switch(t.type){case"RECEIVE_EVENTS":return function(e,t,n,r,i,o){if(t&&n===t.latestFetchId){let n=Ze(Jn(i,t,o),t,o);return r&&(n=Ye(n,r,o)),Je(er(e,t.sourceId),n)}return e}(e,n[t.sourceId],t.fetchId,t.fetchRange,t.rawEvents,i);case"RESET_RAW_EVENTS":return function(e,t,n,r,i){const{defIdMap:o,instanceIdMap:s}=function(e){const{defs:t,instances:n}=e,r={},i={};for(let e in t){const n=t[e],{publicId:i}=n;i&&(r[i]=e)}for(let e in n){const r=t[n[e].defId],{publicId:o}=r;o&&(i[o]=e)}return{defIdMap:r,instanceIdMap:i}}(e);return Ye(Ze(Jn(n,t,i),t,i,!1,o,s),r,i)}(e,n[t.sourceId],t.rawEvents,r.activeRange,i);case"ADD_EVENTS":return function(e,t,n,r){return n&&(t=Ye(t,n,r)),Je(e,t)}(e,t.eventStore,r?r.activeRange:null,i);case"RESET_EVENTS":return t.eventStore;case"MERGE_EVENTS":return Je(e,t.eventStore);case"PREV":case"NEXT":case"CHANGE_DATE":case"CHANGE_VIEW_TYPE":return r?Ye(e,r.activeRange,i):e;case"REMOVE_EVENTS":return function(e,t){let{defs:n,instances:r}=e,i={},o={};for(let e in n)t.defs[e]||(i[e]=n[e]);for(let e in r)!t.instances[e]&&i[r[e].defId]&&(o[e]=r[e]);return{defs:i,instances:o}}(e,t.eventStore);case"REMOVE_EVENT_SOURCE":return er(e,t.sourceId);case"REMOVE_ALL_EVENT_SOURCES":return Ke(e,(e=>!e.sourceId));case"REMOVE_ALL_EVENTS":return{defs:{},instances:{}};default:return e}},t.refineEventDef=dt,t.refineProps=We,t.removeElement=f,t.removeExact=function(e,t){let n=0,r=0;for(;r<e.length;)e[r]===t?(e.splice(r,1),n+=1):r+=1;return n},t.renderChunkContent=pr,t.renderFill=function(e){return r.createElement("div",{className:`fc-${e}`})},t.renderMicroColGroup=mr,t.renderScrollShim=function(e){return r.createElement("div",{className:"fc-scrollgrid-sticky-shim",style:{width:e.clientWidth,minWidth:e.tableMinWidth}})},t.requestJson=function(e,t,n){const r={method:e=e.toUpperCase()};return"GET"===e?t+=(-1===t.indexOf("?")?"?":"&")+new URLSearchParams(n):(r.body=new URLSearchParams(n),r.headers={"Content-Type":"application/x-www-form-urlencoded"}),fetch(t,r).then((e=>{if(e.ok)return e.json().then((t=>[t,e]),(()=>{throw new ar("Failure parsing JSON",e)}));throw new ar("Request failed",e)}))},t.rezoneEventStoreDates=function(e,t,n){let{defs:r}=e,i=Q(e.instances,(e=>r[e.defId].allDay?e:Object.assign(Object.assign({},e),{range:{start:n.createMarker(t.toDate(e.range.start,e.forcedStartTzo)),end:n.createMarker(t.toDate(e.range.end,e.forcedEndTzo))},forcedStartTzo:n.canComputeOffset?null:e.forcedStartTzo,forcedEndTzo:n.canComputeOffset?null:e.forcedEndTzo})));return{defs:r,instances:i}},t.sanitizeShrinkWidth=vr,t.setRef=Jt,t.sliceEventStore=hn,t.sortEventSegs=function(e,t){let n=e.map(mn);return n.sort(((e,n)=>x(e,n,t))),n.map((e=>e._seg))},t.startOfDay=ce,t.subtractDurations=function(e,t){return{years:e.years-t.years,months:e.months-t.months,days:e.days-t.days,milliseconds:e.milliseconds-t.milliseconds}},t.translateRect=function(e,t,n){return{left:e.left+t,right:e.right+t,top:e.top+n,bottom:e.bottom+n}},t.triggerDateSelect=tn,t.unpromisify=function(e,t,n){let r=!1,i=function(e){r||(r=!0,t(e))},o=function(e){r||(r=!0,n(e))},s=e(i,o);s&&"function"==typeof s.then&&s.then(i,o)},t.whenTransitionDone=function(e,t){let n=r=>{t(r),C.forEach((t=>{e.removeEventListener(t,n)}))};C.forEach((t=>{e.addEventListener(t,n)}))},t.wholeDivideDurations=function(e,t){let n=null;for(let r=0;r<j.length;r+=1){let i=j[r];if(t[i]){let r=e[i]/t[i];if(!H(r)||null!==n&&n!==r)return null;n=r}else if(e[i])return null}return n}},368:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(873);n(400),n(748),t.BASE_OPTION_DEFAULTS=r.BASE_OPTION_DEFAULTS,t.BaseComponent=r.BaseComponent,t.BgEvent=r.BgEvent,t.CalendarImpl=r.CalendarImpl,t.CalendarRoot=r.CalendarRoot,t.ContentContainer=r.ContentContainer,t.CustomRenderingStore=r.CustomRenderingStore,t.DateComponent=r.DateComponent,t.DateEnv=r.DateEnv,t.DateProfileGenerator=r.DateProfileGenerator,t.DayCellContainer=r.DayCellContainer,t.DayHeader=r.DayHeader,t.DaySeriesModel=r.DaySeriesModel,t.DayTableModel=r.DayTableModel,t.DelayedRunner=r.DelayedRunner,t.ElementDragging=r.ElementDragging,t.ElementScrollController=r.ElementScrollController,t.Emitter=r.Emitter,t.EventContainer=r.EventContainer,t.EventImpl=r.EventImpl,t.Interaction=r.Interaction,t.MoreLinkContainer=r.MoreLinkContainer,t.NamedTimeZoneImpl=r.NamedTimeZoneImpl,t.NowIndicatorContainer=r.NowIndicatorContainer,t.NowTimer=r.NowTimer,t.PositionCache=r.PositionCache,t.RefMap=r.RefMap,t.ScrollController=r.ScrollController,t.ScrollResponder=r.ScrollResponder,t.Scroller=r.Scroller,t.SegHierarchy=r.SegHierarchy,t.SimpleScrollGrid=r.SimpleScrollGrid,t.Slicer=r.Slicer,t.Splitter=r.Splitter,t.StandardEvent=r.StandardEvent,t.TableDateCell=r.TableDateCell,t.TableDowCell=r.TableDowCell,t.Theme=r.Theme,t.ViewContainer=r.ViewContainer,t.ViewContextType=r.ViewContextType,t.WeekNumberContainer=r.WeekNumberContainer,t.WindowScrollController=r.WindowScrollController,t.addDays=r.addDays,t.addDurations=r.addDurations,t.addMs=r.addMs,t.addWeeks=r.addWeeks,t.allowContextMenu=r.allowContextMenu,t.allowSelection=r.allowSelection,t.applyMutationToEventStore=r.applyMutationToEventStore,t.applyStyle=r.applyStyle,t.asCleanDays=r.asCleanDays,t.asRoughMinutes=r.asRoughMinutes,t.asRoughMs=r.asRoughMs,t.asRoughSeconds=r.asRoughSeconds,t.binarySearch=r.binarySearch,t.buildElAttrs=r.buildElAttrs,t.buildEntryKey=r.buildEntryKey,t.buildEventApis=r.buildEventApis,t.buildEventRangeKey=r.buildEventRangeKey,t.buildIsoString=r.buildIsoString,t.buildNavLinkAttrs=r.buildNavLinkAttrs,t.buildSegTimeText=r.buildSegTimeText,t.collectFromHash=r.collectFromHash,t.combineEventUis=r.combineEventUis,t.compareByFieldSpecs=r.compareByFieldSpecs,t.compareNumbers=r.compareNumbers,t.compareObjs=r.compareObjs,t.computeEarliestSegStart=r.computeEarliestSegStart,t.computeEdges=r.computeEdges,t.computeFallbackHeaderFormat=r.computeFallbackHeaderFormat,t.computeInnerRect=r.computeInnerRect,t.computeRect=r.computeRect,t.computeShrinkWidth=r.computeShrinkWidth,t.computeVisibleDayRange=r.computeVisibleDayRange,t.config=r.config,t.constrainPoint=r.constrainPoint,t.createDuration=r.createDuration,t.createEmptyEventStore=r.createEmptyEventStore,t.createEventInstance=r.createEventInstance,t.createEventUi=r.createEventUi,t.createFormatter=r.createFormatter,t.diffDates=r.diffDates,t.diffDayAndTime=r.diffDayAndTime,t.diffDays=r.diffDays,t.diffPoints=r.diffPoints,t.diffWeeks=r.diffWeeks,t.diffWholeDays=r.diffWholeDays,t.diffWholeWeeks=r.diffWholeWeeks,t.disableCursor=r.disableCursor,t.elementClosest=r.elementClosest,t.elementMatches=r.elementMatches,t.enableCursor=r.enableCursor,t.eventTupleToStore=r.eventTupleToStore,t.filterHash=r.filterHash,t.findDirectChildren=r.findDirectChildren,t.findElements=r.findElements,t.flexibleCompare=r.flexibleCompare,t.formatDayString=r.formatDayString,t.formatIsoMonthStr=r.formatIsoMonthStr,t.formatIsoTimeString=r.formatIsoTimeString,t.getAllowYScrolling=r.getAllowYScrolling,t.getCanVGrowWithinCell=r.getCanVGrowWithinCell,t.getClippingParents=r.getClippingParents,t.getDateMeta=r.getDateMeta,t.getDayClassNames=r.getDayClassNames,t.getDefaultEventEnd=r.getDefaultEventEnd,t.getElSeg=r.getElSeg,t.getEntrySpanEnd=r.getEntrySpanEnd,t.getEventTargetViaRoot=r.getEventTargetViaRoot,t.getIsRtlScrollbarOnLeft=r.getIsRtlScrollbarOnLeft,t.getRectCenter=r.getRectCenter,t.getRelevantEvents=r.getRelevantEvents,t.getScrollGridClassNames=r.getScrollGridClassNames,t.getScrollbarWidths=r.getScrollbarWidths,t.getSectionClassNames=r.getSectionClassNames,t.getSectionHasLiquidHeight=r.getSectionHasLiquidHeight,t.getSegAnchorAttrs=r.getSegAnchorAttrs,t.getSegMeta=r.getSegMeta,t.getSlotClassNames=r.getSlotClassNames,t.getStickyFooterScrollbar=r.getStickyFooterScrollbar,t.getStickyHeaderDates=r.getStickyHeaderDates,t.getUniqueDomId=r.getUniqueDomId,t.greatestDurationDenominator=r.greatestDurationDenominator,t.groupIntersectingEntries=r.groupIntersectingEntries,t.guid=r.guid,t.hasBgRendering=r.hasBgRendering,t.hasCustomDayCellContent=r.hasCustomDayCellContent,t.hasShrinkWidth=r.hasShrinkWidth,t.identity=r.identity,t.injectStyles=r.injectStyles,t.interactionSettingsStore=r.interactionSettingsStore,t.interactionSettingsToStore=r.interactionSettingsToStore,t.intersectRanges=r.intersectRanges,t.intersectRects=r.intersectRects,t.intersectSpans=r.intersectSpans,t.isArraysEqual=r.isArraysEqual,t.isColPropsEqual=r.isColPropsEqual,t.isDateSelectionValid=r.isDateSelectionValid,t.isDateSpansEqual=r.isDateSpansEqual,t.isInt=r.isInt,t.isInteractionValid=r.isInteractionValid,t.isMultiDayRange=r.isMultiDayRange,t.isPropsEqual=r.isPropsEqual,t.isPropsValid=r.isPropsValid,t.isValidDate=r.isValidDate,t.mapHash=r.mapHash,t.memoize=r.memoize,t.memoizeArraylike=r.memoizeArraylike,t.memoizeHashlike=r.memoizeHashlike,t.memoizeObjArg=r.memoizeObjArg,t.mergeEventStores=r.mergeEventStores,t.multiplyDuration=r.multiplyDuration,t.padStart=r.padStart,t.parseBusinessHours=r.parseBusinessHours,t.parseClassNames=r.parseClassNames,t.parseDragMeta=r.parseDragMeta,t.parseEventDef=r.parseEventDef,t.parseFieldSpecs=r.parseFieldSpecs,t.parseMarker=r.parse,t.pointInsideRect=r.pointInsideRect,t.preventContextMenu=r.preventContextMenu,t.preventDefault=r.preventDefault,t.preventSelection=r.preventSelection,t.rangeContainsMarker=r.rangeContainsMarker,t.rangeContainsRange=r.rangeContainsRange,t.rangesEqual=r.rangesEqual,t.rangesIntersect=r.rangesIntersect,t.refineEventDef=r.refineEventDef,t.refineProps=r.refineProps,t.removeElement=r.removeElement,t.removeExact=r.removeExact,t.renderChunkContent=r.renderChunkContent,t.renderFill=r.renderFill,t.renderMicroColGroup=r.renderMicroColGroup,t.renderScrollShim=r.renderScrollShim,t.requestJson=r.requestJson,t.sanitizeShrinkWidth=r.sanitizeShrinkWidth,t.setRef=r.setRef,t.sliceEventStore=r.sliceEventStore,t.sortEventSegs=r.sortEventSegs,t.startOfDay=r.startOfDay,t.translateRect=r.translateRect,t.triggerDateSelect=r.triggerDateSelect,t.unpromisify=r.unpromisify,t.whenTransitionDone=r.whenTransitionDone,t.wholeDivideDurations=r.wholeDivideDurations},170:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(400),i=n(748),o=n(873);Object.defineProperty(t,"createPortal",{enumerable:!0,get:function(){return i.createPortal}}),t.createContext=o.createContext,t.flushSync=o.flushSync,Object.keys(r).forEach((function(e){"default"===e||t.hasOwnProperty(e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}))},610:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(553),i=n(957);n(368),n(170);var o=r.createPlugin({name:"@fullcalendar/daygrid",initialView:"dayGridMonth",views:{dayGrid:{component:i.DayGridView,dateProfileGeneratorClass:i.TableDateProfileGenerator},dayGridDay:{type:"dayGrid",duration:{days:1}},dayGridWeek:{type:"dayGrid",duration:{weeks:1}},dayGridMonth:{type:"dayGrid",duration:{months:1},fixedWeekCount:!0},dayGridYear:{type:"dayGrid",duration:{years:1}}}});t.default=o},957:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(368),i=n(170);function o(e,t){let n=[];for(let e=0;e<t;e+=1)n[e]=[];for(let t of e)n[t.row].push(t);return n}function s(e,t){let n=[];for(let e=0;e<t;e+=1)n[e]=[];for(let t of e)n[t.firstCol].push(t);return n}function a(e,t){let n=[];if(e){for(let r=0;r<t;r+=1)n[r]={affectedInstances:e.affectedInstances,isEvent:e.isEvent,segs:[]};for(let t of e.segs)n[t.row].segs.push(t)}else for(let e=0;e<t;e+=1)n[e]=null;return n}r.injectStyles(':root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:"";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:"";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}');const l=r.createFormatter({hour:"numeric",minute:"2-digit",omitZeroMinute:!0,meridiem:"narrow"});function c(e){let{display:t}=e.eventRange.ui;return"list-item"===t||"auto"===t&&!e.eventRange.def.allDay&&e.firstCol===e.lastCol&&e.isStart&&e.isEnd}class d extends r.BaseComponent{render(){let{props:e}=this;return i.createElement(r.StandardEvent,Object.assign({},e,{elClasses:["fc-daygrid-event","fc-daygrid-block-event","fc-h-event"],defaultTimeFormat:l,defaultDisplayEventEnd:e.defaultDisplayEventEnd,disableResizing:!e.seg.eventRange.def.allDay}))}}class u extends r.BaseComponent{render(){let{props:e,context:t}=this,{options:n}=t,{seg:o}=e,s=n.eventTimeFormat||l,a=r.buildSegTimeText(o,s,t,!0,e.defaultDisplayEventEnd);return i.createElement(r.EventContainer,Object.assign({},e,{elTag:"a",elClasses:["fc-daygrid-event","fc-daygrid-dot-event"],elAttrs:r.getSegAnchorAttrs(e.seg,t),defaultGenerator:h,timeText:a,isResizing:!1,isDateSelecting:!1}))}}function h(e){return i.createElement(i.Fragment,null,i.createElement("div",{className:"fc-daygrid-event-dot",style:{borderColor:e.borderColor||e.backgroundColor}}),e.timeText&&i.createElement("div",{className:"fc-event-time"},e.timeText),i.createElement("div",{className:"fc-event-title"},e.event.title||i.createElement(i.Fragment,null," ")))}class f extends r.BaseComponent{constructor(){super(...arguments),this.compileSegs=r.memoize(p)}render(){let{props:e}=this,{allSegs:t,invisibleSegs:n}=this.compileSegs(e.singlePlacements);return i.createElement(r.MoreLinkContainer,{elClasses:["fc-daygrid-more-link"],dateProfile:e.dateProfile,todayRange:e.todayRange,allDayDate:e.allDayDate,moreCnt:e.moreCnt,allSegs:t,hiddenSegs:n,alignmentElRef:e.alignmentElRef,alignGridTop:e.alignGridTop,extraDateSpan:e.extraDateSpan,popoverContent:()=>{let n=(e.eventDrag?e.eventDrag.affectedInstances:null)||(e.eventResize?e.eventResize.affectedInstances:null)||{};return i.createElement(i.Fragment,null,t.map((t=>{let o=t.eventRange.instance.instanceId;return i.createElement("div",{className:"fc-daygrid-event-harness",key:o,style:{visibility:n[o]?"hidden":""}},c(t)?i.createElement(u,Object.assign({seg:t,isDragging:!1,isSelected:o===e.eventSelection,defaultDisplayEventEnd:!1},r.getSegMeta(t,e.todayRange))):i.createElement(d,Object.assign({seg:t,isDragging:!1,isResizing:!1,isDateSelecting:!1,isSelected:o===e.eventSelection,defaultDisplayEventEnd:!1},r.getSegMeta(t,e.todayRange))))})))}})}}function p(e){let t=[],n=[];for(let r of e)t.push(r.seg),r.isVisible||n.push(r.seg);return{allSegs:t,invisibleSegs:n}}const g=r.createFormatter({week:"narrow"});class m extends r.DateComponent{constructor(){super(...arguments),this.rootElRef=i.createRef(),this.state={dayNumberId:r.getUniqueDomId()},this.handleRootEl=e=>{r.setRef(this.rootElRef,e),r.setRef(this.props.elRef,e)}}render(){let{context:e,props:t,state:n,rootElRef:o}=this,{options:s,dateEnv:a}=e,{date:l,dateProfile:c}=t;const d=t.showDayNumber&&function(e,t,n){const{start:i,end:o}=t,s=r.addMs(o,-1),a=n.getYear(i),l=n.getMonth(i),c=n.getYear(s),d=n.getMonth(s);return!(a===c&&l===d)&&Boolean(e.valueOf()===i.valueOf()||1===n.getDay(e)&&e.valueOf()<o.valueOf())}(l,c.currentRange,a);return i.createElement(r.DayCellContainer,{elTag:"td",elRef:this.handleRootEl,elClasses:["fc-daygrid-day",...t.extraClassNames||[]],elAttrs:Object.assign(Object.assign(Object.assign({},t.extraDataAttrs),t.showDayNumber?{"aria-labelledby":n.dayNumberId}:{}),{role:"gridcell"}),defaultGenerator:v,date:l,dateProfile:c,todayRange:t.todayRange,showDayNumber:t.showDayNumber,isMonthStart:d,extraRenderProps:t.extraRenderProps},((a,c)=>i.createElement("div",{ref:t.innerElRef,className:"fc-daygrid-day-frame fc-scrollgrid-sync-inner",style:{minHeight:t.minHeight}},t.showWeekNumber&&i.createElement(r.WeekNumberContainer,{elTag:"a",elClasses:["fc-daygrid-week-number"],elAttrs:r.buildNavLinkAttrs(e,l,"week"),date:l,defaultFormat:g}),!c.isDisabled&&(t.showDayNumber||r.hasCustomDayCellContent(s)||t.forceDayTop)?i.createElement("div",{className:"fc-daygrid-day-top"},i.createElement(a,{elTag:"a",elClasses:["fc-daygrid-day-number",d&&"fc-daygrid-month-start"],elAttrs:Object.assign(Object.assign({},r.buildNavLinkAttrs(e,l)),{id:n.dayNumberId})})):t.showDayNumber?i.createElement("div",{className:"fc-daygrid-day-top",style:{visibility:"hidden"}},i.createElement("a",{className:"fc-daygrid-day-number"}," ")):void 0,i.createElement("div",{className:"fc-daygrid-day-events",ref:t.fgContentElRef},t.fgContent,i.createElement("div",{className:"fc-daygrid-day-bottom",style:{marginTop:t.moreMarginTop}},i.createElement(f,{allDayDate:l,singlePlacements:t.singlePlacements,moreCnt:t.moreCnt,alignmentElRef:o,alignGridTop:!t.showDayNumber,extraDateSpan:t.extraDateSpan,dateProfile:t.dateProfile,eventSelection:t.eventSelection,eventDrag:t.eventDrag,eventResize:t.eventResize,todayRange:t.todayRange}))),i.createElement("div",{className:"fc-daygrid-day-bg"},t.bgContent))))}}function v(e){return e.dayNumberText||i.createElement(i.Fragment,null," ")}function y(e,t,n,i){if(e.firstCol===t&&e.lastCol===n-1)return e;let o=e.eventRange,s=o.range,a=r.intersectRanges(s,{start:i[t].date,end:r.addDays(i[n-1].date,1)});return Object.assign(Object.assign({},e),{firstCol:t,lastCol:n-1,eventRange:{def:o.def,ui:Object.assign(Object.assign({},o.ui),{durationEditable:!1}),instance:o.instance,range:a},isStart:e.isStart&&a.start.valueOf()===s.start.valueOf(),isEnd:e.isEnd&&a.end.valueOf()===s.end.valueOf()})}class E extends r.SegHierarchy{constructor(){super(...arguments),this.hiddenConsumes=!1,this.forceHidden={}}addSegs(e){const t=super.addSegs(e),{entriesByLevel:n}=this,i=e=>!this.forceHidden[r.buildEntryKey(e)];for(let e=0;e<n.length;e+=1)n[e]=n[e].filter(i);return t}handleInvalidInsertion(e,t,n){const{entriesByLevel:i,forceHidden:o}=this,{touchingEntry:s,touchingLevel:a,touchingLateral:l}=e;if(this.hiddenConsumes&&s){const e=r.buildEntryKey(s);if(!o[e])if(this.allowReslicing){const e=Object.assign(Object.assign({},s),{span:r.intersectSpans(s.span,t.span)});o[r.buildEntryKey(e)]=!0,i[a][l]=e,this.splitEntry(s,t,n)}else o[e]=!0,n.push(s)}return super.handleInvalidInsertion(e,t,n)}}class b extends r.DateComponent{constructor(){super(...arguments),this.cellElRefs=new r.RefMap,this.frameElRefs=new r.RefMap,this.fgElRefs=new r.RefMap,this.segHarnessRefs=new r.RefMap,this.rootElRef=i.createRef(),this.state={framePositions:null,maxContentHeight:null,eventInstanceHeights:{}},this.handleResize=e=>{e&&this.updateSizing(!0)}}render(){let{props:e,state:t,context:n}=this,{options:o}=n,a=e.cells.length,l=s(e.businessHourSegs,a),c=s(e.bgEventSegs,a),d=s(this.getHighlightSegs(),a),u=s(this.getMirrorSegs(),a),{singleColPlacements:h,multiColPlacements:f,moreCnts:p,moreMarginTops:g}=function(e,t,n,r,i,o,s){let a=new E;a.allowReslicing=!0,a.strictOrder=r,!0===t||!0===n?(a.maxCoord=o,a.hiddenConsumes=!0):"number"==typeof t?a.maxStackCnt=t:"number"==typeof n&&(a.maxStackCnt=n,a.hiddenConsumes=!0);let l=[],c=[];for(let t=0;t<e.length;t+=1){let n=e[t],{instanceId:r}=n.eventRange.instance,o=i[r];null!=o?l.push({index:t,thickness:o,span:{start:n.firstCol,end:n.lastCol+1}}):c.push(n)}let d=a.addSegs(l),u=a.toRects(),{singleColPlacements:h,multiColPlacements:f,leftoverMargins:p}=function(e,t,n){let r=function(e,t){let n=[];for(let e=0;e<t;e+=1)n.push([]);for(let t of e)for(let e=t.span.start;e<t.span.end;e+=1)n[e].push(t);return n}(e,n.length),i=[],o=[],s=[];for(let e=0;e<n.length;e+=1){let a=r[e],l=[],c=0,d=0;for(let r of a){let i=t[r.index];l.push({seg:y(i,e,e+1,n),isVisible:!0,isAbsolute:!1,absoluteTop:r.levelCoord,marginTop:r.levelCoord-c}),c=r.levelCoord+r.thickness}let u=[];c=0,d=0;for(let r of a){let i=t[r.index],o=r.span.end-r.span.start>1,s=r.span.start===e;d+=r.levelCoord-c,c=r.levelCoord+r.thickness,o?(d+=r.thickness,s&&u.push({seg:y(i,r.span.start,r.span.end,n),isVisible:!0,isAbsolute:!0,absoluteTop:r.levelCoord,marginTop:0})):s&&(u.push({seg:y(i,r.span.start,r.span.end,n),isVisible:!0,isAbsolute:!1,absoluteTop:r.levelCoord,marginTop:d}),d=0)}i.push(l),o.push(u),s.push(d)}return{singleColPlacements:i,multiColPlacements:o,leftoverMargins:s}}(u,e,s),g=[],m=[];for(let e of c){f[e.firstCol].push({seg:e,isVisible:!1,isAbsolute:!0,absoluteTop:0,marginTop:0});for(let t=e.firstCol;t<=e.lastCol;t+=1)h[t].push({seg:y(e,t,t+1,s),isVisible:!1,isAbsolute:!1,absoluteTop:0,marginTop:0})}for(let e=0;e<s.length;e+=1)g.push(0);for(let t of d){let n=e[t.index],r=t.span;f[r.start].push({seg:y(n,r.start,r.end,s),isVisible:!1,isAbsolute:!0,absoluteTop:0,marginTop:0});for(let e=r.start;e<r.end;e+=1)g[e]+=1,h[e].push({seg:y(n,e,e+1,s),isVisible:!1,isAbsolute:!1,absoluteTop:0,marginTop:0})}for(let e=0;e<s.length;e+=1)m.push(p[e]);return{singleColPlacements:h,multiColPlacements:f,moreCnts:g,moreMarginTops:m}}(r.sortEventSegs(e.fgEventSegs,o.eventOrder),e.dayMaxEvents,e.dayMaxEventRows,o.eventOrderStrict,t.eventInstanceHeights,t.maxContentHeight,e.cells),v=e.eventDrag&&e.eventDrag.affectedInstances||e.eventResize&&e.eventResize.affectedInstances||{};return i.createElement("tr",{ref:this.rootElRef,role:"row"},e.renderIntro&&e.renderIntro(),e.cells.map(((t,n)=>{let r=this.renderFgSegs(n,e.forPrint?h[n]:f[n],e.todayRange,v),o=this.renderFgSegs(n,function(e,t){if(!e.length)return[];let n=function(e){let t={};for(let n of e)for(let e of n)t[e.seg.eventRange.instance.instanceId]=e.absoluteTop;return t}(t);return e.map((e=>({seg:e,isVisible:!0,isAbsolute:!0,absoluteTop:n[e.eventRange.instance.instanceId],marginTop:0})))}(u[n],f),e.todayRange,{},Boolean(e.eventDrag),Boolean(e.eventResize),!1);return i.createElement(m,{key:t.key,elRef:this.cellElRefs.createRef(t.key),innerElRef:this.frameElRefs.createRef(t.key),dateProfile:e.dateProfile,date:t.date,showDayNumber:e.showDayNumbers,showWeekNumber:e.showWeekNumbers&&0===n,forceDayTop:e.showWeekNumbers,todayRange:e.todayRange,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,extraRenderProps:t.extraRenderProps,extraDataAttrs:t.extraDataAttrs,extraClassNames:t.extraClassNames,extraDateSpan:t.extraDateSpan,moreCnt:p[n],moreMarginTop:g[n],singlePlacements:h[n],fgContentElRef:this.fgElRefs.createRef(t.key),fgContent:i.createElement(i.Fragment,null,i.createElement(i.Fragment,null,r),i.createElement(i.Fragment,null,o)),bgContent:i.createElement(i.Fragment,null,this.renderFillSegs(d[n],"highlight"),this.renderFillSegs(l[n],"non-business"),this.renderFillSegs(c[n],"bg-event")),minHeight:e.cellMinHeight})})))}componentDidMount(){this.updateSizing(!0),this.context.addResizeHandler(this.handleResize)}componentDidUpdate(e,t){let n=this.props;this.updateSizing(!r.isPropsEqual(e,n))}componentWillUnmount(){this.context.removeResizeHandler(this.handleResize)}getHighlightSegs(){let{props:e}=this;return e.eventDrag&&e.eventDrag.segs.length?e.eventDrag.segs:e.eventResize&&e.eventResize.segs.length?e.eventResize.segs:e.dateSelectionSegs}getMirrorSegs(){let{props:e}=this;return e.eventResize&&e.eventResize.segs.length?e.eventResize.segs:[]}renderFgSegs(e,t,n,o,s,a,l){let{context:h}=this,{eventSelection:f}=this.props,{framePositions:p}=this.state,g=1===this.props.cells.length,m=s||a||l,v=[];if(p)for(let y of t){let{seg:t}=y,{instanceId:E}=t.eventRange.instance,b=E+":"+e,_=y.isVisible&&!o[E],S=y.isAbsolute,A="",D="";S&&(h.isRtl?(D=0,A=p.lefts[t.lastCol]-p.lefts[t.firstCol]):(A=0,D=p.rights[t.firstCol]-p.rights[t.lastCol])),v.push(i.createElement("div",{className:"fc-daygrid-event-harness"+(S?" fc-daygrid-event-harness-abs":""),key:b,ref:m?null:this.segHarnessRefs.createRef(b),style:{visibility:_?"":"hidden",marginTop:S?"":y.marginTop,top:S?y.absoluteTop:"",left:A,right:D}},c(t)?i.createElement(u,Object.assign({seg:t,isDragging:s,isSelected:E===f,defaultDisplayEventEnd:g},r.getSegMeta(t,n))):i.createElement(d,Object.assign({seg:t,isDragging:s,isResizing:a,isDateSelecting:l,isSelected:E===f,defaultDisplayEventEnd:g},r.getSegMeta(t,n)))))}return v}renderFillSegs(e,t){let{isRtl:n}=this.context,{todayRange:o}=this.props,{framePositions:s}=this.state,a=[];if(s)for(let l of e){let e=n?{right:0,left:s.lefts[l.lastCol]-s.lefts[l.firstCol]}:{left:0,right:s.rights[l.firstCol]-s.rights[l.lastCol]};a.push(i.createElement("div",{key:r.buildEventRangeKey(l.eventRange),className:"fc-daygrid-bg-harness",style:e},"bg-event"===t?i.createElement(r.BgEvent,Object.assign({seg:l},r.getSegMeta(l,o))):r.renderFill(t)))}return i.createElement(i.Fragment,{},...a)}updateSizing(e){let{props:t,state:n,frameElRefs:i}=this;if(!t.forPrint&&null!==t.clientWidth){if(e){let e=t.cells.map((e=>i.currentMap[e.key]));if(e.length){let t=this.rootElRef.current,i=new r.PositionCache(t,e,!0,!1);n.framePositions&&n.framePositions.similarTo(i)||this.setState({framePositions:new r.PositionCache(t,e,!0,!1)})}}const o=this.state.eventInstanceHeights,s=this.queryEventInstanceHeights(),a=!0===t.dayMaxEvents||!0===t.dayMaxEventRows;this.safeSetState({eventInstanceHeights:Object.assign(Object.assign({},o),s),maxContentHeight:a?this.computeMaxContentHeight():null})}}queryEventInstanceHeights(){let e=this.segHarnessRefs.currentMap,t={};for(let n in e){let r=Math.round(e[n].getBoundingClientRect().height),i=n.split(":")[0];t[i]=Math.max(t[i]||0,r)}return t}computeMaxContentHeight(){let e=this.props.cells[0].key,t=this.cellElRefs.currentMap[e],n=this.fgElRefs.currentMap[e];return t.getBoundingClientRect().bottom-n.getBoundingClientRect().top}getCellEls(){let e=this.cellElRefs.currentMap;return this.props.cells.map((t=>e[t.key]))}}b.addStateEquality({eventInstanceHeights:r.isPropsEqual});class _ extends r.DateComponent{constructor(){super(...arguments),this.splitBusinessHourSegs=r.memoize(o),this.splitBgEventSegs=r.memoize(o),this.splitFgEventSegs=r.memoize(o),this.splitDateSelectionSegs=r.memoize(o),this.splitEventDrag=r.memoize(a),this.splitEventResize=r.memoize(a),this.rowRefs=new r.RefMap}render(){let{props:e,context:t}=this,n=e.cells.length,o=this.splitBusinessHourSegs(e.businessHourSegs,n),s=this.splitBgEventSegs(e.bgEventSegs,n),a=this.splitFgEventSegs(e.fgEventSegs,n),l=this.splitDateSelectionSegs(e.dateSelectionSegs,n),c=this.splitEventDrag(e.eventDrag,n),d=this.splitEventResize(e.eventResize,n),u=n>=7&&e.clientWidth?e.clientWidth/t.options.aspectRatio/6:null;return i.createElement(r.NowTimer,{unit:"day"},((t,r)=>i.createElement(i.Fragment,null,e.cells.map(((t,h)=>i.createElement(b,{ref:this.rowRefs.createRef(h),key:t.length?t[0].date.toISOString():h,showDayNumbers:n>1,showWeekNumbers:e.showWeekNumbers,todayRange:r,dateProfile:e.dateProfile,cells:t,renderIntro:e.renderRowIntro,businessHourSegs:o[h],eventSelection:e.eventSelection,bgEventSegs:s[h].filter(S),fgEventSegs:a[h],dateSelectionSegs:l[h],eventDrag:c[h],eventResize:d[h],dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,clientWidth:e.clientWidth,clientHeight:e.clientHeight,cellMinHeight:u,forPrint:e.forPrint}))))))}componentDidMount(){const e=this.rowRefs.currentMap[0].getCellEls()[0];this.rootEl=e?e.closest(".fc-daygrid-body"):null,this.rootEl&&this.context.registerInteractiveComponent(this,{el:this.rootEl,isHitComboAllowed:this.props.isHitComboAllowed})}componentWillUnmount(){this.rootEl&&(this.context.unregisterInteractiveComponent(this),this.rootEl=null)}prepareHits(){this.rowPositions=new r.PositionCache(this.rootEl,this.rowRefs.collect().map((e=>e.getCellEls()[0])),!1,!0),this.colPositions=new r.PositionCache(this.rootEl,this.rowRefs.currentMap[0].getCellEls(),!0,!1)}queryHit(e,t){let{colPositions:n,rowPositions:r}=this,i=n.leftToIndex(e),o=r.topToIndex(t);if(null!=o&&null!=i){let e=this.props.cells[o][i];return{dateProfile:this.props.dateProfile,dateSpan:Object.assign({range:this.getCellRange(o,i),allDay:!0},e.extraDateSpan),dayEl:this.getCellEl(o,i),rect:{left:n.lefts[i],right:n.rights[i],top:r.tops[o],bottom:r.bottoms[o]},layer:0}}return null}getCellEl(e,t){return this.rowRefs.currentMap[e].getCellEls()[t]}getCellRange(e,t){let n=this.props.cells[e][t].date;return{start:n,end:r.addDays(n,1)}}}function S(e){return e.eventRange.def.allDay}class A extends r.DateComponent{constructor(){super(...arguments),this.elRef=i.createRef(),this.needsScrollReset=!1}render(){let{props:e}=this,{dayMaxEventRows:t,dayMaxEvents:n,expandRows:r}=e,o=!0===n||!0===t;o&&!r&&(o=!1,t=null,n=null);let s=["fc-daygrid-body",o?"fc-daygrid-body-balanced":"fc-daygrid-body-unbalanced",r?"":"fc-daygrid-body-natural"];return i.createElement("div",{ref:this.elRef,className:s.join(" "),style:{width:e.clientWidth,minWidth:e.tableMinWidth}},i.createElement("table",{role:"presentation",className:"fc-scrollgrid-sync-table",style:{width:e.clientWidth,minWidth:e.tableMinWidth,height:r?e.clientHeight:""}},e.colGroupNode,i.createElement("tbody",{role:"presentation"},i.createElement(_,{dateProfile:e.dateProfile,cells:e.cells,renderRowIntro:e.renderRowIntro,showWeekNumbers:e.showWeekNumbers,clientWidth:e.clientWidth,clientHeight:e.clientHeight,businessHourSegs:e.businessHourSegs,bgEventSegs:e.bgEventSegs,fgEventSegs:e.fgEventSegs,dateSelectionSegs:e.dateSelectionSegs,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize,dayMaxEvents:n,dayMaxEventRows:t,forPrint:e.forPrint,isHitComboAllowed:e.isHitComboAllowed}))))}componentDidMount(){this.requestScrollReset()}componentDidUpdate(e){e.dateProfile!==this.props.dateProfile?this.requestScrollReset():this.flushScrollReset()}requestScrollReset(){this.needsScrollReset=!0,this.flushScrollReset()}flushScrollReset(){if(this.needsScrollReset&&this.props.clientWidth){const e=function(e,t){let n;return t.currentRangeUnit.match(/year|month/)&&(n=e.querySelector(`[data-date="${r.formatIsoMonthStr(t.currentDate)}-01"]`)),n||(n=e.querySelector(`[data-date="${r.formatDayString(t.currentDate)}"]`)),n}(this.elRef.current,this.props.dateProfile);if(e){const t=e.closest(".fc-daygrid-body"),n=t.closest(".fc-scroller"),r=e.getBoundingClientRect().top-t.getBoundingClientRect().top;n.scrollTop=r?r+1:0}this.needsScrollReset=!1}}}class D extends r.Slicer{constructor(){super(...arguments),this.forceDayIfListItem=!0}sliceRange(e,t){return t.sliceRange(e)}}class C extends r.DateComponent{constructor(){super(...arguments),this.slicer=new D,this.tableRef=i.createRef()}render(){let{props:e,context:t}=this;return i.createElement(A,Object.assign({ref:this.tableRef},this.slicer.sliceProps(e,e.dateProfile,e.nextDayThreshold,t,e.dayTableModel),{dateProfile:e.dateProfile,cells:e.dayTableModel.cells,colGroupNode:e.colGroupNode,tableMinWidth:e.tableMinWidth,renderRowIntro:e.renderRowIntro,dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,showWeekNumbers:e.showWeekNumbers,expandRows:e.expandRows,headerAlignElRef:e.headerAlignElRef,clientWidth:e.clientWidth,clientHeight:e.clientHeight,forPrint:e.forPrint}))}}class w extends r.DateProfileGenerator{buildRenderRange(e,t,n){let r=super.buildRenderRange(e,t,n),{props:i}=this;return R({currentRange:r,snapToWeek:/^(year|month)$/.test(t),fixedWeekCount:i.fixedWeekCount,dateEnv:i.dateEnv})}}function R(e){let t,{dateEnv:n,currentRange:i}=e,{start:o,end:s}=i;if(e.snapToWeek&&(o=n.startOfWeek(o),t=n.startOfWeek(s),t.valueOf()!==s.valueOf()&&(s=r.addWeeks(t,1))),e.fixedWeekCount){let e=n.startOfWeek(n.startOfMonth(r.addDays(i.end,-1))),t=Math.ceil(r.diffWeeks(e,s));s=r.addWeeks(s,6-t)}return{start:o,end:s}}class T extends r.DateComponent{constructor(){super(...arguments),this.headerElRef=i.createRef()}renderSimpleLayout(e,t){let{props:n,context:o}=this,s=[],a=r.getStickyHeaderDates(o.options);return e&&s.push({type:"header",key:"header",isSticky:a,chunk:{elRef:this.headerElRef,tableClassName:"fc-col-header",rowContent:e}}),s.push({type:"body",key:"body",liquid:!0,chunk:{content:t}}),i.createElement(r.ViewContainer,{elClasses:["fc-daygrid"],viewSpec:o.viewSpec},i.createElement(r.SimpleScrollGrid,{liquid:!n.isHeightAuto&&!n.forPrint,collapsibleWidth:n.forPrint,cols:[],sections:s}))}renderHScrollLayout(e,t,n,o){let s=this.context.pluginHooks.scrollGridImpl;if(!s)throw new Error("No ScrollGrid implementation");let{props:a,context:l}=this,c=!a.forPrint&&r.getStickyHeaderDates(l.options),d=!a.forPrint&&r.getStickyFooterScrollbar(l.options),u=[];return e&&u.push({type:"header",key:"header",isSticky:c,chunks:[{key:"main",elRef:this.headerElRef,tableClassName:"fc-col-header",rowContent:e}]}),u.push({type:"body",key:"body",liquid:!0,chunks:[{key:"main",content:t}]}),d&&u.push({type:"footer",key:"footer",isSticky:!0,chunks:[{key:"main",content:r.renderScrollShim}]}),i.createElement(r.ViewContainer,{elClasses:["fc-daygrid"],viewSpec:l.viewSpec},i.createElement(s,{liquid:!a.isHeightAuto&&!a.forPrint,forPrint:a.forPrint,collapsibleWidth:a.forPrint,colGroups:[{cols:[{span:n,minWidth:o}]}],sections:u}))}}function M(e,t){let n=new r.DaySeriesModel(e.renderRange,t);return new r.DayTableModel(n,/year|month|week/.test(e.currentRangeUnit))}t.DayGridView=class extends T{constructor(){super(...arguments),this.buildDayTableModel=r.memoize(M),this.headerRef=i.createRef(),this.tableRef=i.createRef()}render(){let{options:e,dateProfileGenerator:t}=this.context,{props:n}=this,o=this.buildDayTableModel(n.dateProfile,t),s=e.dayHeaders&&i.createElement(r.DayHeader,{ref:this.headerRef,dateProfile:n.dateProfile,dates:o.headerDates,datesRepDistinctDays:1===o.rowCnt}),a=t=>i.createElement(C,{ref:this.tableRef,dateProfile:n.dateProfile,dayTableModel:o,businessHours:n.businessHours,dateSelection:n.dateSelection,eventStore:n.eventStore,eventUiBases:n.eventUiBases,eventSelection:n.eventSelection,eventDrag:n.eventDrag,eventResize:n.eventResize,nextDayThreshold:e.nextDayThreshold,colGroupNode:t.tableColGroupNode,tableMinWidth:t.tableMinWidth,dayMaxEvents:e.dayMaxEvents,dayMaxEventRows:e.dayMaxEventRows,showWeekNumbers:e.weekNumbers,expandRows:!n.isHeightAuto,headerAlignElRef:this.headerElRef,clientWidth:t.clientWidth,clientHeight:t.clientHeight,forPrint:n.forPrint});return e.dayMinWidth?this.renderHScrollLayout(s,a,o.colCnt,e.dayMinWidth):this.renderSimpleLayout(s,a)}},t.DayTable=C,t.DayTableSlicer=D,t.Table=A,t.TableDateProfileGenerator=w,t.TableRows=_,t.TableView=T,t.buildDayTableModel=M,t.buildDayTableRenderRange=R},790:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(553),i=n(368);i.config.touchMouseIgnoreWait=500;let o=0,s=0,a=!1;class l{constructor(e){this.subjectEl=null,this.selector="",this.handleSelector="",this.shouldIgnoreMove=!1,this.shouldWatchScroll=!0,this.isDragging=!1,this.isTouchDragging=!1,this.wasTouchScroll=!1,this.handleMouseDown=e=>{if(!this.shouldIgnoreMouse()&&function(e){return 0===e.button&&!e.ctrlKey}(e)&&this.tryStart(e)){let t=this.createEventFromMouse(e,!0);this.emitter.trigger("pointerdown",t),this.initScrollWatch(t),this.shouldIgnoreMove||document.addEventListener("mousemove",this.handleMouseMove),document.addEventListener("mouseup",this.handleMouseUp)}},this.handleMouseMove=e=>{let t=this.createEventFromMouse(e);this.recordCoords(t),this.emitter.trigger("pointermove",t)},this.handleMouseUp=e=>{document.removeEventListener("mousemove",this.handleMouseMove),document.removeEventListener("mouseup",this.handleMouseUp),this.emitter.trigger("pointerup",this.createEventFromMouse(e)),this.cleanup()},this.handleTouchStart=e=>{if(this.tryStart(e)){this.isTouchDragging=!0;let t=this.createEventFromTouch(e,!0);this.emitter.trigger("pointerdown",t),this.initScrollWatch(t);let n=e.target;this.shouldIgnoreMove||n.addEventListener("touchmove",this.handleTouchMove),n.addEventListener("touchend",this.handleTouchEnd),n.addEventListener("touchcancel",this.handleTouchEnd),window.addEventListener("scroll",this.handleTouchScroll,!0)}},this.handleTouchMove=e=>{let t=this.createEventFromTouch(e);this.recordCoords(t),this.emitter.trigger("pointermove",t)},this.handleTouchEnd=e=>{if(this.isDragging){let t=e.target;t.removeEventListener("touchmove",this.handleTouchMove),t.removeEventListener("touchend",this.handleTouchEnd),t.removeEventListener("touchcancel",this.handleTouchEnd),window.removeEventListener("scroll",this.handleTouchScroll,!0),this.emitter.trigger("pointerup",this.createEventFromTouch(e)),this.cleanup(),this.isTouchDragging=!1,o+=1,setTimeout((()=>{o-=1}),i.config.touchMouseIgnoreWait)}},this.handleTouchScroll=()=>{this.wasTouchScroll=!0},this.handleScroll=e=>{if(!this.shouldIgnoreMove){let t=window.pageXOffset-this.prevScrollX+this.prevPageX,n=window.pageYOffset-this.prevScrollY+this.prevPageY;this.emitter.trigger("pointermove",{origEvent:e,isTouch:this.isTouchDragging,subjectEl:this.subjectEl,pageX:t,pageY:n,deltaX:t-this.origPageX,deltaY:n-this.origPageY})}},this.containerEl=e,this.emitter=new i.Emitter,e.addEventListener("mousedown",this.handleMouseDown),e.addEventListener("touchstart",this.handleTouchStart,{passive:!0}),s+=1,1===s&&window.addEventListener("touchmove",c,{passive:!1})}destroy(){this.containerEl.removeEventListener("mousedown",this.handleMouseDown),this.containerEl.removeEventListener("touchstart",this.handleTouchStart,{passive:!0}),s-=1,s||window.removeEventListener("touchmove",c,{passive:!1})}tryStart(e){let t=this.querySubjectEl(e),n=e.target;return!(!t||this.handleSelector&&!i.elementClosest(n,this.handleSelector)||(this.subjectEl=t,this.isDragging=!0,this.wasTouchScroll=!1,0))}cleanup(){a=!1,this.isDragging=!1,this.subjectEl=null,this.destroyScrollWatch()}querySubjectEl(e){return this.selector?i.elementClosest(e.target,this.selector):this.containerEl}shouldIgnoreMouse(){return o||this.isTouchDragging}cancelTouchScroll(){this.isDragging&&(a=!0)}initScrollWatch(e){this.shouldWatchScroll&&(this.recordCoords(e),window.addEventListener("scroll",this.handleScroll,!0))}recordCoords(e){this.shouldWatchScroll&&(this.prevPageX=e.pageX,this.prevPageY=e.pageY,this.prevScrollX=window.pageXOffset,this.prevScrollY=window.pageYOffset)}destroyScrollWatch(){this.shouldWatchScroll&&window.removeEventListener("scroll",this.handleScroll,!0)}createEventFromMouse(e,t){let n=0,r=0;return t?(this.origPageX=e.pageX,this.origPageY=e.pageY):(n=e.pageX-this.origPageX,r=e.pageY-this.origPageY),{origEvent:e,isTouch:!1,subjectEl:this.subjectEl,pageX:e.pageX,pageY:e.pageY,deltaX:n,deltaY:r}}createEventFromTouch(e,t){let n,r,i=e.touches,o=0,s=0;return i&&i.length?(n=i[0].pageX,r=i[0].pageY):(n=e.pageX,r=e.pageY),t?(this.origPageX=n,this.origPageY=r):(o=n-this.origPageX,s=r-this.origPageY),{origEvent:e,isTouch:!0,subjectEl:this.subjectEl,pageX:n,pageY:r,deltaX:o,deltaY:s}}}function c(e){a&&e.preventDefault()}class d{constructor(){this.isVisible=!1,this.sourceEl=null,this.mirrorEl=null,this.sourceElRect=null,this.parentNode=document.body,this.zIndex=9999,this.revertDuration=0}start(e,t,n){this.sourceEl=e,this.sourceElRect=this.sourceEl.getBoundingClientRect(),this.origScreenX=t-window.pageXOffset,this.origScreenY=n-window.pageYOffset,this.deltaX=0,this.deltaY=0,this.updateElPosition()}handleMove(e,t){this.deltaX=e-window.pageXOffset-this.origScreenX,this.deltaY=t-window.pageYOffset-this.origScreenY,this.updateElPosition()}setIsVisible(e){e?this.isVisible||(this.mirrorEl&&(this.mirrorEl.style.display=""),this.isVisible=e,this.updateElPosition()):this.isVisible&&(this.mirrorEl&&(this.mirrorEl.style.display="none"),this.isVisible=e)}stop(e,t){let n=()=>{this.cleanup(),t()};e&&this.mirrorEl&&this.isVisible&&this.revertDuration&&(this.deltaX||this.deltaY)?this.doRevertAnimation(n,this.revertDuration):setTimeout(n,0)}doRevertAnimation(e,t){let n=this.mirrorEl,r=this.sourceEl.getBoundingClientRect();n.style.transition="top "+t+"ms,left "+t+"ms",i.applyStyle(n,{left:r.left,top:r.top}),i.whenTransitionDone(n,(()=>{n.style.transition="",e()}))}cleanup(){this.mirrorEl&&(i.removeElement(this.mirrorEl),this.mirrorEl=null),this.sourceEl=null}updateElPosition(){this.sourceEl&&this.isVisible&&i.applyStyle(this.getMirrorEl(),{left:this.sourceElRect.left+this.deltaX,top:this.sourceElRect.top+this.deltaY})}getMirrorEl(){let e=this.sourceElRect,t=this.mirrorEl;return t||(t=this.mirrorEl=this.sourceEl.cloneNode(!0),t.style.userSelect="none",t.classList.add("fc-event-dragging"),i.applyStyle(t,{position:"fixed",zIndex:this.zIndex,visibility:"",boxSizing:"border-box",width:e.right-e.left,height:e.bottom-e.top,right:"auto",bottom:"auto",margin:0}),this.parentNode.appendChild(t)),t}}class u extends i.ScrollController{constructor(e,t){super(),this.handleScroll=()=>{this.scrollTop=this.scrollController.getScrollTop(),this.scrollLeft=this.scrollController.getScrollLeft(),this.handleScrollChange()},this.scrollController=e,this.doesListening=t,this.scrollTop=this.origScrollTop=e.getScrollTop(),this.scrollLeft=this.origScrollLeft=e.getScrollLeft(),this.scrollWidth=e.getScrollWidth(),this.scrollHeight=e.getScrollHeight(),this.clientWidth=e.getClientWidth(),this.clientHeight=e.getClientHeight(),this.clientRect=this.computeClientRect(),this.doesListening&&this.getEventTarget().addEventListener("scroll",this.handleScroll)}destroy(){this.doesListening&&this.getEventTarget().removeEventListener("scroll",this.handleScroll)}getScrollTop(){return this.scrollTop}getScrollLeft(){return this.scrollLeft}setScrollTop(e){this.scrollController.setScrollTop(e),this.doesListening||(this.scrollTop=Math.max(Math.min(e,this.getMaxScrollTop()),0),this.handleScrollChange())}setScrollLeft(e){this.scrollController.setScrollLeft(e),this.doesListening||(this.scrollLeft=Math.max(Math.min(e,this.getMaxScrollLeft()),0),this.handleScrollChange())}getClientWidth(){return this.clientWidth}getClientHeight(){return this.clientHeight}getScrollWidth(){return this.scrollWidth}getScrollHeight(){return this.scrollHeight}handleScrollChange(){}}class h extends u{constructor(e,t){super(new i.ElementScrollController(e),t)}getEventTarget(){return this.scrollController.el}computeClientRect(){return i.computeInnerRect(this.scrollController.el)}}class f extends u{constructor(e){super(new i.WindowScrollController,e)}getEventTarget(){return window}computeClientRect(){return{left:this.scrollLeft,right:this.scrollLeft+this.clientWidth,top:this.scrollTop,bottom:this.scrollTop+this.clientHeight}}handleScrollChange(){this.clientRect=this.computeClientRect()}}const p="function"==typeof performance?performance.now:Date.now;class g{constructor(){this.isEnabled=!0,this.scrollQuery=[window,".fc-scroller"],this.edgeThreshold=50,this.maxVelocity=300,this.pointerScreenX=null,this.pointerScreenY=null,this.isAnimating=!1,this.scrollCaches=null,this.everMovedUp=!1,this.everMovedDown=!1,this.everMovedLeft=!1,this.everMovedRight=!1,this.animate=()=>{if(this.isAnimating){let e=this.computeBestEdge(this.pointerScreenX+window.pageXOffset,this.pointerScreenY+window.pageYOffset);if(e){let t=p();this.handleSide(e,(t-this.msSinceRequest)/1e3),this.requestAnimation(t)}else this.isAnimating=!1}}}start(e,t,n){this.isEnabled&&(this.scrollCaches=this.buildCaches(n),this.pointerScreenX=null,this.pointerScreenY=null,this.everMovedUp=!1,this.everMovedDown=!1,this.everMovedLeft=!1,this.everMovedRight=!1,this.handleMove(e,t))}handleMove(e,t){if(this.isEnabled){let n=e-window.pageXOffset,r=t-window.pageYOffset,i=null===this.pointerScreenY?0:r-this.pointerScreenY,o=null===this.pointerScreenX?0:n-this.pointerScreenX;i<0?this.everMovedUp=!0:i>0&&(this.everMovedDown=!0),o<0?this.everMovedLeft=!0:o>0&&(this.everMovedRight=!0),this.pointerScreenX=n,this.pointerScreenY=r,this.isAnimating||(this.isAnimating=!0,this.requestAnimation(p()))}}stop(){if(this.isEnabled){this.isAnimating=!1;for(let e of this.scrollCaches)e.destroy();this.scrollCaches=null}}requestAnimation(e){this.msSinceRequest=e,requestAnimationFrame(this.animate)}handleSide(e,t){let{scrollCache:n}=e,{edgeThreshold:r}=this,i=r-e.distance,o=i*i/(r*r)*this.maxVelocity*t,s=1;switch(e.name){case"left":s=-1;case"right":n.setScrollLeft(n.getScrollLeft()+o*s);break;case"top":s=-1;case"bottom":n.setScrollTop(n.getScrollTop()+o*s)}}computeBestEdge(e,t){let{edgeThreshold:n}=this,r=null,i=this.scrollCaches||[];for(let o of i){let i=o.clientRect,s=e-i.left,a=i.right-e,l=t-i.top,c=i.bottom-t;s>=0&&a>=0&&l>=0&&c>=0&&(l<=n&&this.everMovedUp&&o.canScrollUp()&&(!r||r.distance>l)&&(r={scrollCache:o,name:"top",distance:l}),c<=n&&this.everMovedDown&&o.canScrollDown()&&(!r||r.distance>c)&&(r={scrollCache:o,name:"bottom",distance:c}),s<=n&&this.everMovedLeft&&o.canScrollLeft()&&(!r||r.distance>s)&&(r={scrollCache:o,name:"left",distance:s}),a<=n&&this.everMovedRight&&o.canScrollRight()&&(!r||r.distance>a)&&(r={scrollCache:o,name:"right",distance:a}))}return r}buildCaches(e){return this.queryScrollEls(e).map((e=>e===window?new f(!1):new h(e,!1)))}queryScrollEls(e){let t=[];for(let n of this.scrollQuery)"object"==typeof n?t.push(n):t.push(...Array.prototype.slice.call(e.getRootNode().querySelectorAll(n)));return t}}class m extends i.ElementDragging{constructor(e,t){super(e),this.containerEl=e,this.delay=null,this.minDistance=0,this.touchScrollAllowed=!0,this.mirrorNeedsRevert=!1,this.isInteracting=!1,this.isDragging=!1,this.isDelayEnded=!1,this.isDistanceSurpassed=!1,this.delayTimeoutId=null,this.onPointerDown=e=>{this.isDragging||(this.isInteracting=!0,this.isDelayEnded=!1,this.isDistanceSurpassed=!1,i.preventSelection(document.body),i.preventContextMenu(document.body),e.isTouch||e.origEvent.preventDefault(),this.emitter.trigger("pointerdown",e),this.isInteracting&&!this.pointer.shouldIgnoreMove&&(this.mirror.setIsVisible(!1),this.mirror.start(e.subjectEl,e.pageX,e.pageY),this.startDelay(e),this.minDistance||this.handleDistanceSurpassed(e)))},this.onPointerMove=e=>{if(this.isInteracting){if(this.emitter.trigger("pointermove",e),!this.isDistanceSurpassed){let t,n=this.minDistance,{deltaX:r,deltaY:i}=e;t=r*r+i*i,t>=n*n&&this.handleDistanceSurpassed(e)}this.isDragging&&("scroll"!==e.origEvent.type&&(this.mirror.handleMove(e.pageX,e.pageY),this.autoScroller.handleMove(e.pageX,e.pageY)),this.emitter.trigger("dragmove",e))}},this.onPointerUp=e=>{this.isInteracting&&(this.isInteracting=!1,i.allowSelection(document.body),i.allowContextMenu(document.body),this.emitter.trigger("pointerup",e),this.isDragging&&(this.autoScroller.stop(),this.tryStopDrag(e)),this.delayTimeoutId&&(clearTimeout(this.delayTimeoutId),this.delayTimeoutId=null))};let n=this.pointer=new l(e);n.emitter.on("pointerdown",this.onPointerDown),n.emitter.on("pointermove",this.onPointerMove),n.emitter.on("pointerup",this.onPointerUp),t&&(n.selector=t),this.mirror=new d,this.autoScroller=new g}destroy(){this.pointer.destroy(),this.onPointerUp({})}startDelay(e){"number"==typeof this.delay?this.delayTimeoutId=setTimeout((()=>{this.delayTimeoutId=null,this.handleDelayEnd(e)}),this.delay):this.handleDelayEnd(e)}handleDelayEnd(e){this.isDelayEnded=!0,this.tryStartDrag(e)}handleDistanceSurpassed(e){this.isDistanceSurpassed=!0,this.tryStartDrag(e)}tryStartDrag(e){this.isDelayEnded&&this.isDistanceSurpassed&&(this.pointer.wasTouchScroll&&!this.touchScrollAllowed||(this.isDragging=!0,this.mirrorNeedsRevert=!1,this.autoScroller.start(e.pageX,e.pageY,this.containerEl),this.emitter.trigger("dragstart",e),!1===this.touchScrollAllowed&&this.pointer.cancelTouchScroll()))}tryStopDrag(e){this.mirror.stop(this.mirrorNeedsRevert,this.stopDrag.bind(this,e))}stopDrag(e){this.isDragging=!1,this.emitter.trigger("dragend",e)}setIgnoreMove(e){this.pointer.shouldIgnoreMove=e}setMirrorIsVisible(e){this.mirror.setIsVisible(e)}setMirrorNeedsRevert(e){this.mirrorNeedsRevert=e}setAutoScrollEnabled(e){this.autoScroller.isEnabled=e}}class v{constructor(e){this.origRect=i.computeRect(e),this.scrollCaches=i.getClippingParents(e).map((e=>new h(e,!0)))}destroy(){for(let e of this.scrollCaches)e.destroy()}computeLeft(){let e=this.origRect.left;for(let t of this.scrollCaches)e+=t.origScrollLeft-t.getScrollLeft();return e}computeTop(){let e=this.origRect.top;for(let t of this.scrollCaches)e+=t.origScrollTop-t.getScrollTop();return e}isWithinClipping(e,t){let n={left:e,top:t};for(let e of this.scrollCaches)if(!y(e.getEventTarget())&&!i.pointInsideRect(n,e.clientRect))return!1;return!0}}function y(e){let t=e.tagName;return"HTML"===t||"BODY"===t}class E{constructor(e,t){this.useSubjectCenter=!1,this.requireInitial=!0,this.initialHit=null,this.movingHit=null,this.finalHit=null,this.handlePointerDown=e=>{let{dragging:t}=this;this.initialHit=null,this.movingHit=null,this.finalHit=null,this.prepareHits(),this.processFirstCoord(e),this.initialHit||!this.requireInitial?(t.setIgnoreMove(!1),this.emitter.trigger("pointerdown",e)):t.setIgnoreMove(!0)},this.handleDragStart=e=>{this.emitter.trigger("dragstart",e),this.handleMove(e,!0)},this.handleDragMove=e=>{this.emitter.trigger("dragmove",e),this.handleMove(e)},this.handlePointerUp=e=>{this.releaseHits(),this.emitter.trigger("pointerup",e)},this.handleDragEnd=e=>{this.movingHit&&this.emitter.trigger("hitupdate",null,!0,e),this.finalHit=this.movingHit,this.movingHit=null,this.emitter.trigger("dragend",e)},this.droppableStore=t,e.emitter.on("pointerdown",this.handlePointerDown),e.emitter.on("dragstart",this.handleDragStart),e.emitter.on("dragmove",this.handleDragMove),e.emitter.on("pointerup",this.handlePointerUp),e.emitter.on("dragend",this.handleDragEnd),this.dragging=e,this.emitter=new i.Emitter}processFirstCoord(e){let t,n={left:e.pageX,top:e.pageY},r=n,o=e.subjectEl;o instanceof HTMLElement&&(t=i.computeRect(o),r=i.constrainPoint(r,t));let s=this.initialHit=this.queryHitForOffset(r.left,r.top);if(s){if(this.useSubjectCenter&&t){let e=i.intersectRects(t,s.rect);e&&(r=i.getRectCenter(e))}this.coordAdjust=i.diffPoints(r,n)}else this.coordAdjust={left:0,top:0}}handleMove(e,t){let n=this.queryHitForOffset(e.pageX+this.coordAdjust.left,e.pageY+this.coordAdjust.top);!t&&b(this.movingHit,n)||(this.movingHit=n,this.emitter.trigger("hitupdate",n,!1,e))}prepareHits(){this.offsetTrackers=i.mapHash(this.droppableStore,(e=>(e.component.prepareHits(),new v(e.el))))}releaseHits(){let{offsetTrackers:e}=this;for(let t in e)e[t].destroy();this.offsetTrackers={}}queryHitForOffset(e,t){let{droppableStore:n,offsetTrackers:r}=this,o=null;for(let s in n){let a=n[s].component,l=r[s];if(l&&l.isWithinClipping(e,t)){let n=l.computeLeft(),r=l.computeTop(),c=e-n,d=t-r,{origRect:u}=l,h=u.right-u.left,f=u.bottom-u.top;if(c>=0&&c<h&&d>=0&&d<f){let e=a.queryHit(c,d,h,f);e&&i.rangeContainsRange(e.dateProfile.activeRange,e.dateSpan.range)&&(!o||e.layer>o.layer)&&(e.componentId=s,e.context=a.context,e.rect.left+=n,e.rect.right+=n,e.rect.top+=r,e.rect.bottom+=r,o=e)}}}return o}}function b(e,t){return!e&&!t||Boolean(e)===Boolean(t)&&i.isDateSpansEqual(e.dateSpan,t.dateSpan)}function _(e,t){let n={};for(let r of t.pluginHooks.datePointTransforms)Object.assign(n,r(e,t));var r,i;return Object.assign(n,(r=e,{date:(i=t.dateEnv).toDate(r.range.start),dateStr:i.formatIso(r.range.start,{omitTime:r.allDay}),allDay:r.allDay})),n}class S extends i.Interaction{constructor(e){super(e),this.handlePointerDown=e=>{let{dragging:t}=this,n=e.origEvent.target;t.setIgnoreMove(!this.component.isValidDateDownEl(n))},this.handleDragEnd=e=>{let{component:t}=this,{pointer:n}=this.dragging;if(!n.wasTouchScroll){let{initialHit:n,finalHit:r}=this.hitDragging;if(n&&r&&b(n,r)){let{context:r}=t,i=Object.assign(Object.assign({},_(n.dateSpan,r)),{dayEl:n.dayEl,jsEvent:e.origEvent,view:r.viewApi||r.calendarApi.view});r.emitter.trigger("dateClick",i)}}},this.dragging=new m(e.el),this.dragging.autoScroller.isEnabled=!1;let t=this.hitDragging=new E(this.dragging,i.interactionSettingsToStore(e));t.emitter.on("pointerdown",this.handlePointerDown),t.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}}class A extends i.Interaction{constructor(e){super(e),this.dragSelection=null,this.handlePointerDown=e=>{let{component:t,dragging:n}=this,{options:r}=t.context,i=r.selectable&&t.isValidDateDownEl(e.origEvent.target);n.setIgnoreMove(!i),n.delay=e.isTouch?function(e){let{options:t}=e.context,n=t.selectLongPressDelay;return null==n&&(n=t.longPressDelay),n}(t):null},this.handleDragStart=e=>{this.component.context.calendarApi.unselect(e)},this.handleHitUpdate=(e,t)=>{let{context:n}=this.component,r=null,o=!1;if(e){let t=this.hitDragging.initialHit;e.componentId===t.componentId&&this.isHitComboAllowed&&!this.isHitComboAllowed(t,e)||(r=function(e,t,n){let r=e.dateSpan,o=t.dateSpan,s=[r.range.start,r.range.end,o.range.start,o.range.end];s.sort(i.compareNumbers);let a={};for(let r of n){let n=r(e,t);if(!1===n)return null;n&&Object.assign(a,n)}return a.range={start:s[0],end:s[3]},a.allDay=r.allDay,a}(t,e,n.pluginHooks.dateSelectionTransformers)),r&&i.isDateSelectionValid(r,e.dateProfile,n)||(o=!0,r=null)}r?n.dispatch({type:"SELECT_DATES",selection:r}):t||n.dispatch({type:"UNSELECT_DATES"}),o?i.disableCursor():i.enableCursor(),t||(this.dragSelection=r)},this.handlePointerUp=e=>{this.dragSelection&&(i.triggerDateSelect(this.dragSelection,e,this.component.context),this.dragSelection=null)};let{component:t}=e,{options:n}=t.context,r=this.dragging=new m(e.el);r.touchScrollAllowed=!1,r.minDistance=n.selectMinDistance||0,r.autoScroller.isEnabled=n.dragScroll;let o=this.hitDragging=new E(this.dragging,i.interactionSettingsToStore(e));o.emitter.on("pointerdown",this.handlePointerDown),o.emitter.on("dragstart",this.handleDragStart),o.emitter.on("hitupdate",this.handleHitUpdate),o.emitter.on("pointerup",this.handlePointerUp)}destroy(){this.dragging.destroy()}}class D extends i.Interaction{constructor(e){super(e),this.subjectEl=null,this.subjectSeg=null,this.isDragging=!1,this.eventRange=null,this.relevantEvents=null,this.receivingContext=null,this.validMutation=null,this.mutatedRelevantEvents=null,this.handlePointerDown=e=>{let t=e.origEvent.target,{component:n,dragging:r}=this,{mirror:o}=r,{options:s}=n.context,a=n.context;this.subjectEl=e.subjectEl;let l=this.subjectSeg=i.getElSeg(e.subjectEl),c=(this.eventRange=l.eventRange).instance.instanceId;this.relevantEvents=i.getRelevantEvents(a.getCurrentData().eventStore,c),r.minDistance=e.isTouch?0:s.eventDragMinDistance,r.delay=e.isTouch&&c!==n.props.eventSelection?function(e){let{options:t}=e.context,n=t.eventLongPressDelay;return null==n&&(n=t.longPressDelay),n}(n):null,s.fixedMirrorParent?o.parentNode=s.fixedMirrorParent:o.parentNode=i.elementClosest(t,".fc"),o.revertDuration=s.dragRevertDuration;let d=n.isValidSegDownEl(t)&&!i.elementClosest(t,".fc-event-resizer");r.setIgnoreMove(!d),this.isDragging=d&&e.subjectEl.classList.contains("fc-event-draggable")},this.handleDragStart=e=>{let t=this.component.context,n=this.eventRange,r=n.instance.instanceId;e.isTouch?r!==this.component.props.eventSelection&&t.dispatch({type:"SELECT_EVENT",eventInstanceId:r}):t.dispatch({type:"UNSELECT_EVENT"}),this.isDragging&&(t.calendarApi.unselect(e),t.emitter.trigger("eventDragStart",{el:this.subjectEl,event:new i.EventImpl(t,n.def,n.instance),jsEvent:e.origEvent,view:t.viewApi}))},this.handleHitUpdate=(e,t)=>{if(!this.isDragging)return;let n=this.relevantEvents,r=this.hitDragging.initialHit,o=this.component.context,s=null,a=null,l=null,c=!1,d={affectedEvents:n,mutatedEvents:i.createEmptyEventStore(),isEvent:!0};if(e){s=e.context;let t=s.options;o===s||t.editable&&t.droppable?(a=function(e,t,n){let r=e.dateSpan,o=t.dateSpan,s=r.range.start,a=o.range.start,l={};r.allDay!==o.allDay&&(l.allDay=o.allDay,l.hasEnd=t.context.options.allDayMaintainDuration,o.allDay&&(s=i.startOfDay(s)));let c=i.diffDates(s,a,e.context.dateEnv,e.componentId===t.componentId?e.largeUnit:null);c.milliseconds&&(l.allDay=!1);let d={datesDelta:c,standardProps:l};for(let r of n)r(d,e,t);return d}(r,e,s.getCurrentData().pluginHooks.eventDragMutationMassagers),a&&(l=i.applyMutationToEventStore(n,s.getCurrentData().eventUiBases,a,s),d.mutatedEvents=l,i.isInteractionValid(d,e.dateProfile,s)||(c=!0,a=null,l=null,d.mutatedEvents=i.createEmptyEventStore()))):s=null}this.displayDrag(s,d),c?i.disableCursor():i.enableCursor(),t||(o===s&&b(r,e)&&(a=null),this.dragging.setMirrorNeedsRevert(!a),this.dragging.setMirrorIsVisible(!e||!this.subjectEl.getRootNode().querySelector(".fc-event-mirror")),this.receivingContext=s,this.validMutation=a,this.mutatedRelevantEvents=l)},this.handlePointerUp=()=>{this.isDragging||this.cleanup()},this.handleDragEnd=e=>{if(this.isDragging){let t=this.component.context,n=t.viewApi,{receivingContext:r,validMutation:o}=this,s=this.eventRange.def,a=this.eventRange.instance,l=new i.EventImpl(t,s,a),c=this.relevantEvents,d=this.mutatedRelevantEvents,{finalHit:u}=this.hitDragging;if(this.clearDrag(),t.emitter.trigger("eventDragStop",{el:this.subjectEl,event:l,jsEvent:e.origEvent,view:n}),o){if(r===t){let r=new i.EventImpl(t,d.defs[s.defId],a?d.instances[a.instanceId]:null);t.dispatch({type:"MERGE_EVENTS",eventStore:d});let u={oldEvent:l,event:r,relatedEvents:i.buildEventApis(d,t,a),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:c})}},h={};for(let e of t.getCurrentData().pluginHooks.eventDropTransformers)Object.assign(h,e(o,t));t.emitter.trigger("eventDrop",Object.assign(Object.assign(Object.assign({},u),h),{el:e.subjectEl,delta:o.datesDelta,jsEvent:e.origEvent,view:n})),t.emitter.trigger("eventChange",u)}else if(r){let o={event:l,relatedEvents:i.buildEventApis(c,t,a),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:c})}};t.emitter.trigger("eventLeave",Object.assign(Object.assign({},o),{draggedEl:e.subjectEl,view:n})),t.dispatch({type:"REMOVE_EVENTS",eventStore:c}),t.emitter.trigger("eventRemove",o);let h=d.defs[s.defId],f=d.instances[a.instanceId],p=new i.EventImpl(r,h,f);r.dispatch({type:"MERGE_EVENTS",eventStore:d});let g={event:p,relatedEvents:i.buildEventApis(d,r,f),revert(){r.dispatch({type:"REMOVE_EVENTS",eventStore:d})}};r.emitter.trigger("eventAdd",g),e.isTouch&&r.dispatch({type:"SELECT_EVENT",eventInstanceId:a.instanceId}),r.emitter.trigger("drop",Object.assign(Object.assign({},_(u.dateSpan,r)),{draggedEl:e.subjectEl,jsEvent:e.origEvent,view:u.context.viewApi})),r.emitter.trigger("eventReceive",Object.assign(Object.assign({},g),{draggedEl:e.subjectEl,view:u.context.viewApi}))}}else t.emitter.trigger("_noEventDrop")}this.cleanup()};let{component:t}=this,{options:n}=t.context,r=this.dragging=new m(e.el);r.pointer.selector=D.SELECTOR,r.touchScrollAllowed=!1,r.autoScroller.isEnabled=n.dragScroll;let o=this.hitDragging=new E(this.dragging,i.interactionSettingsStore);o.useSubjectCenter=e.useEventCenter,o.emitter.on("pointerdown",this.handlePointerDown),o.emitter.on("dragstart",this.handleDragStart),o.emitter.on("hitupdate",this.handleHitUpdate),o.emitter.on("pointerup",this.handlePointerUp),o.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}displayDrag(e,t){let n=this.component.context,r=this.receivingContext;r&&r!==e&&(r===n?r.dispatch({type:"SET_EVENT_DRAG",state:{affectedEvents:t.affectedEvents,mutatedEvents:i.createEmptyEventStore(),isEvent:!0}}):r.dispatch({type:"UNSET_EVENT_DRAG"})),e&&e.dispatch({type:"SET_EVENT_DRAG",state:t})}clearDrag(){let e=this.component.context,{receivingContext:t}=this;t&&t.dispatch({type:"UNSET_EVENT_DRAG"}),e!==t&&e.dispatch({type:"UNSET_EVENT_DRAG"})}cleanup(){this.subjectSeg=null,this.isDragging=!1,this.eventRange=null,this.relevantEvents=null,this.receivingContext=null,this.validMutation=null,this.mutatedRelevantEvents=null}}D.SELECTOR=".fc-event-draggable, .fc-event-resizable";class C extends i.Interaction{constructor(e){super(e),this.draggingSegEl=null,this.draggingSeg=null,this.eventRange=null,this.relevantEvents=null,this.validMutation=null,this.mutatedRelevantEvents=null,this.handlePointerDown=e=>{let{component:t}=this,n=this.querySegEl(e),r=i.getElSeg(n),o=this.eventRange=r.eventRange;this.dragging.minDistance=t.context.options.eventDragMinDistance,this.dragging.setIgnoreMove(!this.component.isValidSegDownEl(e.origEvent.target)||e.isTouch&&this.component.props.eventSelection!==o.instance.instanceId)},this.handleDragStart=e=>{let{context:t}=this.component,n=this.eventRange;this.relevantEvents=i.getRelevantEvents(t.getCurrentData().eventStore,this.eventRange.instance.instanceId);let r=this.querySegEl(e);this.draggingSegEl=r,this.draggingSeg=i.getElSeg(r),t.calendarApi.unselect(),t.emitter.trigger("eventResizeStart",{el:r,event:new i.EventImpl(t,n.def,n.instance),jsEvent:e.origEvent,view:t.viewApi})},this.handleHitUpdate=(e,t,n)=>{let{context:r}=this.component,o=this.relevantEvents,s=this.hitDragging.initialHit,a=this.eventRange.instance,l=null,c=null,d=!1,u={affectedEvents:o,mutatedEvents:i.createEmptyEventStore(),isEvent:!0};e&&(e.componentId===s.componentId&&this.isHitComboAllowed&&!this.isHitComboAllowed(s,e)||(l=function(e,t,n,r){let o=e.context.dateEnv,s=e.dateSpan.range.start,a=t.dateSpan.range.start,l=i.diffDates(s,a,o,e.largeUnit);if(n){if(o.add(r.start,l)<r.end)return{startDelta:l}}else if(o.add(r.end,l)>r.start)return{endDelta:l};return null}(s,e,n.subjectEl.classList.contains("fc-event-resizer-start"),a.range))),l&&(c=i.applyMutationToEventStore(o,r.getCurrentData().eventUiBases,l,r),u.mutatedEvents=c,i.isInteractionValid(u,e.dateProfile,r)||(d=!0,l=null,c=null,u.mutatedEvents=null)),c?r.dispatch({type:"SET_EVENT_RESIZE",state:u}):r.dispatch({type:"UNSET_EVENT_RESIZE"}),d?i.disableCursor():i.enableCursor(),t||(l&&b(s,e)&&(l=null),this.validMutation=l,this.mutatedRelevantEvents=c)},this.handleDragEnd=e=>{let{context:t}=this.component,n=this.eventRange.def,r=this.eventRange.instance,o=new i.EventImpl(t,n,r),s=this.relevantEvents,a=this.mutatedRelevantEvents;if(t.emitter.trigger("eventResizeStop",{el:this.draggingSegEl,event:o,jsEvent:e.origEvent,view:t.viewApi}),this.validMutation){let l=new i.EventImpl(t,a.defs[n.defId],r?a.instances[r.instanceId]:null);t.dispatch({type:"MERGE_EVENTS",eventStore:a});let c={oldEvent:o,event:l,relatedEvents:i.buildEventApis(a,t,r),revert(){t.dispatch({type:"MERGE_EVENTS",eventStore:s})}};t.emitter.trigger("eventResize",Object.assign(Object.assign({},c),{el:this.draggingSegEl,startDelta:this.validMutation.startDelta||i.createDuration(0),endDelta:this.validMutation.endDelta||i.createDuration(0),jsEvent:e.origEvent,view:t.viewApi})),t.emitter.trigger("eventChange",c)}else t.emitter.trigger("_noEventResize");this.draggingSeg=null,this.relevantEvents=null,this.validMutation=null};let{component:t}=e,n=this.dragging=new m(e.el);n.pointer.selector=".fc-event-resizer",n.touchScrollAllowed=!1,n.autoScroller.isEnabled=t.context.options.dragScroll;let r=this.hitDragging=new E(this.dragging,i.interactionSettingsToStore(e));r.emitter.on("pointerdown",this.handlePointerDown),r.emitter.on("dragstart",this.handleDragStart),r.emitter.on("hitupdate",this.handleHitUpdate),r.emitter.on("dragend",this.handleDragEnd)}destroy(){this.dragging.destroy()}querySegEl(e){return i.elementClosest(e.subjectEl,".fc-event")}}const w={fixedMirrorParent:i.identity},R={dateClick:i.identity,eventDragStart:i.identity,eventDragStop:i.identity,eventDrop:i.identity,eventResizeStart:i.identity,eventResizeStop:i.identity,eventResize:i.identity,drop:i.identity,eventReceive:i.identity,eventLeave:i.identity};class T{constructor(e,t){this.receivingContext=null,this.droppableEvent=null,this.suppliedDragMeta=null,this.dragMeta=null,this.handleDragStart=e=>{this.dragMeta=this.buildDragMeta(e.subjectEl)},this.handleHitUpdate=(e,t,n)=>{let{dragging:r}=this.hitDragging,o=null,s=null,a=!1,l={affectedEvents:i.createEmptyEventStore(),mutatedEvents:i.createEmptyEventStore(),isEvent:this.dragMeta.create};e&&(o=e.context,this.canDropElOnCalendar(n.subjectEl,o)&&(s=function(e,t,n){let r=Object.assign({},t.leftoverProps);for(let i of n.pluginHooks.externalDefTransforms)Object.assign(r,i(e,t));let{refined:o,extra:s}=i.refineEventDef(r,n),a=i.parseEventDef(o,s,t.sourceId,e.allDay,n.options.forceEventDuration||Boolean(t.duration),n),l=e.range.start;e.allDay&&t.startTime&&(l=n.dateEnv.add(l,t.startTime));let c=t.duration?n.dateEnv.add(l,t.duration):i.getDefaultEventEnd(e.allDay,l,n);return{def:a,instance:i.createEventInstance(a.defId,{start:l,end:c})}}(e.dateSpan,this.dragMeta,o),l.mutatedEvents=i.eventTupleToStore(s),a=!i.isInteractionValid(l,e.dateProfile,o),a&&(l.mutatedEvents=i.createEmptyEventStore(),s=null))),this.displayDrag(o,l),r.setMirrorIsVisible(t||!s||!document.querySelector(".fc-event-mirror")),a?i.disableCursor():i.enableCursor(),t||(r.setMirrorNeedsRevert(!s),this.receivingContext=o,this.droppableEvent=s)},this.handleDragEnd=e=>{let{receivingContext:t,droppableEvent:n}=this;if(this.clearDrag(),t&&n){let r=this.hitDragging.finalHit,o=r.context.viewApi,s=this.dragMeta;if(t.emitter.trigger("drop",Object.assign(Object.assign({},_(r.dateSpan,t)),{draggedEl:e.subjectEl,jsEvent:e.origEvent,view:o})),s.create){let r=i.eventTupleToStore(n);t.dispatch({type:"MERGE_EVENTS",eventStore:r}),e.isTouch&&t.dispatch({type:"SELECT_EVENT",eventInstanceId:n.instance.instanceId}),t.emitter.trigger("eventReceive",{event:new i.EventImpl(t,n.def,n.instance),relatedEvents:[],revert(){t.dispatch({type:"REMOVE_EVENTS",eventStore:r})},draggedEl:e.subjectEl,view:o})}}this.receivingContext=null,this.droppableEvent=null};let n=this.hitDragging=new E(e,i.interactionSettingsStore);n.requireInitial=!1,n.emitter.on("dragstart",this.handleDragStart),n.emitter.on("hitupdate",this.handleHitUpdate),n.emitter.on("dragend",this.handleDragEnd),this.suppliedDragMeta=t}buildDragMeta(e){return"object"==typeof this.suppliedDragMeta?i.parseDragMeta(this.suppliedDragMeta):"function"==typeof this.suppliedDragMeta?i.parseDragMeta(this.suppliedDragMeta(e)):function(e){let t=function(e,t){let n=i.config.dataAttrPrefix,r=(n?n+"-":"")+"event";return e.getAttribute("data-"+r)||""}(e),n=t?JSON.parse(t):{create:!1};return i.parseDragMeta(n)}(e)}displayDrag(e,t){let n=this.receivingContext;n&&n!==e&&n.dispatch({type:"UNSET_EVENT_DRAG"}),e&&e.dispatch({type:"SET_EVENT_DRAG",state:t})}clearDrag(){this.receivingContext&&this.receivingContext.dispatch({type:"UNSET_EVENT_DRAG"})}canDropElOnCalendar(e,t){let n=t.options.dropAccept;return"function"==typeof n?n.call(t.calendarApi,e):"string"!=typeof n||!n||Boolean(i.elementMatches(e,n))}}i.config.dataAttrPrefix="";class M extends i.ElementDragging{constructor(e){super(e),this.shouldIgnoreMove=!1,this.mirrorSelector="",this.currentMirrorEl=null,this.handlePointerDown=e=>{this.emitter.trigger("pointerdown",e),this.shouldIgnoreMove||this.emitter.trigger("dragstart",e)},this.handlePointerMove=e=>{this.shouldIgnoreMove||this.emitter.trigger("dragmove",e)},this.handlePointerUp=e=>{this.emitter.trigger("pointerup",e),this.shouldIgnoreMove||this.emitter.trigger("dragend",e)};let t=this.pointer=new l(e);t.emitter.on("pointerdown",this.handlePointerDown),t.emitter.on("pointermove",this.handlePointerMove),t.emitter.on("pointerup",this.handlePointerUp)}destroy(){this.pointer.destroy()}setIgnoreMove(e){this.shouldIgnoreMove=e}setMirrorIsVisible(e){if(e)this.currentMirrorEl&&(this.currentMirrorEl.style.visibility="",this.currentMirrorEl=null);else{let e=this.mirrorSelector?document.querySelector(this.mirrorSelector):null;e&&(this.currentMirrorEl=e,e.style.visibility="hidden")}}}var O=r.createPlugin({name:"@fullcalendar/interaction",componentInteractions:[S,A,D,C],calendarInteractions:[class{constructor(e){this.context=e,this.isRecentPointerDateSelect=!1,this.matchesCancel=!1,this.matchesEvent=!1,this.onSelect=e=>{e.jsEvent&&(this.isRecentPointerDateSelect=!0)},this.onDocumentPointerDown=e=>{let t=this.context.options.unselectCancel,n=i.getEventTargetViaRoot(e.origEvent);this.matchesCancel=!!i.elementClosest(n,t),this.matchesEvent=!!i.elementClosest(n,D.SELECTOR)},this.onDocumentPointerUp=e=>{let{context:t}=this,{documentPointer:n}=this,r=t.getCurrentData();if(!n.wasTouchScroll){if(r.dateSelection&&!this.isRecentPointerDateSelect){let n=t.options.unselectAuto;!n||n&&this.matchesCancel||t.calendarApi.unselect(e)}r.eventSelection&&!this.matchesEvent&&t.dispatch({type:"UNSELECT_EVENT"})}this.isRecentPointerDateSelect=!1};let t=this.documentPointer=new l(document);t.shouldIgnoreMove=!0,t.shouldWatchScroll=!1,t.emitter.on("pointerdown",this.onDocumentPointerDown),t.emitter.on("pointerup",this.onDocumentPointerUp),e.emitter.on("select",this.onSelect)}destroy(){this.context.emitter.off("select",this.onSelect),this.documentPointer.destroy()}}],elementDraggingImpl:m,optionRefiners:w,listenerRefiners:R});t.Draggable=class{constructor(e,t={}){this.handlePointerDown=e=>{let{dragging:t}=this,{minDistance:n,longPressDelay:r}=this.settings;t.minDistance=null!=n?n:e.isTouch?0:i.BASE_OPTION_DEFAULTS.eventDragMinDistance,t.delay=e.isTouch?null!=r?r:i.BASE_OPTION_DEFAULTS.longPressDelay:0},this.handleDragStart=e=>{e.isTouch&&this.dragging.delay&&e.subjectEl.classList.contains("fc-event")&&this.dragging.mirror.getMirrorEl().classList.add("fc-event-selected")},this.settings=t;let n=this.dragging=new m(e);n.touchScrollAllowed=!1,null!=t.itemSelector&&(n.pointer.selector=t.itemSelector),null!=t.appendTo&&(n.mirror.parentNode=t.appendTo),n.emitter.on("pointerdown",this.handlePointerDown),n.emitter.on("dragstart",this.handleDragStart),new T(n,t.eventData)}destroy(){this.dragging.destroy()}},t.ThirdPartyDraggable=class{constructor(e,t){let n=document;e===document||e instanceof Element?(n=e,t=t||{}):t=e||{};let r=this.dragging=new M(n);"string"==typeof t.itemSelector?r.pointer.selector=t.itemSelector:n===document&&(r.pointer.selector="[data-event]"),"string"==typeof t.mirrorSelector&&(r.mirrorSelector=t.mirrorSelector),new T(r,t.eventData)}destroy(){this.dragging.destroy()}},t.default=O}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,